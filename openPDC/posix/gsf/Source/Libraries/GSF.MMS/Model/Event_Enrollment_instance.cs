//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System.Runtime.CompilerServices;
using GSF.ASN1;
using GSF.ASN1.Attributes;
using GSF.ASN1.Coders;
using GSF.ASN1.Types;

namespace GSF.MMS.Model
{
    
    [ASN1PreparedElement]
    [ASN1Sequence(Name = "Event_Enrollment_instance", IsSet = false)]
    public class Event_Enrollment_instance : IASN1PreparedElement
    {
        private static readonly IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(Event_Enrollment_instance));
        private DefinitionChoiceType definition_;
        private ObjectName name_;

        [ASN1Element(Name = "name", IsOptional = false, HasTag = true, Tag = 0, HasDefaultValue = false)]
        public ObjectName Name
        {
            get
            {
                return name_;
            }
            set
            {
                name_ = value;
            }
        }


        [ASN1Element(Name = "definition", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public DefinitionChoiceType Definition
        {
            get
            {
                return definition_;
            }
            set
            {
                definition_ = value;
            }
        }


        public void initWithDefaults()
        {
        }


        public IASN1PreparedElementData PreparedData
        {
            get
            {
                return preparedData;
            }
        }

        [ASN1PreparedElement]
        [ASN1Choice(Name = "definition")]
        public class DefinitionChoiceType : IASN1PreparedElement
        {
            private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(DefinitionChoiceType));
            private DetailsSequenceType details_;
            private bool details_selected;
            private ObjectIdentifier reference_;
            private bool reference_selected;


            [ASN1ObjectIdentifier(Name = "")]
            [ASN1Element(Name = "reference", IsOptional = false, HasTag = true, Tag = 1, HasDefaultValue = false)]
            public ObjectIdentifier Reference
            {
                get
                {
                    return reference_;
                }
                set
                {
                    selectReference(value);
                }
            }


            [ASN1Element(Name = "details", IsOptional = false, HasTag = true, Tag = 2, HasDefaultValue = false)]
            public DetailsSequenceType Details
            {
                get
                {
                    return details_;
                }
                set
                {
                    selectDetails(value);
                }
            }

            public void initWithDefaults()
            {
            }

            public IASN1PreparedElementData PreparedData
            {
                get
                {
                    return preparedData;
                }
            }


            public bool isReferenceSelected()
            {
                return reference_selected;
            }


            public void selectReference(ObjectIdentifier val)
            {
                reference_ = val;
                reference_selected = true;


                details_selected = false;
            }


            public bool isDetailsSelected()
            {
                return details_selected;
            }


            public void selectDetails(DetailsSequenceType val)
            {
                details_ = val;
                details_selected = true;


                reference_selected = false;
            }

            [ASN1PreparedElement]
            [ASN1Sequence(Name = "details", IsSet = false)]
            public class DetailsSequenceType : IASN1PreparedElement
            {
                private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(DetailsSequenceType));
                private AlarmAckRule aaRule_;

                private bool aaRule_present;
                private Access_Control_List_instance accessControl_;
                private ApplicationReference clientApplication_;

                private bool clientApplication_present;
                private DisplayEnhancementChoiceType displayEnhancement_;
                private EE_Duration duration_;

                private bool duration_present;
                private Transitions ecTransitions_;


                private EE_Class eeClass_;
                private Event_Action_instance eventAction_;

                private bool eventAction_present;


                private Event_Condition_instance eventCondition_;


                private RemainingDelayChoiceType remainingDelay_;

                private bool remainingDelay_present;

                [ASN1Element(Name = "accessControl", IsOptional = false, HasTag = true, Tag = 3, HasDefaultValue = false)]
                public Access_Control_List_instance AccessControl
                {
                    get
                    {
                        return accessControl_;
                    }
                    set
                    {
                        accessControl_ = value;
                    }
                }

                [ASN1Element(Name = "eeClass", IsOptional = false, HasTag = true, Tag = 4, HasDefaultValue = false)]
                public EE_Class EeClass
                {
                    get
                    {
                        return eeClass_;
                    }
                    set
                    {
                        eeClass_ = value;
                    }
                }

                [ASN1Element(Name = "eventCondition", IsOptional = false, HasTag = true, Tag = 5, HasDefaultValue = false)]
                public Event_Condition_instance EventCondition
                {
                    get
                    {
                        return eventCondition_;
                    }
                    set
                    {
                        eventCondition_ = value;
                    }
                }

                [ASN1Element(Name = "ecTransitions", IsOptional = false, HasTag = true, Tag = 6, HasDefaultValue = false)]
                public Transitions EcTransitions
                {
                    get
                    {
                        return ecTransitions_;
                    }
                    set
                    {
                        ecTransitions_ = value;
                    }
                }


                [ASN1Element(Name = "remainingDelay", IsOptional = true, HasTag = false, HasDefaultValue = false)]
                public RemainingDelayChoiceType RemainingDelay
                {
                    get
                    {
                        return remainingDelay_;
                    }
                    set
                    {
                        remainingDelay_ = value;
                        remainingDelay_present = true;
                    }
                }


                [ASN1Element(Name = "eventAction", IsOptional = true, HasTag = true, Tag = 9, HasDefaultValue = false)]
                public Event_Action_instance EventAction
                {
                    get
                    {
                        return eventAction_;
                    }
                    set
                    {
                        eventAction_ = value;
                        eventAction_present = true;
                    }
                }


                [ASN1Element(Name = "duration", IsOptional = true, HasTag = true, Tag = 10, HasDefaultValue = false)]
                public EE_Duration Duration
                {
                    get
                    {
                        return duration_;
                    }
                    set
                    {
                        duration_ = value;
                        duration_present = true;
                    }
                }


                [ASN1Element(Name = "clientApplication", IsOptional = true, HasTag = true, Tag = 11, HasDefaultValue = false)]
                public ApplicationReference ClientApplication
                {
                    get
                    {
                        return clientApplication_;
                    }
                    set
                    {
                        clientApplication_ = value;
                        clientApplication_present = true;
                    }
                }


                [ASN1Element(Name = "aaRule", IsOptional = true, HasTag = true, Tag = 12, HasDefaultValue = false)]
                public AlarmAckRule AaRule
                {
                    get
                    {
                        return aaRule_;
                    }
                    set
                    {
                        aaRule_ = value;
                        aaRule_present = true;
                    }
                }


                [ASN1Element(Name = "displayEnhancement", IsOptional = false, HasTag = false, HasDefaultValue = false)]
                public DisplayEnhancementChoiceType DisplayEnhancement
                {
                    get
                    {
                        return displayEnhancement_;
                    }
                    set
                    {
                        displayEnhancement_ = value;
                    }
                }

                public void initWithDefaults()
                {
                }

                public IASN1PreparedElementData PreparedData
                {
                    get
                    {
                        return preparedData;
                    }
                }


                public bool isRemainingDelayPresent()
                {
                    return remainingDelay_present;
                }

                public bool isEventActionPresent()
                {
                    return eventAction_present;
                }

                public bool isDurationPresent()
                {
                    return duration_present;
                }

                public bool isClientApplicationPresent()
                {
                    return clientApplication_present;
                }

                public bool isAaRulePresent()
                {
                    return aaRule_present;
                }

                [ASN1PreparedElement]
                [ASN1Choice(Name = "displayEnhancement")]
                public class DisplayEnhancementChoiceType : IASN1PreparedElement
                {
                    private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(DisplayEnhancementChoiceType));
                    private NullObject none_;
                    private bool none_selected;
                    private long number_;
                    private bool number_selected;
                    private MMSString text_;
                    private bool text_selected;


                    [ASN1Element(Name = "text", IsOptional = false, HasTag = true, Tag = 13, HasDefaultValue = false)]
                    public MMSString Text
                    {
                        get
                        {
                            return text_;
                        }
                        set
                        {
                            selectText(value);
                        }
                    }


                    [ASN1Integer(Name = "")]
                    [ASN1Element(Name = "number", IsOptional = false, HasTag = true, Tag = 14, HasDefaultValue = false)]
                    public long Number
                    {
                        get
                        {
                            return number_;
                        }
                        set
                        {
                            selectNumber(value);
                        }
                    }


                    [ASN1Null(Name = "none")]
                    [ASN1Element(Name = "none", IsOptional = false, HasTag = true, Tag = 15, HasDefaultValue = false)]
                    public NullObject None
                    {
                        get
                        {
                            return none_;
                        }
                        set
                        {
                            selectNone(value);
                        }
                    }

                    public void initWithDefaults()
                    {
                    }

                    public IASN1PreparedElementData PreparedData
                    {
                        get
                        {
                            return preparedData;
                        }
                    }


                    public bool isTextSelected()
                    {
                        return text_selected;
                    }


                    public void selectText(MMSString val)
                    {
                        text_ = val;
                        text_selected = true;


                        number_selected = false;

                        none_selected = false;
                    }


                    public bool isNumberSelected()
                    {
                        return number_selected;
                    }


                    public void selectNumber(long val)
                    {
                        number_ = val;
                        number_selected = true;


                        text_selected = false;

                        none_selected = false;
                    }


                    public bool isNoneSelected()
                    {
                        return none_selected;
                    }


                    public void selectNone()
                    {
                        selectNone(new NullObject());
                    }


                    public void selectNone(NullObject val)
                    {
                        none_ = val;
                        none_selected = true;


                        text_selected = false;

                        number_selected = false;
                    }
                }

                [ASN1PreparedElement]
                [ASN1Choice(Name = "remainingDelay")]
                public class RemainingDelayChoiceType : IASN1PreparedElement
                {
                    private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(RemainingDelayChoiceType));
                    private NullObject forever_;
                    private bool forever_selected;
                    private long time_;
                    private bool time_selected;


                    [ASN1Integer(Name = "")]
                    [ASN1Element(Name = "time", IsOptional = false, HasTag = true, Tag = 7, HasDefaultValue = false)]
                    public long Time
                    {
                        get
                        {
                            return time_;
                        }
                        set
                        {
                            selectTime(value);
                        }
                    }


                    [ASN1Null(Name = "forever")]
                    [ASN1Element(Name = "forever", IsOptional = false, HasTag = true, Tag = 8, HasDefaultValue = false)]
                    public NullObject Forever
                    {
                        get
                        {
                            return forever_;
                        }
                        set
                        {
                            selectForever(value);
                        }
                    }

                    public void initWithDefaults()
                    {
                    }

                    public IASN1PreparedElementData PreparedData
                    {
                        get
                        {
                            return preparedData;
                        }
                    }


                    public bool isTimeSelected()
                    {
                        return time_selected;
                    }


                    public void selectTime(long val)
                    {
                        time_ = val;
                        time_selected = true;


                        forever_selected = false;
                    }


                    public bool isForeverSelected()
                    {
                        return forever_selected;
                    }


                    public void selectForever()
                    {
                        selectForever(new NullObject());
                    }


                    public void selectForever(NullObject val)
                    {
                        forever_ = val;
                        forever_selected = true;


                        time_selected = false;
                    }
                }
            }
        }
    }
}