//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System.Runtime.CompilerServices;
using GSF.ASN1;
using GSF.ASN1.Attributes;
using GSF.ASN1.Coders;
using GSF.ASN1.Types;

namespace GSF.MMS.Model
{
    
    [ASN1PreparedElement]
    [ASN1BoxedType(Name = "CS_EventNotification")]
    public class CS_EventNotification : IASN1PreparedElement
    {
        private static readonly IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(CS_EventNotification));
        private CS_EventNotificationChoiceType val;


        [ASN1Element(Name = "CS-EventNotification", IsOptional = false, HasTag = true, Tag = 0, HasDefaultValue = false)]
        public CS_EventNotificationChoiceType Value
        {
            get
            {
                return val;
            }

            set
            {
                val = value;
            }
        }


        public void initWithDefaults()
        {
        }


        public IASN1PreparedElementData PreparedData
        {
            get
            {
                return preparedData;
            }
        }

        [ASN1PreparedElement]
        [ASN1Choice(Name = "CS-EventNotification")]
        public class CS_EventNotificationChoiceType : IASN1PreparedElement
        {
            private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(CS_EventNotificationChoiceType));
            private long index_;
            private bool index_selected;


            private NullObject noEnhancement_;
            private bool noEnhancement_selected;
            private string string_;
            private bool string_selected;


            [ASN1String(Name = "",
                StringType = UniversalTags.VisibleString, IsUCS = false)]
            [ASN1Element(Name = "string", IsOptional = false, HasTag = true, Tag = 0, HasDefaultValue = false)]
            public string String
            {
                get
                {
                    return string_;
                }
                set
                {
                    selectString(value);
                }
            }

            [ASN1Integer(Name = "")]
            [ASN1Element(Name = "index", IsOptional = false, HasTag = true, Tag = 1, HasDefaultValue = false)]
            public long Index
            {
                get
                {
                    return index_;
                }
                set
                {
                    selectIndex(value);
                }
            }


            [ASN1Null(Name = "noEnhancement")]
            [ASN1Element(Name = "noEnhancement", IsOptional = false, HasTag = false, HasDefaultValue = false)]
            public NullObject NoEnhancement
            {
                get
                {
                    return noEnhancement_;
                }
                set
                {
                    selectNoEnhancement(value);
                }
            }

            public void initWithDefaults()
            {
            }

            public IASN1PreparedElementData PreparedData
            {
                get
                {
                    return preparedData;
                }
            }


            public bool isStringSelected()
            {
                return string_selected;
            }


            public void selectString(string val)
            {
                string_ = val;
                string_selected = true;


                index_selected = false;

                noEnhancement_selected = false;
            }


            public bool isIndexSelected()
            {
                return index_selected;
            }


            public void selectIndex(long val)
            {
                index_ = val;
                index_selected = true;


                string_selected = false;

                noEnhancement_selected = false;
            }


            public bool isNoEnhancementSelected()
            {
                return noEnhancement_selected;
            }


            public void selectNoEnhancement()
            {
                selectNoEnhancement(new NullObject());
            }


            public void selectNoEnhancement(NullObject val)
            {
                noEnhancement_ = val;
                noEnhancement_selected = true;


                string_selected = false;

                index_selected = false;
            }
        }
    }
}