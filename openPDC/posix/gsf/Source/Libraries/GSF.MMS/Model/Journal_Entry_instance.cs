//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System.Runtime.CompilerServices;
using System.Collections.Generic;
using GSF.ASN1;
using GSF.ASN1.Attributes;
using GSF.ASN1.Coders;

namespace GSF.MMS.Model
{
    
    [ASN1PreparedElement]
    [ASN1Sequence(Name = "Journal_Entry_instance", IsSet = false)]
    public class Journal_Entry_instance : IASN1PreparedElement
    {
        private static readonly IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(Journal_Entry_instance));
        private ApplicationReference clientApplication_;
        private byte[] entry_;
        private EventTransitionRecordSequenceType eventTransitionRecord_;

        private bool eventTransitionRecord_present;
        private InformationTypeEnumType informationType_;
        private ICollection<JournalVariablesSequenceType> journalVariables_;

        private bool journalVariables_present;
        private Journal_instance journal_;
        private long orderOfReceipt_;
        private MMS255String textComment_;

        private bool textComment_present;
        private TimeOfDay timeStamp_;

        [ASN1Element(Name = "journal", IsOptional = false, HasTag = true, Tag = 0, HasDefaultValue = false)]
        public Journal_instance Journal
        {
            get
            {
                return journal_;
            }
            set
            {
                journal_ = value;
            }
        }


        [ASN1OctetString(Name = "")]
        [ASN1Element(Name = "entry", IsOptional = false, HasTag = true, Tag = 1, HasDefaultValue = false)]
        public byte[] Entry
        {
            get
            {
                return entry_;
            }
            set
            {
                entry_ = value;
            }
        }


        [ASN1Element(Name = "clientApplication", IsOptional = false, HasTag = true, Tag = 2, HasDefaultValue = false)]
        public ApplicationReference ClientApplication
        {
            get
            {
                return clientApplication_;
            }
            set
            {
                clientApplication_ = value;
            }
        }


        [ASN1Element(Name = "timeStamp", IsOptional = false, HasTag = true, Tag = 3, HasDefaultValue = false)]
        public TimeOfDay TimeStamp
        {
            get
            {
                return timeStamp_;
            }
            set
            {
                timeStamp_ = value;
            }
        }


        [ASN1Integer(Name = "")]
        [ASN1Element(Name = "orderOfReceipt", IsOptional = false, HasTag = true, Tag = 4, HasDefaultValue = false)]
        public long OrderOfReceipt
        {
            get
            {
                return orderOfReceipt_;
            }
            set
            {
                orderOfReceipt_ = value;
            }
        }


        [ASN1Element(Name = "informationType", IsOptional = false, HasTag = true, Tag = 5, HasDefaultValue = false)]
        public InformationTypeEnumType InformationType
        {
            get
            {
                return informationType_;
            }
            set
            {
                informationType_ = value;
            }
        }


        [ASN1Element(Name = "textComment", IsOptional = true, HasTag = true, Tag = 6, HasDefaultValue = false)]
        public MMS255String TextComment
        {
            get
            {
                return textComment_;
            }
            set
            {
                textComment_ = value;
                textComment_present = true;
            }
        }


        [ASN1Element(Name = "eventTransitionRecord", IsOptional = true, HasTag = true, Tag = 7, HasDefaultValue = false)]
        public EventTransitionRecordSequenceType EventTransitionRecord
        {
            get
            {
                return eventTransitionRecord_;
            }
            set
            {
                eventTransitionRecord_ = value;
                eventTransitionRecord_present = true;
            }
        }


        [ASN1SequenceOf(Name = "journalVariables", IsSetOf = false)]
        [ASN1Element(Name = "journalVariables", IsOptional = true, HasTag = true, Tag = 10, HasDefaultValue = false)]
        public ICollection<JournalVariablesSequenceType> JournalVariables
        {
            get
            {
                return journalVariables_;
            }
            set
            {
                journalVariables_ = value;
                journalVariables_present = true;
            }
        }

        public void initWithDefaults()
        {
        }

        public IASN1PreparedElementData PreparedData
        {
            get
            {
                return preparedData;
            }
        }


        public bool isTextCommentPresent()
        {
            return textComment_present;
        }

        public bool isEventTransitionRecordPresent()
        {
            return eventTransitionRecord_present;
        }

        public bool isJournalVariablesPresent()
        {
            return journalVariables_present;
        }

        [ASN1PreparedElement]
        [ASN1Sequence(Name = "eventTransitionRecord", IsSet = false)]
        public class EventTransitionRecordSequenceType : IASN1PreparedElement
        {
            private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(EventTransitionRecordSequenceType));
            private EC_State currentState_;
            private ObjectName name_;

            [ASN1Element(Name = "name", IsOptional = false, HasTag = true, Tag = 8, HasDefaultValue = false)]
            public ObjectName Name
            {
                get
                {
                    return name_;
                }
                set
                {
                    name_ = value;
                }
            }


            [ASN1Element(Name = "currentState", IsOptional = false, HasTag = true, Tag = 9, HasDefaultValue = false)]
            public EC_State CurrentState
            {
                get
                {
                    return currentState_;
                }
                set
                {
                    currentState_ = value;
                }
            }


            public void initWithDefaults()
            {
            }

            public IASN1PreparedElementData PreparedData
            {
                get
                {
                    return preparedData;
                }
            }
        }

        [ASN1PreparedElement]
        [ASN1Enum(Name = "InformationTypeEnumType")]
        public class InformationTypeEnumType : IASN1PreparedElement
        {
            public enum EnumType
            {
                [ASN1EnumItem(Name = "annotation", HasTag = true, Tag = 0)]
                annotation,
                [ASN1EnumItem(Name = "event-data", HasTag = true, Tag = 1)]
                event_data,
                [ASN1EnumItem(Name = "data", HasTag = true, Tag = 2)]
                data,
            }

            private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(InformationTypeEnumType));

            private EnumType val;

            public EnumType Value
            {
                get
                {
                    return val;
                }
                set
                {
                    val = value;
                }
            }

            public void initWithDefaults()
            {
            }


            public IASN1PreparedElementData PreparedData
            {
                get
                {
                    return preparedData;
                }
            }
        }

        [ASN1PreparedElement]
        [ASN1Sequence(Name = "journalVariables", IsSet = false)]
        public class JournalVariablesSequenceType : IASN1PreparedElement
        {
            private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(JournalVariablesSequenceType));
            private Data valueSpecification_;
            private MMS255String variableTag_;

            [ASN1Element(Name = "variableTag", IsOptional = false, HasTag = true, Tag = 11, HasDefaultValue = false)]
            public MMS255String VariableTag
            {
                get
                {
                    return variableTag_;
                }
                set
                {
                    variableTag_ = value;
                }
            }


            [ASN1Element(Name = "valueSpecification", IsOptional = false, HasTag = true, Tag = 12, HasDefaultValue = false)]
            public Data ValueSpecification
            {
                get
                {
                    return valueSpecification_;
                }
                set
                {
                    valueSpecification_ = value;
                }
            }


            public void initWithDefaults()
            {
            }

            public IASN1PreparedElementData PreparedData
            {
                get
                {
                    return preparedData;
                }
            }
        }
    }
}