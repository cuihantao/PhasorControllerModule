//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System.Runtime.CompilerServices;
using System.Collections.Generic;
using GSF.ASN1;
using GSF.ASN1.Attributes;
using GSF.ASN1.Coders;

namespace GSF.MMS.Model
{
    
    [ASN1PreparedElement]
    [ASN1Sequence(Name = "GetEventEnrollmentAttributes_Request", IsSet = false)]
    public class GetEventEnrollmentAttributes_Request : IASN1PreparedElement
    {
        private static readonly IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(GetEventEnrollmentAttributes_Request));
        private ApplicationReference clientApplication_;

        private bool clientApplication_present;
        private ObjectName continueAfter_;

        private bool continueAfter_present;
        private ObjectName eventActionName_;

        private bool eventActionName_present;


        private ObjectName eventConditionName_;

        private bool eventConditionName_present;
        private ICollection<ObjectName> eventEnrollmentNames_;

        private bool eventEnrollmentNames_present;
        private long scopeOfRequest_;

        [ASN1Integer(Name = "")]
        [ASN1Element(Name = "scopeOfRequest", IsOptional = false, HasTag = true, Tag = 0, HasDefaultValue = true)]
        public long ScopeOfRequest
        {
            get
            {
                return scopeOfRequest_;
            }
            set
            {
                scopeOfRequest_ = value;
            }
        }

        [ASN1SequenceOf(Name = "eventEnrollmentNames", IsSetOf = false)]
        [ASN1Element(Name = "eventEnrollmentNames", IsOptional = true, HasTag = true, Tag = 1, HasDefaultValue = false)]
        public ICollection<ObjectName> EventEnrollmentNames
        {
            get
            {
                return eventEnrollmentNames_;
            }
            set
            {
                eventEnrollmentNames_ = value;
                eventEnrollmentNames_present = true;
            }
        }

        [ASN1Element(Name = "clientApplication", IsOptional = true, HasTag = true, Tag = 2, HasDefaultValue = false)]
        public ApplicationReference ClientApplication
        {
            get
            {
                return clientApplication_;
            }
            set
            {
                clientApplication_ = value;
                clientApplication_present = true;
            }
        }

        [ASN1Element(Name = "eventConditionName", IsOptional = true, HasTag = true, Tag = 3, HasDefaultValue = false)]
        public ObjectName EventConditionName
        {
            get
            {
                return eventConditionName_;
            }
            set
            {
                eventConditionName_ = value;
                eventConditionName_present = true;
            }
        }


        [ASN1Element(Name = "eventActionName", IsOptional = true, HasTag = true, Tag = 4, HasDefaultValue = false)]
        public ObjectName EventActionName
        {
            get
            {
                return eventActionName_;
            }
            set
            {
                eventActionName_ = value;
                eventActionName_present = true;
            }
        }


        [ASN1Element(Name = "continueAfter", IsOptional = true, HasTag = true, Tag = 5, HasDefaultValue = false)]
        public ObjectName ContinueAfter
        {
            get
            {
                return continueAfter_;
            }
            set
            {
                continueAfter_ = value;
                continueAfter_present = true;
            }
        }

        public void initWithDefaults()
        {
            long param_ScopeOfRequest = 0
                ;
            ScopeOfRequest = param_ScopeOfRequest;
        }

        public IASN1PreparedElementData PreparedData
        {
            get
            {
                return preparedData;
            }
        }


        public bool isEventEnrollmentNamesPresent()
        {
            return eventEnrollmentNames_present;
        }

        public bool isClientApplicationPresent()
        {
            return clientApplication_present;
        }

        public bool isEventConditionNamePresent()
        {
            return eventConditionName_present;
        }

        public bool isEventActionNamePresent()
        {
            return eventActionName_present;
        }

        public bool isContinueAfterPresent()
        {
            return continueAfter_present;
        }
    }
}