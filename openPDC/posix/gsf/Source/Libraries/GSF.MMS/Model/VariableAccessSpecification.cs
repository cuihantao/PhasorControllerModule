//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System.Runtime.CompilerServices;
using System.Collections.Generic;
using GSF.ASN1;
using GSF.ASN1.Attributes;
using GSF.ASN1.Coders;

namespace GSF.MMS.Model
{
    
    [ASN1PreparedElement]
    [ASN1Choice(Name = "VariableAccessSpecification")]
    public class VariableAccessSpecification : IASN1PreparedElement
    {
        private static readonly IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(VariableAccessSpecification));
        private ICollection<ListOfVariableSequenceType> listOfVariable_;
        private bool listOfVariable_selected;


        private ObjectName variableListName_;
        private bool variableListName_selected;

        [ASN1SequenceOf(Name = "listOfVariable", IsSetOf = false)]
        [ASN1Element(Name = "listOfVariable", IsOptional = false, HasTag = true, Tag = 0, HasDefaultValue = false)]
        public ICollection<ListOfVariableSequenceType> ListOfVariable
        {
            get
            {
                return listOfVariable_;
            }
            set
            {
                selectListOfVariable(value);
            }
        }


        [ASN1Element(Name = "variableListName", IsOptional = false, HasTag = true, Tag = 1, HasDefaultValue = false)]
        public ObjectName VariableListName
        {
            get
            {
                return variableListName_;
            }
            set
            {
                selectVariableListName(value);
            }
        }

        public void initWithDefaults()
        {
        }

        public IASN1PreparedElementData PreparedData
        {
            get
            {
                return preparedData;
            }
        }


        public bool isListOfVariableSelected()
        {
            return listOfVariable_selected;
        }


        public void selectListOfVariable(ICollection<ListOfVariableSequenceType> val)
        {
            listOfVariable_ = val;
            listOfVariable_selected = true;


            variableListName_selected = false;
        }


        public bool isVariableListNameSelected()
        {
            return variableListName_selected;
        }


        public void selectVariableListName(ObjectName val)
        {
            variableListName_ = val;
            variableListName_selected = true;


            listOfVariable_selected = false;
        }

        [ASN1PreparedElement]
        [ASN1Sequence(Name = "listOfVariable", IsSet = false)]
        public class ListOfVariableSequenceType : IASN1PreparedElement
        {
            private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(ListOfVariableSequenceType));
            private AlternateAccess alternateAccess_;

            private bool alternateAccess_present;
            private VariableSpecification variableSpecification_;

            [ASN1Element(Name = "variableSpecification", IsOptional = false, HasTag = false, HasDefaultValue = false)]
            public VariableSpecification VariableSpecification
            {
                get
                {
                    return variableSpecification_;
                }
                set
                {
                    variableSpecification_ = value;
                }
            }

            [ASN1Element(Name = "alternateAccess", IsOptional = true, HasTag = true, Tag = 5, HasDefaultValue = false)]
            public AlternateAccess AlternateAccess
            {
                get
                {
                    return alternateAccess_;
                }
                set
                {
                    alternateAccess_ = value;
                    alternateAccess_present = true;
                }
            }


            public void initWithDefaults()
            {
            }

            public IASN1PreparedElementData PreparedData
            {
                get
                {
                    return preparedData;
                }
            }

            public bool isAlternateAccessPresent()
            {
                return alternateAccess_present;
            }
        }
    }
}