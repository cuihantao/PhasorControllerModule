//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System.Runtime.CompilerServices;
using System.Collections.Generic;
using GSF.ASN1;
using GSF.ASN1.Attributes;
using GSF.ASN1.Coders;
using GSF.ASN1.Types;

namespace GSF.MMS.Model
{
    
    [ASN1PreparedElement]
    [ASN1Sequence(Name = "Event_Condition_instance", IsSet = false)]
    public class Event_Condition_instance : IASN1PreparedElement
    {
        private static readonly IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(Event_Condition_instance));
        private DefinitionChoiceType definition_;
        private ObjectName name_;

        [ASN1Element(Name = "name", IsOptional = false, HasTag = true, Tag = 0, HasDefaultValue = false)]
        public ObjectName Name
        {
            get
            {
                return name_;
            }
            set
            {
                name_ = value;
            }
        }


        [ASN1Element(Name = "definition", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public DefinitionChoiceType Definition
        {
            get
            {
                return definition_;
            }
            set
            {
                definition_ = value;
            }
        }


        public void initWithDefaults()
        {
        }


        public IASN1PreparedElementData PreparedData
        {
            get
            {
                return preparedData;
            }
        }

        [ASN1PreparedElement]
        [ASN1Choice(Name = "definition")]
        public class DefinitionChoiceType : IASN1PreparedElement
        {
            private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(DefinitionChoiceType));
            private DetailsSequenceType details_;
            private bool details_selected;
            private ObjectIdentifier reference_;
            private bool reference_selected;


            [ASN1ObjectIdentifier(Name = "")]
            [ASN1Element(Name = "reference", IsOptional = false, HasTag = true, Tag = 1, HasDefaultValue = false)]
            public ObjectIdentifier Reference
            {
                get
                {
                    return reference_;
                }
                set
                {
                    selectReference(value);
                }
            }


            [ASN1Element(Name = "details", IsOptional = false, HasTag = true, Tag = 2, HasDefaultValue = false)]
            public DetailsSequenceType Details
            {
                get
                {
                    return details_;
                }
                set
                {
                    selectDetails(value);
                }
            }

            public void initWithDefaults()
            {
            }

            public IASN1PreparedElementData PreparedData
            {
                get
                {
                    return preparedData;
                }
            }


            public bool isReferenceSelected()
            {
                return reference_selected;
            }


            public void selectReference(ObjectIdentifier val)
            {
                reference_ = val;
                reference_selected = true;


                details_selected = false;
            }


            public bool isDetailsSelected()
            {
                return details_selected;
            }


            public void selectDetails(DetailsSequenceType val)
            {
                details_ = val;
                details_selected = true;


                reference_selected = false;
            }

            [ASN1PreparedElement]
            [ASN1Sequence(Name = "details", IsSet = false)]
            public class DetailsSequenceType : IASN1PreparedElement
            {
                private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(DetailsSequenceType));
                private Access_Control_List_instance accessControl_;
                private bool alarmSummaryReports_;

                private bool alarmSummaryReports_present;
                private DisplayEnhancementChoiceType displayEnhancement_;


                private EC_Class ecClass_;


                private EC_State ecState_;
                private bool enabled_;

                private bool enabled_present;
                private long evaluationInterval_;

                private bool evaluationInterval_present;
                private ICollection<Event_Enrollment_instance> eventEnrollments_;
                private Group_Priority_OverrideChoiceType group_Priority_Override_;

                private bool group_Priority_Override_present;
                private MonitoredVariableChoiceType monitoredVariable_;

                private bool monitoredVariable_present;


                private Priority priority_;
                private ICollection<Event_Condition_List_instance> referencingEventConditionLists_;


                private Severity severity_;

                [ASN1Element(Name = "accessControl", IsOptional = false, HasTag = true, Tag = 3, HasDefaultValue = false)]
                public Access_Control_List_instance AccessControl
                {
                    get
                    {
                        return accessControl_;
                    }
                    set
                    {
                        accessControl_ = value;
                    }
                }

                [ASN1Element(Name = "ecClass", IsOptional = false, HasTag = true, Tag = 4, HasDefaultValue = false)]
                public EC_Class EcClass
                {
                    get
                    {
                        return ecClass_;
                    }
                    set
                    {
                        ecClass_ = value;
                    }
                }

                [ASN1Element(Name = "ecState", IsOptional = false, HasTag = true, Tag = 5, HasDefaultValue = false)]
                public EC_State EcState
                {
                    get
                    {
                        return ecState_;
                    }
                    set
                    {
                        ecState_ = value;
                    }
                }

                [ASN1Element(Name = "priority", IsOptional = false, HasTag = true, Tag = 6, HasDefaultValue = false)]
                public Priority Priority
                {
                    get
                    {
                        return priority_;
                    }
                    set
                    {
                        priority_ = value;
                    }
                }

                [ASN1Element(Name = "severity", IsOptional = false, HasTag = true, Tag = 7, HasDefaultValue = false)]
                public Severity Severity
                {
                    get
                    {
                        return severity_;
                    }
                    set
                    {
                        severity_ = value;
                    }
                }


                [ASN1SequenceOf(Name = "eventEnrollments", IsSetOf = false)]
                [ASN1Element(Name = "eventEnrollments", IsOptional = false, HasTag = true, Tag = 8, HasDefaultValue = false)]
                public ICollection<Event_Enrollment_instance> EventEnrollments
                {
                    get
                    {
                        return eventEnrollments_;
                    }
                    set
                    {
                        eventEnrollments_ = value;
                    }
                }


                [ASN1Boolean(Name = "")]
                [ASN1Element(Name = "enabled", IsOptional = true, HasTag = true, Tag = 9, HasDefaultValue = false)]
                public bool Enabled
                {
                    get
                    {
                        return enabled_;
                    }
                    set
                    {
                        enabled_ = value;
                        enabled_present = true;
                    }
                }


                [ASN1Boolean(Name = "")]
                [ASN1Element(Name = "alarmSummaryReports", IsOptional = true, HasTag = true, Tag = 10, HasDefaultValue = false)]
                public bool AlarmSummaryReports
                {
                    get
                    {
                        return alarmSummaryReports_;
                    }
                    set
                    {
                        alarmSummaryReports_ = value;
                        alarmSummaryReports_present = true;
                    }
                }


                [ASN1Element(Name = "monitoredVariable", IsOptional = true, HasTag = false, HasDefaultValue = false)]
                public MonitoredVariableChoiceType MonitoredVariable
                {
                    get
                    {
                        return monitoredVariable_;
                    }
                    set
                    {
                        monitoredVariable_ = value;
                        monitoredVariable_present = true;
                    }
                }


                [ASN1Integer(Name = "")]
                [ASN1Element(Name = "evaluationInterval", IsOptional = true, HasTag = true, Tag = 14, HasDefaultValue = false)]
                public long EvaluationInterval
                {
                    get
                    {
                        return evaluationInterval_;
                    }
                    set
                    {
                        evaluationInterval_ = value;
                        evaluationInterval_present = true;
                    }
                }


                [ASN1Element(Name = "displayEnhancement", IsOptional = false, HasTag = false, HasDefaultValue = false)]
                public DisplayEnhancementChoiceType DisplayEnhancement
                {
                    get
                    {
                        return displayEnhancement_;
                    }
                    set
                    {
                        displayEnhancement_ = value;
                    }
                }


                [ASN1Element(Name = "group-Priority-Override", IsOptional = true, HasTag = false, HasDefaultValue = false)]
                public Group_Priority_OverrideChoiceType Group_Priority_Override
                {
                    get
                    {
                        return group_Priority_Override_;
                    }
                    set
                    {
                        group_Priority_Override_ = value;
                        group_Priority_Override_present = true;
                    }
                }


                [ASN1SequenceOf(Name = "referencingEventConditionLists", IsSetOf = false)]
                [ASN1Element(Name = "referencingEventConditionLists", IsOptional = false, HasTag = true, Tag = 20, HasDefaultValue = false)]
                public ICollection<Event_Condition_List_instance> ReferencingEventConditionLists
                {
                    get
                    {
                        return referencingEventConditionLists_;
                    }
                    set
                    {
                        referencingEventConditionLists_ = value;
                    }
                }

                public void initWithDefaults()
                {
                }

                public IASN1PreparedElementData PreparedData
                {
                    get
                    {
                        return preparedData;
                    }
                }


                public bool isEnabledPresent()
                {
                    return enabled_present;
                }

                public bool isAlarmSummaryReportsPresent()
                {
                    return alarmSummaryReports_present;
                }

                public bool isMonitoredVariablePresent()
                {
                    return monitoredVariable_present;
                }

                public bool isEvaluationIntervalPresent()
                {
                    return evaluationInterval_present;
                }

                public bool isGroup_Priority_OverridePresent()
                {
                    return group_Priority_Override_present;
                }

                [ASN1PreparedElement]
                [ASN1Choice(Name = "displayEnhancement")]
                public class DisplayEnhancementChoiceType : IASN1PreparedElement
                {
                    private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(DisplayEnhancementChoiceType));
                    private NullObject none_;
                    private bool none_selected;
                    private long number_;
                    private bool number_selected;
                    private MMSString text_;
                    private bool text_selected;


                    [ASN1Element(Name = "text", IsOptional = false, HasTag = true, Tag = 15, HasDefaultValue = false)]
                    public MMSString Text
                    {
                        get
                        {
                            return text_;
                        }
                        set
                        {
                            selectText(value);
                        }
                    }


                    [ASN1Integer(Name = "")]
                    [ASN1Element(Name = "number", IsOptional = false, HasTag = true, Tag = 16, HasDefaultValue = false)]
                    public long Number
                    {
                        get
                        {
                            return number_;
                        }
                        set
                        {
                            selectNumber(value);
                        }
                    }


                    [ASN1Null(Name = "none")]
                    [ASN1Element(Name = "none", IsOptional = false, HasTag = true, Tag = 17, HasDefaultValue = false)]
                    public NullObject None
                    {
                        get
                        {
                            return none_;
                        }
                        set
                        {
                            selectNone(value);
                        }
                    }

                    public void initWithDefaults()
                    {
                    }

                    public IASN1PreparedElementData PreparedData
                    {
                        get
                        {
                            return preparedData;
                        }
                    }


                    public bool isTextSelected()
                    {
                        return text_selected;
                    }


                    public void selectText(MMSString val)
                    {
                        text_ = val;
                        text_selected = true;


                        number_selected = false;

                        none_selected = false;
                    }


                    public bool isNumberSelected()
                    {
                        return number_selected;
                    }


                    public void selectNumber(long val)
                    {
                        number_ = val;
                        number_selected = true;


                        text_selected = false;

                        none_selected = false;
                    }


                    public bool isNoneSelected()
                    {
                        return none_selected;
                    }


                    public void selectNone()
                    {
                        selectNone(new NullObject());
                    }


                    public void selectNone(NullObject val)
                    {
                        none_ = val;
                        none_selected = true;


                        text_selected = false;

                        number_selected = false;
                    }
                }

                [ASN1PreparedElement]
                [ASN1Choice(Name = "group-Priority-Override")]
                public class Group_Priority_OverrideChoiceType : IASN1PreparedElement
                {
                    private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(Group_Priority_OverrideChoiceType));
                    private Priority priority_;
                    private bool priority_selected;


                    private NullObject undefined_;
                    private bool undefined_selected;

                    [ASN1Element(Name = "priority", IsOptional = false, HasTag = true, Tag = 18, HasDefaultValue = false)]
                    public Priority Priority
                    {
                        get
                        {
                            return priority_;
                        }
                        set
                        {
                            selectPriority(value);
                        }
                    }


                    [ASN1Null(Name = "undefined")]
                    [ASN1Element(Name = "undefined", IsOptional = false, HasTag = true, Tag = 19, HasDefaultValue = false)]
                    public NullObject Undefined
                    {
                        get
                        {
                            return undefined_;
                        }
                        set
                        {
                            selectUndefined(value);
                        }
                    }

                    public void initWithDefaults()
                    {
                    }

                    public IASN1PreparedElementData PreparedData
                    {
                        get
                        {
                            return preparedData;
                        }
                    }


                    public bool isPrioritySelected()
                    {
                        return priority_selected;
                    }


                    public void selectPriority(Priority val)
                    {
                        priority_ = val;
                        priority_selected = true;


                        undefined_selected = false;
                    }


                    public bool isUndefinedSelected()
                    {
                        return undefined_selected;
                    }


                    public void selectUndefined()
                    {
                        selectUndefined(new NullObject());
                    }


                    public void selectUndefined(NullObject val)
                    {
                        undefined_ = val;
                        undefined_selected = true;


                        priority_selected = false;
                    }
                }

                [ASN1PreparedElement]
                [ASN1Choice(Name = "monitoredVariable")]
                public class MonitoredVariableChoiceType : IASN1PreparedElement
                {
                    private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(MonitoredVariableChoiceType));
                    private Named_Variable_instance named_;
                    private bool named_selected;


                    private Unnamed_Variable_instance unnamed_;
                    private bool unnamed_selected;


                    private NullObject unspecified_;
                    private bool unspecified_selected;

                    [ASN1Element(Name = "named", IsOptional = false, HasTag = true, Tag = 11, HasDefaultValue = false)]
                    public Named_Variable_instance Named
                    {
                        get
                        {
                            return named_;
                        }
                        set
                        {
                            selectNamed(value);
                        }
                    }

                    [ASN1Element(Name = "unnamed", IsOptional = false, HasTag = true, Tag = 12, HasDefaultValue = false)]
                    public Unnamed_Variable_instance Unnamed
                    {
                        get
                        {
                            return unnamed_;
                        }
                        set
                        {
                            selectUnnamed(value);
                        }
                    }


                    [ASN1Null(Name = "unspecified")]
                    [ASN1Element(Name = "unspecified", IsOptional = false, HasTag = true, Tag = 13, HasDefaultValue = false)]
                    public NullObject Unspecified
                    {
                        get
                        {
                            return unspecified_;
                        }
                        set
                        {
                            selectUnspecified(value);
                        }
                    }

                    public void initWithDefaults()
                    {
                    }

                    public IASN1PreparedElementData PreparedData
                    {
                        get
                        {
                            return preparedData;
                        }
                    }


                    public bool isNamedSelected()
                    {
                        return named_selected;
                    }


                    public void selectNamed(Named_Variable_instance val)
                    {
                        named_ = val;
                        named_selected = true;


                        unnamed_selected = false;

                        unspecified_selected = false;
                    }


                    public bool isUnnamedSelected()
                    {
                        return unnamed_selected;
                    }


                    public void selectUnnamed(Unnamed_Variable_instance val)
                    {
                        unnamed_ = val;
                        unnamed_selected = true;


                        named_selected = false;

                        unspecified_selected = false;
                    }


                    public bool isUnspecifiedSelected()
                    {
                        return unspecified_selected;
                    }


                    public void selectUnspecified()
                    {
                        selectUnspecified(new NullObject());
                    }


                    public void selectUnspecified(NullObject val)
                    {
                        unspecified_ = val;
                        unspecified_selected = true;


                        named_selected = false;

                        unnamed_selected = false;
                    }
                }
            }
        }
    }
}