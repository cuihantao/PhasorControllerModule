//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System.Runtime.CompilerServices;
using System.Collections.Generic;
using GSF.ASN1;
using GSF.ASN1.Attributes;
using GSF.ASN1.Coders;

namespace GSF.MMS.Model
{
    
    [ASN1PreparedElement]
    [ASN1Sequence(Name = "GetDomainAttributes_Response", IsSet = false)]
    public class GetDomainAttributes_Response : IASN1PreparedElement
    {
        private static readonly IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(GetDomainAttributes_Response));
        private Identifier accessControlList_;

        private bool accessControlList_present;
        private ICollection<MMSString> listOfCapabilities_;
        private ICollection<Identifier> listOfProgramInvocations_;
        private bool mmsDeletable_;
        private bool sharable_;


        private DomainState state_;
        private Integer8 uploadInProgress_;

        [ASN1SequenceOf(Name = "listOfCapabilities", IsSetOf = false)]
        [ASN1Element(Name = "listOfCapabilities", IsOptional = false, HasTag = true, Tag = 0, HasDefaultValue = false)]
        public ICollection<MMSString> ListOfCapabilities
        {
            get
            {
                return listOfCapabilities_;
            }
            set
            {
                listOfCapabilities_ = value;
            }
        }

        [ASN1Element(Name = "state", IsOptional = false, HasTag = true, Tag = 1, HasDefaultValue = false)]
        public DomainState State
        {
            get
            {
                return state_;
            }
            set
            {
                state_ = value;
            }
        }


        [ASN1Boolean(Name = "")]
        [ASN1Element(Name = "mmsDeletable", IsOptional = false, HasTag = true, Tag = 2, HasDefaultValue = false)]
        public bool MmsDeletable
        {
            get
            {
                return mmsDeletable_;
            }
            set
            {
                mmsDeletable_ = value;
            }
        }


        [ASN1Boolean(Name = "")]
        [ASN1Element(Name = "sharable", IsOptional = false, HasTag = true, Tag = 3, HasDefaultValue = false)]
        public bool Sharable
        {
            get
            {
                return sharable_;
            }
            set
            {
                sharable_ = value;
            }
        }


        [ASN1SequenceOf(Name = "listOfProgramInvocations", IsSetOf = false)]
        [ASN1Element(Name = "listOfProgramInvocations", IsOptional = false, HasTag = true, Tag = 4, HasDefaultValue = false)]
        public ICollection<Identifier> ListOfProgramInvocations
        {
            get
            {
                return listOfProgramInvocations_;
            }
            set
            {
                listOfProgramInvocations_ = value;
            }
        }


        [ASN1Element(Name = "uploadInProgress", IsOptional = false, HasTag = true, Tag = 5, HasDefaultValue = false)]
        public Integer8 UploadInProgress
        {
            get
            {
                return uploadInProgress_;
            }
            set
            {
                uploadInProgress_ = value;
            }
        }


        [ASN1Element(Name = "accessControlList", IsOptional = true, HasTag = true, Tag = 6, HasDefaultValue = false)]
        public Identifier AccessControlList
        {
            get
            {
                return accessControlList_;
            }
            set
            {
                accessControlList_ = value;
                accessControlList_present = true;
            }
        }


        public void initWithDefaults()
        {
        }


        public IASN1PreparedElementData PreparedData
        {
            get
            {
                return preparedData;
            }
        }

        public bool isAccessControlListPresent()
        {
            return accessControlList_present;
        }
    }
}