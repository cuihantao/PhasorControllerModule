//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System.Runtime.CompilerServices;
using System.Collections.Generic;
using GSF.ASN1;
using GSF.ASN1.Attributes;
using GSF.ASN1.Coders;
using GSF.ASN1.Types;

namespace GSF.MMS.Model
{
    
    [ASN1PreparedElement]
    [ASN1Sequence(Name = "VMD_File", IsSet = false)]
    public class VMD_File : IASN1PreparedElement
    {
        private static readonly IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(VMD_File));
        private ObjectIdentifier abstractSyntaxes_;
        private ICollection<Access_Control_List_instance> accessControlLists_;
        private Access_Control_List_instance accessControl_;
        private ICollection<MMSString> capabilities_;
        private ICollection<Data_Exchange_instance> dataExchanges_;
        private ICollection<Domain_instance> domains_;
        private ICollection<Event_Action_instance> eventActions_;
        private ICollection<Event_Condition_List_instance> eventConditionLists_;
        private ICollection<Event_Condition_instance> eventConditions_;
        private ICollection<Event_Enrollment_instance> eventEnrollments_;
        private ApplicationReference executiveFunction_;
        private ICollection<Journal_instance> journals_;
        private BitString local_detail_;
        private LogicalStatus logicalStatus_;
        private MMSString modelName_;
        private ICollection<Named_Type_instance> namedTypes_;
        private ICollection<Named_Variable_List_instance> namedVariableLists_;
        private ICollection<Named_Variable_instance> namedVariables_;
        private ICollection<Operator_Station_instance> operatorStations_;
        private PhysicalStatus physicalStatus_;
        private ICollection<Program_Invocation_instance> programInvocations_;
        private MMSString revision_;
        private Selected_Program_InvocationChoiceType selected_Program_Invocation_;
        private ICollection<Semaphore_instance> semaphores_;
        private ICollection<Unit_Control_instance> unitControls_;
        private ICollection<Unnamed_Variable_instance> unnamedVariables_;


        private MMSString vendorName_;

        [ASN1Element(Name = "executiveFunction", IsOptional = false, HasTag = true, Tag = 0, HasDefaultValue = false)]
        public ApplicationReference ExecutiveFunction
        {
            get
            {
                return executiveFunction_;
            }
            set
            {
                executiveFunction_ = value;
            }
        }

        [ASN1Element(Name = "vendorName", IsOptional = false, HasTag = true, Tag = 1, HasDefaultValue = false)]
        public MMSString VendorName
        {
            get
            {
                return vendorName_;
            }
            set
            {
                vendorName_ = value;
            }
        }


        [ASN1Element(Name = "modelName", IsOptional = false, HasTag = true, Tag = 2, HasDefaultValue = false)]
        public MMSString ModelName
        {
            get
            {
                return modelName_;
            }
            set
            {
                modelName_ = value;
            }
        }


        [ASN1Element(Name = "revision", IsOptional = false, HasTag = true, Tag = 3, HasDefaultValue = false)]
        public MMSString Revision
        {
            get
            {
                return revision_;
            }
            set
            {
                revision_ = value;
            }
        }


        [ASN1ObjectIdentifier(Name = "")]
        [ASN1Element(Name = "abstractSyntaxes", IsOptional = false, HasTag = true, Tag = 4, HasDefaultValue = false)]
        public ObjectIdentifier AbstractSyntaxes
        {
            get
            {
                return abstractSyntaxes_;
            }
            set
            {
                abstractSyntaxes_ = value;
            }
        }


        [ASN1Element(Name = "accessControl", IsOptional = false, HasTag = true, Tag = 5, HasDefaultValue = false)]
        public Access_Control_List_instance AccessControl
        {
            get
            {
                return accessControl_;
            }
            set
            {
                accessControl_ = value;
            }
        }


        [ASN1Element(Name = "logicalStatus", IsOptional = false, HasTag = true, Tag = 6, HasDefaultValue = false)]
        public LogicalStatus LogicalStatus
        {
            get
            {
                return logicalStatus_;
            }
            set
            {
                logicalStatus_ = value;
            }
        }


        [ASN1SequenceOf(Name = "capabilities", IsSetOf = false)]
        [ASN1Element(Name = "capabilities", IsOptional = false, HasTag = true, Tag = 7, HasDefaultValue = false)]
        public ICollection<MMSString> Capabilities
        {
            get
            {
                return capabilities_;
            }
            set
            {
                capabilities_ = value;
            }
        }


        [ASN1Element(Name = "physicalStatus", IsOptional = false, HasTag = true, Tag = 8, HasDefaultValue = false)]
        public PhysicalStatus PhysicalStatus
        {
            get
            {
                return physicalStatus_;
            }
            set
            {
                physicalStatus_ = value;
            }
        }


        [ASN1BitString(Name = "")]
        [ASN1Element(Name = "local-detail", IsOptional = false, HasTag = true, Tag = 9, HasDefaultValue = false)]
        public BitString Local_detail
        {
            get
            {
                return local_detail_;
            }
            set
            {
                local_detail_ = value;
            }
        }


        [ASN1SequenceOf(Name = "accessControlLists", IsSetOf = false)]
        [ASN1Element(Name = "accessControlLists", IsOptional = false, HasTag = true, Tag = 10, HasDefaultValue = false)]
        public ICollection<Access_Control_List_instance> AccessControlLists
        {
            get
            {
                return accessControlLists_;
            }
            set
            {
                accessControlLists_ = value;
            }
        }


        [ASN1SequenceOf(Name = "domains", IsSetOf = false)]
        [ASN1Element(Name = "domains", IsOptional = false, HasTag = true, Tag = 11, HasDefaultValue = false)]
        public ICollection<Domain_instance> Domains
        {
            get
            {
                return domains_;
            }
            set
            {
                domains_ = value;
            }
        }


        [ASN1SequenceOf(Name = "programInvocations", IsSetOf = false)]
        [ASN1Element(Name = "programInvocations", IsOptional = false, HasTag = true, Tag = 12, HasDefaultValue = false)]
        public ICollection<Program_Invocation_instance> ProgramInvocations
        {
            get
            {
                return programInvocations_;
            }
            set
            {
                programInvocations_ = value;
            }
        }


        [ASN1SequenceOf(Name = "unitControls", IsSetOf = false)]
        [ASN1Element(Name = "unitControls", IsOptional = false, HasTag = true, Tag = 13, HasDefaultValue = false)]
        public ICollection<Unit_Control_instance> UnitControls
        {
            get
            {
                return unitControls_;
            }
            set
            {
                unitControls_ = value;
            }
        }


        [ASN1SequenceOf(Name = "unnamedVariables", IsSetOf = false)]
        [ASN1Element(Name = "unnamedVariables", IsOptional = false, HasTag = true, Tag = 14, HasDefaultValue = false)]
        public ICollection<Unnamed_Variable_instance> UnnamedVariables
        {
            get
            {
                return unnamedVariables_;
            }
            set
            {
                unnamedVariables_ = value;
            }
        }


        [ASN1SequenceOf(Name = "namedVariables", IsSetOf = false)]
        [ASN1Element(Name = "namedVariables", IsOptional = false, HasTag = true, Tag = 15, HasDefaultValue = false)]
        public ICollection<Named_Variable_instance> NamedVariables
        {
            get
            {
                return namedVariables_;
            }
            set
            {
                namedVariables_ = value;
            }
        }


        [ASN1SequenceOf(Name = "namedVariableLists", IsSetOf = false)]
        [ASN1Element(Name = "namedVariableLists", IsOptional = false, HasTag = true, Tag = 16, HasDefaultValue = false)]
        public ICollection<Named_Variable_List_instance> NamedVariableLists
        {
            get
            {
                return namedVariableLists_;
            }
            set
            {
                namedVariableLists_ = value;
            }
        }


        [ASN1SequenceOf(Name = "namedTypes", IsSetOf = false)]
        [ASN1Element(Name = "namedTypes", IsOptional = false, HasTag = true, Tag = 17, HasDefaultValue = false)]
        public ICollection<Named_Type_instance> NamedTypes
        {
            get
            {
                return namedTypes_;
            }
            set
            {
                namedTypes_ = value;
            }
        }


        [ASN1SequenceOf(Name = "dataExchanges", IsSetOf = false)]
        [ASN1Element(Name = "dataExchanges", IsOptional = false, HasTag = true, Tag = 18, HasDefaultValue = false)]
        public ICollection<Data_Exchange_instance> DataExchanges
        {
            get
            {
                return dataExchanges_;
            }
            set
            {
                dataExchanges_ = value;
            }
        }


        [ASN1SequenceOf(Name = "semaphores", IsSetOf = false)]
        [ASN1Element(Name = "semaphores", IsOptional = false, HasTag = true, Tag = 19, HasDefaultValue = false)]
        public ICollection<Semaphore_instance> Semaphores
        {
            get
            {
                return semaphores_;
            }
            set
            {
                semaphores_ = value;
            }
        }


        [ASN1SequenceOf(Name = "operatorStations", IsSetOf = false)]
        [ASN1Element(Name = "operatorStations", IsOptional = false, HasTag = true, Tag = 20, HasDefaultValue = false)]
        public ICollection<Operator_Station_instance> OperatorStations
        {
            get
            {
                return operatorStations_;
            }
            set
            {
                operatorStations_ = value;
            }
        }


        [ASN1SequenceOf(Name = "eventConditions", IsSetOf = false)]
        [ASN1Element(Name = "eventConditions", IsOptional = false, HasTag = true, Tag = 21, HasDefaultValue = false)]
        public ICollection<Event_Condition_instance> EventConditions
        {
            get
            {
                return eventConditions_;
            }
            set
            {
                eventConditions_ = value;
            }
        }


        [ASN1SequenceOf(Name = "eventActions", IsSetOf = false)]
        [ASN1Element(Name = "eventActions", IsOptional = false, HasTag = true, Tag = 22, HasDefaultValue = false)]
        public ICollection<Event_Action_instance> EventActions
        {
            get
            {
                return eventActions_;
            }
            set
            {
                eventActions_ = value;
            }
        }


        [ASN1SequenceOf(Name = "eventEnrollments", IsSetOf = false)]
        [ASN1Element(Name = "eventEnrollments", IsOptional = false, HasTag = true, Tag = 23, HasDefaultValue = false)]
        public ICollection<Event_Enrollment_instance> EventEnrollments
        {
            get
            {
                return eventEnrollments_;
            }
            set
            {
                eventEnrollments_ = value;
            }
        }


        [ASN1SequenceOf(Name = "eventConditionLists", IsSetOf = false)]
        [ASN1Element(Name = "eventConditionLists", IsOptional = false, HasTag = true, Tag = 24, HasDefaultValue = false)]
        public ICollection<Event_Condition_List_instance> EventConditionLists
        {
            get
            {
                return eventConditionLists_;
            }
            set
            {
                eventConditionLists_ = value;
            }
        }


        [ASN1SequenceOf(Name = "journals", IsSetOf = false)]
        [ASN1Element(Name = "journals", IsOptional = false, HasTag = true, Tag = 25, HasDefaultValue = false)]
        public ICollection<Journal_instance> Journals
        {
            get
            {
                return journals_;
            }
            set
            {
                journals_ = value;
            }
        }


        [ASN1Element(Name = "selected-Program-Invocation", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public Selected_Program_InvocationChoiceType Selected_Program_Invocation
        {
            get
            {
                return selected_Program_Invocation_;
            }
            set
            {
                selected_Program_Invocation_ = value;
            }
        }


        public void initWithDefaults()
        {
        }


        public IASN1PreparedElementData PreparedData
        {
            get
            {
                return preparedData;
            }
        }

        [ASN1PreparedElement]
        [ASN1Choice(Name = "selected-Program-Invocation")]
        public class Selected_Program_InvocationChoiceType : IASN1PreparedElement
        {
            private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(Selected_Program_InvocationChoiceType));
            private NullObject noneSelected_;
            private bool noneSelected_selected;
            private Program_Invocation_instance selectedProgram_;
            private bool selectedProgram_selected;


            [ASN1Element(Name = "selectedProgram", IsOptional = false, HasTag = true, Tag = 26, HasDefaultValue = false)]
            public Program_Invocation_instance SelectedProgram
            {
                get
                {
                    return selectedProgram_;
                }
                set
                {
                    selectSelectedProgram(value);
                }
            }


            [ASN1Null(Name = "noneSelected")]
            [ASN1Element(Name = "noneSelected", IsOptional = false, HasTag = true, Tag = 27, HasDefaultValue = false)]
            public NullObject NoneSelected
            {
                get
                {
                    return noneSelected_;
                }
                set
                {
                    selectNoneSelected(value);
                }
            }

            public void initWithDefaults()
            {
            }

            public IASN1PreparedElementData PreparedData
            {
                get
                {
                    return preparedData;
                }
            }


            public bool isSelectedProgramSelected()
            {
                return selectedProgram_selected;
            }


            public void selectSelectedProgram(Program_Invocation_instance val)
            {
                selectedProgram_ = val;
                selectedProgram_selected = true;


                noneSelected_selected = false;
            }


            public bool isNoneSelectedSelected()
            {
                return noneSelected_selected;
            }


            public void selectNoneSelected()
            {
                selectNoneSelected(new NullObject());
            }


            public void selectNoneSelected(NullObject val)
            {
                noneSelected_ = val;
                noneSelected_selected = true;


                selectedProgram_selected = false;
            }
        }
    }
}