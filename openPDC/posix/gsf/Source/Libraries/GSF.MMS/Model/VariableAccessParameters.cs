//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System.Runtime.CompilerServices;
using GSF.ASN1;
using GSF.ASN1.Attributes;
using GSF.ASN1.Coders;

namespace GSF.MMS.Model
{
    
    [ASN1PreparedElement]
    [ASN1Sequence(Name = "VariableAccessParameters", IsSet = false)]
    public class VariableAccessParameters : IASN1PreparedElement
    {
        private static readonly IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(VariableAccessParameters));
        private bool singleMode_;
        private MMSString uninterruptibleAccess_;
        private bool unnamedMode_;

        [ASN1Element(Name = "uninterruptibleAccess", IsOptional = false, HasTag = true, Tag = 0, HasDefaultValue = false)]
        public MMSString UninterruptibleAccess
        {
            get
            {
                return uninterruptibleAccess_;
            }
            set
            {
                uninterruptibleAccess_ = value;
            }
        }


        [ASN1Boolean(Name = "")]
        [ASN1Element(Name = "singleMode", IsOptional = false, HasTag = true, Tag = 1, HasDefaultValue = false)]
        public bool SingleMode
        {
            get
            {
                return singleMode_;
            }
            set
            {
                singleMode_ = value;
            }
        }


        [ASN1Boolean(Name = "")]
        [ASN1Element(Name = "unnamedMode", IsOptional = false, HasTag = true, Tag = 2, HasDefaultValue = false)]
        public bool UnnamedMode
        {
            get
            {
                return unnamedMode_;
            }
            set
            {
                unnamedMode_ = value;
            }
        }


        public void initWithDefaults()
        {
        }


        public IASN1PreparedElementData PreparedData
        {
            get
            {
                return preparedData;
            }
        }
    }
}