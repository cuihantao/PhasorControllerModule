//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System.Runtime.CompilerServices;
using GSF.ASN1;
using GSF.ASN1.Attributes;
using GSF.ASN1.Coders;

namespace GSF.MMS.Model
{
    
    [ASN1PreparedElement]
    [ASN1Sequence(Name = "StartUnitControl_Request", IsSet = false)]
    public class StartUnitControl_Request : IASN1PreparedElement
    {
        private static readonly IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(StartUnitControl_Request));
        private ExecutionArgumentChoiceType executionArgument_;

        private bool executionArgument_present;
        private Identifier unitControlName_;

        [ASN1Element(Name = "unitControlName", IsOptional = false, HasTag = true, Tag = 0, HasDefaultValue = false)]
        public Identifier UnitControlName
        {
            get
            {
                return unitControlName_;
            }
            set
            {
                unitControlName_ = value;
            }
        }


        [ASN1Element(Name = "executionArgument", IsOptional = true, HasTag = false, HasDefaultValue = false)]
        public ExecutionArgumentChoiceType ExecutionArgument
        {
            get
            {
                return executionArgument_;
            }
            set
            {
                executionArgument_ = value;
                executionArgument_present = true;
            }
        }


        public void initWithDefaults()
        {
        }


        public IASN1PreparedElementData PreparedData
        {
            get
            {
                return preparedData;
            }
        }

        public bool isExecutionArgumentPresent()
        {
            return executionArgument_present;
        }

        [ASN1PreparedElement]
        [ASN1Choice(Name = "executionArgument")]
        public class ExecutionArgumentChoiceType : IASN1PreparedElement
        {
            private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(ExecutionArgumentChoiceType));
            private MMSString simpleString_;
            private bool simpleString_selected;


            [ASN1Element(Name = "simpleString", IsOptional = false, HasTag = true, Tag = 1, HasDefaultValue = false)]
            public MMSString SimpleString
            {
                get
                {
                    return simpleString_;
                }
                set
                {
                    selectSimpleString(value);
                }
            }


            public void initWithDefaults()
            {
            }

            public IASN1PreparedElementData PreparedData
            {
                get
                {
                    return preparedData;
                }
            }

            public bool isSimpleStringSelected()
            {
                return simpleString_selected;
            }


            public void selectSimpleString(MMSString val)
            {
                simpleString_ = val;
                simpleString_selected = true;
            }
        }
    }
}