//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System.Runtime.CompilerServices;
using GSF.ASN1;
using GSF.ASN1.Attributes;
using GSF.ASN1.Coders;

namespace GSF.MMS.Model
{
    
    [ASN1PreparedElement]
    [ASN1Sequence(Name = "DataParameters", IsSet = false)]
    public class DataParameters : IASN1PreparedElement
    {
        private static readonly IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(DataParameters));
        private long bcd_;

        private bool bcd_present;
        private bool binary_time_;

        private bool binary_time_present;
        private long bit_string_;

        private bool bit_string_present;
        private Floating_pointSequenceType floating_point_;

        private bool floating_point_present;


        private long integer_;

        private bool integer_present;
        private long mmsString_;

        private bool mmsString_present;
        private long octet_string_;

        private bool octet_string_present;


        private long unsigned_;

        private bool unsigned_present;
        private long visible_string_;

        private bool visible_string_present;

        [ASN1Integer(Name = "")]
        [ASN1Element(Name = "bit-string", IsOptional = true, HasTag = true, Tag = 0, HasDefaultValue = false)]
        public long Bit_string
        {
            get
            {
                return bit_string_;
            }
            set
            {
                bit_string_ = value;
                bit_string_present = true;
            }
        }

        [ASN1Integer(Name = "")]
        [ASN1Element(Name = "integer", IsOptional = true, HasTag = true, Tag = 1, HasDefaultValue = false)]
        public long Integer
        {
            get
            {
                return integer_;
            }
            set
            {
                integer_ = value;
                integer_present = true;
            }
        }

        [ASN1Integer(Name = "")]
        [ASN1Element(Name = "unsigned", IsOptional = true, HasTag = true, Tag = 2, HasDefaultValue = false)]
        public long Unsigned
        {
            get
            {
                return unsigned_;
            }
            set
            {
                unsigned_ = value;
                unsigned_present = true;
            }
        }


        [ASN1Element(Name = "floating-point", IsOptional = true, HasTag = true, Tag = 3, HasDefaultValue = false)]
        public Floating_pointSequenceType Floating_point
        {
            get
            {
                return floating_point_;
            }
            set
            {
                floating_point_ = value;
                floating_point_present = true;
            }
        }


        [ASN1Integer(Name = "")]
        [ASN1Element(Name = "octet-string", IsOptional = true, HasTag = true, Tag = 10, HasDefaultValue = false)]
        public long Octet_string
        {
            get
            {
                return octet_string_;
            }
            set
            {
                octet_string_ = value;
                octet_string_present = true;
            }
        }


        [ASN1Integer(Name = "")]
        [ASN1Element(Name = "visible-string", IsOptional = true, HasTag = true, Tag = 11, HasDefaultValue = false)]
        public long Visible_string
        {
            get
            {
                return visible_string_;
            }
            set
            {
                visible_string_ = value;
                visible_string_present = true;
            }
        }


        [ASN1Boolean(Name = "")]
        [ASN1Element(Name = "binary-time", IsOptional = true, HasTag = true, Tag = 12, HasDefaultValue = false)]
        public bool Binary_time
        {
            get
            {
                return binary_time_;
            }
            set
            {
                binary_time_ = value;
                binary_time_present = true;
            }
        }


        [ASN1Integer(Name = "")]
        [ASN1Element(Name = "bcd", IsOptional = true, HasTag = true, Tag = 13, HasDefaultValue = false)]
        public long Bcd
        {
            get
            {
                return bcd_;
            }
            set
            {
                bcd_ = value;
                bcd_present = true;
            }
        }


        [ASN1Integer(Name = "")]
        [ASN1Element(Name = "mmsString", IsOptional = true, HasTag = true, Tag = 14, HasDefaultValue = false)]
        public long MmsString
        {
            get
            {
                return mmsString_;
            }
            set
            {
                mmsString_ = value;
                mmsString_present = true;
            }
        }

        public void initWithDefaults()
        {
        }

        public IASN1PreparedElementData PreparedData
        {
            get
            {
                return preparedData;
            }
        }


        public bool isBit_stringPresent()
        {
            return bit_string_present;
        }

        public bool isIntegerPresent()
        {
            return integer_present;
        }

        public bool isUnsignedPresent()
        {
            return unsigned_present;
        }

        public bool isFloating_pointPresent()
        {
            return floating_point_present;
        }

        public bool isOctet_stringPresent()
        {
            return octet_string_present;
        }

        public bool isVisible_stringPresent()
        {
            return visible_string_present;
        }

        public bool isBinary_timePresent()
        {
            return binary_time_present;
        }

        public bool isBcdPresent()
        {
            return bcd_present;
        }

        public bool isMmsStringPresent()
        {
            return mmsString_present;
        }

        [ASN1PreparedElement]
        [ASN1Sequence(Name = "floating-point", IsSet = false)]
        public class Floating_pointSequenceType : IASN1PreparedElement
        {
            private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(Floating_pointSequenceType));
            private long exponent_;
            private long total_;

            [ASN1Integer(Name = "")]
            [ASN1Element(Name = "total", IsOptional = false, HasTag = true, Tag = 4, HasDefaultValue = false)]
            public long Total
            {
                get
                {
                    return total_;
                }
                set
                {
                    total_ = value;
                }
            }


            [ASN1Integer(Name = "")]
            [ASN1Element(Name = "exponent", IsOptional = false, HasTag = true, Tag = 5, HasDefaultValue = false)]
            public long Exponent
            {
                get
                {
                    return exponent_;
                }
                set
                {
                    exponent_ = value;
                }
            }


            public void initWithDefaults()
            {
            }

            public IASN1PreparedElementData PreparedData
            {
                get
                {
                    return preparedData;
                }
            }
        }
    }
}