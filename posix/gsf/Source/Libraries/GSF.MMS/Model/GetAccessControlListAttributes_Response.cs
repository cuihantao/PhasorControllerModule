//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System.Runtime.CompilerServices;
using System.Collections.Generic;
using GSF.ASN1;
using GSF.ASN1.Attributes;
using GSF.ASN1.Coders;

namespace GSF.MMS.Model
{
    
    [ASN1PreparedElement]
    [ASN1Sequence(Name = "GetAccessControlListAttributes_Response", IsSet = false)]
    public class GetAccessControlListAttributes_Response : IASN1PreparedElement
    {
        private static readonly IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(GetAccessControlListAttributes_Response));
        private AccessControlListElementsSequenceType accessControlListElements_;
        private Identifier accessControlList_;

        private bool accessControlList_present;
        private Identifier name_;
        private ICollection<ReferencesSequenceType> references_;
        private bool vMDuse_;

        [ASN1Element(Name = "name", IsOptional = false, HasTag = true, Tag = 0, HasDefaultValue = false)]
        public Identifier Name
        {
            get
            {
                return name_;
            }
            set
            {
                name_ = value;
            }
        }


        [ASN1Element(Name = "accessControlListElements", IsOptional = false, HasTag = true, Tag = 1, HasDefaultValue = false)]
        public AccessControlListElementsSequenceType AccessControlListElements
        {
            get
            {
                return accessControlListElements_;
            }
            set
            {
                accessControlListElements_ = value;
            }
        }


        [ASN1Boolean(Name = "")]
        [ASN1Element(Name = "vMDuse", IsOptional = false, HasTag = true, Tag = 2, HasDefaultValue = false)]
        public bool VMDuse
        {
            get
            {
                return vMDuse_;
            }
            set
            {
                vMDuse_ = value;
            }
        }


        [ASN1SequenceOf(Name = "references", IsSetOf = false)]
        [ASN1Element(Name = "references", IsOptional = false, HasTag = true, Tag = 3, HasDefaultValue = false)]
        public ICollection<ReferencesSequenceType> References
        {
            get
            {
                return references_;
            }
            set
            {
                references_ = value;
            }
        }


        [ASN1Element(Name = "accessControlList", IsOptional = true, HasTag = true, Tag = 4, HasDefaultValue = false)]
        public Identifier AccessControlList
        {
            get
            {
                return accessControlList_;
            }
            set
            {
                accessControlList_ = value;
                accessControlList_present = true;
            }
        }


        public void initWithDefaults()
        {
        }


        public IASN1PreparedElementData PreparedData
        {
            get
            {
                return preparedData;
            }
        }

        public bool isAccessControlListPresent()
        {
            return accessControlList_present;
        }

        [ASN1PreparedElement]
        [ASN1Sequence(Name = "accessControlListElements", IsSet = false)]
        public class AccessControlListElementsSequenceType : IASN1PreparedElement
        {
            private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(AccessControlListElementsSequenceType));
            private AccessCondition deleteAccessCondition_;

            private bool deleteAccessCondition_present;
            private AccessCondition editAccessCondition_;

            private bool editAccessCondition_present;
            private AccessCondition executeAccessCondition_;

            private bool executeAccessCondition_present;
            private AccessCondition loadAccessCondition_;

            private bool loadAccessCondition_present;
            private AccessCondition readAccessCondition_;

            private bool readAccessCondition_present;


            private AccessCondition storeAccessCondition_;

            private bool storeAccessCondition_present;


            private AccessCondition writeAccessCondition_;

            private bool writeAccessCondition_present;

            [ASN1Element(Name = "readAccessCondition", IsOptional = true, HasTag = true, Tag = 0, HasDefaultValue = false)]
            public AccessCondition ReadAccessCondition
            {
                get
                {
                    return readAccessCondition_;
                }
                set
                {
                    readAccessCondition_ = value;
                    readAccessCondition_present = true;
                }
            }

            [ASN1Element(Name = "storeAccessCondition", IsOptional = true, HasTag = true, Tag = 1, HasDefaultValue = false)]
            public AccessCondition StoreAccessCondition
            {
                get
                {
                    return storeAccessCondition_;
                }
                set
                {
                    storeAccessCondition_ = value;
                    storeAccessCondition_present = true;
                }
            }

            [ASN1Element(Name = "writeAccessCondition", IsOptional = true, HasTag = true, Tag = 2, HasDefaultValue = false)]
            public AccessCondition WriteAccessCondition
            {
                get
                {
                    return writeAccessCondition_;
                }
                set
                {
                    writeAccessCondition_ = value;
                    writeAccessCondition_present = true;
                }
            }


            [ASN1Element(Name = "loadAccessCondition", IsOptional = true, HasTag = true, Tag = 3, HasDefaultValue = false)]
            public AccessCondition LoadAccessCondition
            {
                get
                {
                    return loadAccessCondition_;
                }
                set
                {
                    loadAccessCondition_ = value;
                    loadAccessCondition_present = true;
                }
            }


            [ASN1Element(Name = "executeAccessCondition", IsOptional = true, HasTag = true, Tag = 4, HasDefaultValue = false)]
            public AccessCondition ExecuteAccessCondition
            {
                get
                {
                    return executeAccessCondition_;
                }
                set
                {
                    executeAccessCondition_ = value;
                    executeAccessCondition_present = true;
                }
            }


            [ASN1Element(Name = "deleteAccessCondition", IsOptional = true, HasTag = true, Tag = 5, HasDefaultValue = false)]
            public AccessCondition DeleteAccessCondition
            {
                get
                {
                    return deleteAccessCondition_;
                }
                set
                {
                    deleteAccessCondition_ = value;
                    deleteAccessCondition_present = true;
                }
            }


            [ASN1Element(Name = "editAccessCondition", IsOptional = true, HasTag = true, Tag = 6, HasDefaultValue = false)]
            public AccessCondition EditAccessCondition
            {
                get
                {
                    return editAccessCondition_;
                }
                set
                {
                    editAccessCondition_ = value;
                    editAccessCondition_present = true;
                }
            }

            public void initWithDefaults()
            {
            }

            public IASN1PreparedElementData PreparedData
            {
                get
                {
                    return preparedData;
                }
            }


            public bool isReadAccessConditionPresent()
            {
                return readAccessCondition_present;
            }

            public bool isStoreAccessConditionPresent()
            {
                return storeAccessCondition_present;
            }

            public bool isWriteAccessConditionPresent()
            {
                return writeAccessCondition_present;
            }

            public bool isLoadAccessConditionPresent()
            {
                return loadAccessCondition_present;
            }

            public bool isExecuteAccessConditionPresent()
            {
                return executeAccessCondition_present;
            }

            public bool isDeleteAccessConditionPresent()
            {
                return deleteAccessCondition_present;
            }

            public bool isEditAccessConditionPresent()
            {
                return editAccessCondition_present;
            }
        }

        [ASN1PreparedElement]
        [ASN1Sequence(Name = "references", IsSet = false)]
        public class ReferencesSequenceType : IASN1PreparedElement
        {
            private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(ReferencesSequenceType));
            private ObjectClass objectClass_;


            private long objectCount_;

            [ASN1Element(Name = "objectClass", IsOptional = false, HasTag = true, Tag = 0, HasDefaultValue = false)]
            public ObjectClass ObjectClass
            {
                get
                {
                    return objectClass_;
                }
                set
                {
                    objectClass_ = value;
                }
            }

            [ASN1Integer(Name = "")]
            [ASN1Element(Name = "objectCount", IsOptional = false, HasTag = true, Tag = 1, HasDefaultValue = false)]
            public long ObjectCount
            {
                get
                {
                    return objectCount_;
                }
                set
                {
                    objectCount_ = value;
                }
            }


            public void initWithDefaults()
            {
            }

            public IASN1PreparedElementData PreparedData
            {
                get
                {
                    return preparedData;
                }
            }
        }
    }
}