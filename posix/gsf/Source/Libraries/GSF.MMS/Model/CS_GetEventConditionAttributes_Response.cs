//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System.Runtime.CompilerServices;
using System.Collections.Generic;
using GSF.ASN1;
using GSF.ASN1.Attributes;
using GSF.ASN1.Coders;
using GSF.ASN1.Types;

namespace GSF.MMS.Model
{
    
    [ASN1PreparedElement]
    [ASN1Sequence(Name = "CS_GetEventConditionAttributes_Response", IsSet = false)]
    public class CS_GetEventConditionAttributes_Response : IASN1PreparedElement
    {
        private static readonly IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(CS_GetEventConditionAttributes_Response));
        private DisplayEnhancementChoiceType displayEnhancement_;
        private GroupPriorityOverrideChoiceType groupPriorityOverride_;

        private bool groupPriorityOverride_present;


        private ICollection<ObjectName> listOfReferencingECL_;

        private bool listOfReferencingECL_present;

        [ASN1Element(Name = "groupPriorityOverride", IsOptional = true, HasTag = true, Tag = 0, HasDefaultValue = false)]
        public GroupPriorityOverrideChoiceType GroupPriorityOverride
        {
            get
            {
                return groupPriorityOverride_;
            }
            set
            {
                groupPriorityOverride_ = value;
                groupPriorityOverride_present = true;
            }
        }

        [ASN1SequenceOf(Name = "listOfReferencingECL", IsSetOf = false)]
        [ASN1Element(Name = "listOfReferencingECL", IsOptional = true, HasTag = true, Tag = 1, HasDefaultValue = false)]
        public ICollection<ObjectName> ListOfReferencingECL
        {
            get
            {
                return listOfReferencingECL_;
            }
            set
            {
                listOfReferencingECL_ = value;
                listOfReferencingECL_present = true;
            }
        }


        [ASN1Element(Name = "displayEnhancement", IsOptional = false, HasTag = true, Tag = 2, HasDefaultValue = false)]
        public DisplayEnhancementChoiceType DisplayEnhancement
        {
            get
            {
                return displayEnhancement_;
            }
            set
            {
                displayEnhancement_ = value;
            }
        }


        public void initWithDefaults()
        {
        }


        public IASN1PreparedElementData PreparedData
        {
            get
            {
                return preparedData;
            }
        }

        public bool isGroupPriorityOverridePresent()
        {
            return groupPriorityOverride_present;
        }

        public bool isListOfReferencingECLPresent()
        {
            return listOfReferencingECL_present;
        }

        [ASN1PreparedElement]
        [ASN1Choice(Name = "displayEnhancement")]
        public class DisplayEnhancementChoiceType : IASN1PreparedElement
        {
            private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(DisplayEnhancementChoiceType));
            private long index_;
            private bool index_selected;


            private NullObject noEnhancement_;
            private bool noEnhancement_selected;
            private string string_;
            private bool string_selected;


            [ASN1String(Name = "",
                StringType = UniversalTags.VisibleString, IsUCS = false)]
            [ASN1Element(Name = "string", IsOptional = false, HasTag = true, Tag = 0, HasDefaultValue = false)]
            public string String
            {
                get
                {
                    return string_;
                }
                set
                {
                    selectString(value);
                }
            }

            [ASN1Integer(Name = "")]
            [ASN1Element(Name = "index", IsOptional = false, HasTag = true, Tag = 1, HasDefaultValue = false)]
            public long Index
            {
                get
                {
                    return index_;
                }
                set
                {
                    selectIndex(value);
                }
            }


            [ASN1Null(Name = "noEnhancement")]
            [ASN1Element(Name = "noEnhancement", IsOptional = false, HasTag = true, Tag = 2, HasDefaultValue = false)]
            public NullObject NoEnhancement
            {
                get
                {
                    return noEnhancement_;
                }
                set
                {
                    selectNoEnhancement(value);
                }
            }

            public void initWithDefaults()
            {
            }

            public IASN1PreparedElementData PreparedData
            {
                get
                {
                    return preparedData;
                }
            }


            public bool isStringSelected()
            {
                return string_selected;
            }


            public void selectString(string val)
            {
                string_ = val;
                string_selected = true;


                index_selected = false;

                noEnhancement_selected = false;
            }


            public bool isIndexSelected()
            {
                return index_selected;
            }


            public void selectIndex(long val)
            {
                index_ = val;
                index_selected = true;


                string_selected = false;

                noEnhancement_selected = false;
            }


            public bool isNoEnhancementSelected()
            {
                return noEnhancement_selected;
            }


            public void selectNoEnhancement()
            {
                selectNoEnhancement(new NullObject());
            }


            public void selectNoEnhancement(NullObject val)
            {
                noEnhancement_ = val;
                noEnhancement_selected = true;


                string_selected = false;

                index_selected = false;
            }
        }

        [ASN1PreparedElement]
        [ASN1Choice(Name = "groupPriorityOverride")]
        public class GroupPriorityOverrideChoiceType : IASN1PreparedElement
        {
            private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(GroupPriorityOverrideChoiceType));
            private Priority priority_;
            private bool priority_selected;


            private NullObject undefined_;
            private bool undefined_selected;

            [ASN1Element(Name = "priority", IsOptional = false, HasTag = true, Tag = 0, HasDefaultValue = false)]
            public Priority Priority
            {
                get
                {
                    return priority_;
                }
                set
                {
                    selectPriority(value);
                }
            }


            [ASN1Null(Name = "undefined")]
            [ASN1Element(Name = "undefined", IsOptional = false, HasTag = true, Tag = 1, HasDefaultValue = false)]
            public NullObject Undefined
            {
                get
                {
                    return undefined_;
                }
                set
                {
                    selectUndefined(value);
                }
            }

            public void initWithDefaults()
            {
            }

            public IASN1PreparedElementData PreparedData
            {
                get
                {
                    return preparedData;
                }
            }


            public bool isPrioritySelected()
            {
                return priority_selected;
            }


            public void selectPriority(Priority val)
            {
                priority_ = val;
                priority_selected = true;


                undefined_selected = false;
            }


            public bool isUndefinedSelected()
            {
                return undefined_selected;
            }


            public void selectUndefined()
            {
                selectUndefined(new NullObject());
            }


            public void selectUndefined(NullObject val)
            {
                undefined_ = val;
                undefined_selected = true;


                priority_selected = false;
            }
        }
    }
}