//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System.Runtime.CompilerServices;
using System.Collections.Generic;
using GSF.ASN1;
using GSF.ASN1.Attributes;
using GSF.ASN1.Coders;

namespace GSF.MMS.Model
{
    
    [ASN1PreparedElement]
    [ASN1BoxedType(Name = "AlternateAccess")]
    public class AlternateAccess : IASN1PreparedElement
    {
        private static readonly IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(AlternateAccess));
        private ICollection<AlternateAccessChoiceType> val;


        [ASN1SequenceOf(Name = "AlternateAccess", IsSetOf = false)]
        public ICollection<AlternateAccessChoiceType> Value
        {
            get
            {
                return val;
            }
            set
            {
                val = value;
            }
        }

        public void initWithDefaults()
        {
        }


        public IASN1PreparedElementData PreparedData
        {
            get
            {
                return preparedData;
            }
        }

        public void initValue()
        {
            Value = new List<AlternateAccessChoiceType>();
        }

        public void Add(AlternateAccessChoiceType item)
        {
            Value.Add(item);
        }

        [ASN1PreparedElement]
        [ASN1Choice(Name = "AlternateAccess")]
        public class AlternateAccessChoiceType : IASN1PreparedElement
        {
            private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(AlternateAccessChoiceType));
            private NamedSequenceType named_;
            private bool named_selected;
            private AlternateAccessSelection unnamed_;
            private bool unnamed_selected;


            [ASN1Element(Name = "unnamed", IsOptional = false, HasTag = false, HasDefaultValue = false)]
            public AlternateAccessSelection Unnamed
            {
                get
                {
                    return unnamed_;
                }
                set
                {
                    selectUnnamed(value);
                }
            }


            [ASN1Element(Name = "named", IsOptional = false, HasTag = true, Tag = 5, HasDefaultValue = false)]
            public NamedSequenceType Named
            {
                get
                {
                    return named_;
                }
                set
                {
                    selectNamed(value);
                }
            }

            public void initWithDefaults()
            {
            }

            public IASN1PreparedElementData PreparedData
            {
                get
                {
                    return preparedData;
                }
            }


            public bool isUnnamedSelected()
            {
                return unnamed_selected;
            }


            public void selectUnnamed(AlternateAccessSelection val)
            {
                unnamed_ = val;
                unnamed_selected = true;


                named_selected = false;
            }


            public bool isNamedSelected()
            {
                return named_selected;
            }


            public void selectNamed(NamedSequenceType val)
            {
                named_ = val;
                named_selected = true;


                unnamed_selected = false;
            }

            [ASN1PreparedElement]
            [ASN1Sequence(Name = "named", IsSet = false)]
            public class NamedSequenceType : IASN1PreparedElement
            {
                private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(NamedSequenceType));
                private AlternateAccessSelection access_;
                private Identifier componentName_;

                [ASN1Element(Name = "componentName", IsOptional = false, HasTag = true, Tag = 0, HasDefaultValue = false)]
                public Identifier ComponentName
                {
                    get
                    {
                        return componentName_;
                    }
                    set
                    {
                        componentName_ = value;
                    }
                }


                [ASN1Element(Name = "access", IsOptional = false, HasTag = false, HasDefaultValue = false)]
                public AlternateAccessSelection Access
                {
                    get
                    {
                        return access_;
                    }
                    set
                    {
                        access_ = value;
                    }
                }


                public void initWithDefaults()
                {
                }

                public IASN1PreparedElementData PreparedData
                {
                    get
                    {
                        return preparedData;
                    }
                }
            }
        }
    }
}