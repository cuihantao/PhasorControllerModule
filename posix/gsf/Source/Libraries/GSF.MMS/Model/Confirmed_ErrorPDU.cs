//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System.Runtime.CompilerServices;
using GSF.ASN1;
using GSF.ASN1.Attributes;
using GSF.ASN1.Coders;

namespace GSF.MMS.Model
{
    
    [ASN1PreparedElement]
    [ASN1Sequence(Name = "Confirmed_ErrorPDU", IsSet = false)]
    public class Confirmed_ErrorPDU : IASN1PreparedElement
    {
        private static readonly IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(Confirmed_ErrorPDU));
        private Unsigned32 invokeID_;


        private Unsigned32 modifierPosition_;

        private bool modifierPosition_present;


        private ServiceError serviceError_;

        [ASN1Element(Name = "invokeID", IsOptional = false, HasTag = true, Tag = 0, HasDefaultValue = false)]
        public Unsigned32 InvokeID
        {
            get
            {
                return invokeID_;
            }
            set
            {
                invokeID_ = value;
            }
        }

        [ASN1Element(Name = "modifierPosition", IsOptional = true, HasTag = true, Tag = 1, HasDefaultValue = false)]
        public Unsigned32 ModifierPosition
        {
            get
            {
                return modifierPosition_;
            }
            set
            {
                modifierPosition_ = value;
                modifierPosition_present = true;
            }
        }

        [ASN1Element(Name = "serviceError", IsOptional = false, HasTag = true, Tag = 2, HasDefaultValue = false)]
        public ServiceError ServiceError
        {
            get
            {
                return serviceError_;
            }
            set
            {
                serviceError_ = value;
            }
        }


        public void initWithDefaults()
        {
        }


        public IASN1PreparedElementData PreparedData
        {
            get
            {
                return preparedData;
            }
        }

        public bool isModifierPositionPresent()
        {
            return modifierPosition_present;
        }
    }
}