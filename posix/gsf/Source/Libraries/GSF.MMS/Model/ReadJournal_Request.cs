//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System.Runtime.CompilerServices;
using System.Collections.Generic;
using GSF.ASN1;
using GSF.ASN1.Attributes;
using GSF.ASN1.Coders;

namespace GSF.MMS.Model
{
    
    [ASN1PreparedElement]
    [ASN1Sequence(Name = "ReadJournal_Request", IsSet = false)]
    public class ReadJournal_Request : IASN1PreparedElement
    {
        private static readonly IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(ReadJournal_Request));
        private EntryToStartAfterSequenceType entryToStartAfter_;

        private bool entryToStartAfter_present;
        private ObjectName journalName_;
        private ICollection<string> listOfVariables_;

        private bool listOfVariables_present;


        private RangeStartSpecificationChoiceType rangeStartSpecification_;

        private bool rangeStartSpecification_present;


        private RangeStopSpecificationChoiceType rangeStopSpecification_;

        private bool rangeStopSpecification_present;

        [ASN1Element(Name = "journalName", IsOptional = false, HasTag = true, Tag = 0, HasDefaultValue = false)]
        public ObjectName JournalName
        {
            get
            {
                return journalName_;
            }
            set
            {
                journalName_ = value;
            }
        }

        [ASN1Element(Name = "rangeStartSpecification", IsOptional = true, HasTag = true, Tag = 1, HasDefaultValue = false)]
        public RangeStartSpecificationChoiceType RangeStartSpecification
        {
            get
            {
                return rangeStartSpecification_;
            }
            set
            {
                rangeStartSpecification_ = value;
                rangeStartSpecification_present = true;
            }
        }


        [ASN1Element(Name = "rangeStopSpecification", IsOptional = true, HasTag = true, Tag = 2, HasDefaultValue = false)]
        public RangeStopSpecificationChoiceType RangeStopSpecification
        {
            get
            {
                return rangeStopSpecification_;
            }
            set
            {
                rangeStopSpecification_ = value;
                rangeStopSpecification_present = true;
            }
        }


        [ASN1String(Name = "",
            StringType = UniversalTags.VisibleString, IsUCS = false)]
        [ASN1SequenceOf(Name = "listOfVariables", IsSetOf = false)]
        [ASN1Element(Name = "listOfVariables", IsOptional = true, HasTag = true, Tag = 4, HasDefaultValue = false)]
        public ICollection<string> ListOfVariables
        {
            get
            {
                return listOfVariables_;
            }
            set
            {
                listOfVariables_ = value;
                listOfVariables_present = true;
            }
        }


        [ASN1Element(Name = "entryToStartAfter", IsOptional = true, HasTag = true, Tag = 5, HasDefaultValue = false)]
        public EntryToStartAfterSequenceType EntryToStartAfter
        {
            get
            {
                return entryToStartAfter_;
            }
            set
            {
                entryToStartAfter_ = value;
                entryToStartAfter_present = true;
            }
        }

        public void initWithDefaults()
        {
        }

        public IASN1PreparedElementData PreparedData
        {
            get
            {
                return preparedData;
            }
        }


        public bool isRangeStartSpecificationPresent()
        {
            return rangeStartSpecification_present;
        }

        public bool isRangeStopSpecificationPresent()
        {
            return rangeStopSpecification_present;
        }

        public bool isListOfVariablesPresent()
        {
            return listOfVariables_present;
        }

        public bool isEntryToStartAfterPresent()
        {
            return entryToStartAfter_present;
        }

        [ASN1PreparedElement]
        [ASN1Sequence(Name = "entryToStartAfter", IsSet = false)]
        public class EntryToStartAfterSequenceType : IASN1PreparedElement
        {
            private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(EntryToStartAfterSequenceType));
            private byte[] entrySpecification_;
            private TimeOfDay timeSpecification_;

            [ASN1Element(Name = "timeSpecification", IsOptional = false, HasTag = true, Tag = 0, HasDefaultValue = false)]
            public TimeOfDay TimeSpecification
            {
                get
                {
                    return timeSpecification_;
                }
                set
                {
                    timeSpecification_ = value;
                }
            }


            [ASN1OctetString(Name = "")]
            [ASN1Element(Name = "entrySpecification", IsOptional = false, HasTag = true, Tag = 1, HasDefaultValue = false)]
            public byte[] EntrySpecification
            {
                get
                {
                    return entrySpecification_;
                }
                set
                {
                    entrySpecification_ = value;
                }
            }


            public void initWithDefaults()
            {
            }

            public IASN1PreparedElementData PreparedData
            {
                get
                {
                    return preparedData;
                }
            }
        }

        [ASN1PreparedElement]
        [ASN1Choice(Name = "rangeStartSpecification")]
        public class RangeStartSpecificationChoiceType : IASN1PreparedElement
        {
            private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(RangeStartSpecificationChoiceType));
            private byte[] startingEntry_;
            private bool startingEntry_selected;
            private TimeOfDay startingTime_;
            private bool startingTime_selected;


            [ASN1Element(Name = "startingTime", IsOptional = false, HasTag = true, Tag = 0, HasDefaultValue = false)]
            public TimeOfDay StartingTime
            {
                get
                {
                    return startingTime_;
                }
                set
                {
                    selectStartingTime(value);
                }
            }


            [ASN1OctetString(Name = "")]
            [ASN1Element(Name = "startingEntry", IsOptional = false, HasTag = true, Tag = 1, HasDefaultValue = false)]
            public byte[] StartingEntry
            {
                get
                {
                    return startingEntry_;
                }
                set
                {
                    selectStartingEntry(value);
                }
            }

            public void initWithDefaults()
            {
            }

            public IASN1PreparedElementData PreparedData
            {
                get
                {
                    return preparedData;
                }
            }


            public bool isStartingTimeSelected()
            {
                return startingTime_selected;
            }


            public void selectStartingTime(TimeOfDay val)
            {
                startingTime_ = val;
                startingTime_selected = true;


                startingEntry_selected = false;
            }


            public bool isStartingEntrySelected()
            {
                return startingEntry_selected;
            }


            public void selectStartingEntry(byte[] val)
            {
                startingEntry_ = val;
                startingEntry_selected = true;


                startingTime_selected = false;
            }
        }

        [ASN1PreparedElement]
        [ASN1Choice(Name = "rangeStopSpecification")]
        public class RangeStopSpecificationChoiceType : IASN1PreparedElement
        {
            private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(RangeStopSpecificationChoiceType));
            private TimeOfDay endingTime_;
            private bool endingTime_selected;


            private Integer32 numberOfEntries_;
            private bool numberOfEntries_selected;

            [ASN1Element(Name = "endingTime", IsOptional = false, HasTag = true, Tag = 0, HasDefaultValue = false)]
            public TimeOfDay EndingTime
            {
                get
                {
                    return endingTime_;
                }
                set
                {
                    selectEndingTime(value);
                }
            }


            [ASN1Element(Name = "numberOfEntries", IsOptional = false, HasTag = true, Tag = 1, HasDefaultValue = false)]
            public Integer32 NumberOfEntries
            {
                get
                {
                    return numberOfEntries_;
                }
                set
                {
                    selectNumberOfEntries(value);
                }
            }

            public void initWithDefaults()
            {
            }

            public IASN1PreparedElementData PreparedData
            {
                get
                {
                    return preparedData;
                }
            }


            public bool isEndingTimeSelected()
            {
                return endingTime_selected;
            }


            public void selectEndingTime(TimeOfDay val)
            {
                endingTime_ = val;
                endingTime_selected = true;


                numberOfEntries_selected = false;
            }


            public bool isNumberOfEntriesSelected()
            {
                return numberOfEntries_selected;
            }


            public void selectNumberOfEntries(Integer32 val)
            {
                numberOfEntries_ = val;
                numberOfEntries_selected = true;


                endingTime_selected = false;
            }
        }
    }
}