//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System.Runtime.CompilerServices;
using System.Collections.Generic;
using GSF.ASN1;
using GSF.ASN1.Attributes;
using GSF.ASN1.Coders;
using GSF.ASN1.Types;

namespace GSF.MMS.Model
{
    
    [ASN1PreparedElement]
    [ASN1Sequence(Name = "Program_Invocation_instance", IsSet = false)]
    public class Program_Invocation_instance : IASN1PreparedElement
    {
        private static readonly IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(Program_Invocation_instance));
        private DefinitionChoiceType definition_;
        private Identifier name_;

        [ASN1Element(Name = "name", IsOptional = false, HasTag = true, Tag = 0, HasDefaultValue = false)]
        public Identifier Name
        {
            get
            {
                return name_;
            }
            set
            {
                name_ = value;
            }
        }


        [ASN1Element(Name = "definition", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public DefinitionChoiceType Definition
        {
            get
            {
                return definition_;
            }
            set
            {
                definition_ = value;
            }
        }


        public void initWithDefaults()
        {
        }


        public IASN1PreparedElementData PreparedData
        {
            get
            {
                return preparedData;
            }
        }

        [ASN1PreparedElement]
        [ASN1Choice(Name = "definition")]
        public class DefinitionChoiceType : IASN1PreparedElement
        {
            private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(DefinitionChoiceType));
            private DetailsSequenceType details_;
            private bool details_selected;
            private ObjectIdentifier reference_;
            private bool reference_selected;


            [ASN1ObjectIdentifier(Name = "")]
            [ASN1Element(Name = "reference", IsOptional = false, HasTag = true, Tag = 1, HasDefaultValue = false)]
            public ObjectIdentifier Reference
            {
                get
                {
                    return reference_;
                }
                set
                {
                    selectReference(value);
                }
            }


            [ASN1Element(Name = "details", IsOptional = false, HasTag = true, Tag = 2, HasDefaultValue = false)]
            public DetailsSequenceType Details
            {
                get
                {
                    return details_;
                }
                set
                {
                    selectDetails(value);
                }
            }

            public void initWithDefaults()
            {
            }

            public IASN1PreparedElementData PreparedData
            {
                get
                {
                    return preparedData;
                }
            }


            public bool isReferenceSelected()
            {
                return reference_selected;
            }


            public void selectReference(ObjectIdentifier val)
            {
                reference_ = val;
                reference_selected = true;


                details_selected = false;
            }


            public bool isDetailsSelected()
            {
                return details_selected;
            }


            public void selectDetails(DetailsSequenceType val)
            {
                details_ = val;
                details_selected = true;


                reference_selected = false;
            }

            [ASN1PreparedElement]
            [ASN1Sequence(Name = "details", IsSet = false)]
            public class DetailsSequenceType : IASN1PreparedElement
            {
                private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(DetailsSequenceType));
                private ICollection<Access_Control_List_instance> accessControl_;
                private Control_State control_;
                private ICollection<Program_Invocation_instance> controlled_Program_Invocations_;

                private bool controlled_Program_Invocations_present;
                private Program_Invocation_instance controlling_Program_Invocation_;
                private ICollection<Domain_instance> domains_;
                private ICollection<Event_Action_instance> eventAction_;

                private bool eventAction_present;
                private ICollection<Event_Condition_instance> eventCondition_;

                private bool eventCondition_present;
                private ICollection<Event_Enrollment_instance> eventEnrollment_;

                private bool eventEnrollment_present;
                private MMSString executionArgument_;
                private bool monitor_;
                private ProgramInvocationState programInvocationState_;
                private bool reusable_;

                [ASN1Element(Name = "programInvocationState", IsOptional = false, HasTag = true, Tag = 3, HasDefaultValue = false)]
                public ProgramInvocationState ProgramInvocationState
                {
                    get
                    {
                        return programInvocationState_;
                    }
                    set
                    {
                        programInvocationState_ = value;
                    }
                }


                [ASN1SequenceOf(Name = "domains", IsSetOf = false)]
                [ASN1Element(Name = "domains", IsOptional = false, HasTag = true, Tag = 4, HasDefaultValue = false)]
                public ICollection<Domain_instance> Domains
                {
                    get
                    {
                        return domains_;
                    }
                    set
                    {
                        domains_ = value;
                    }
                }


                [ASN1SequenceOf(Name = "accessControl", IsSetOf = false)]
                [ASN1Element(Name = "accessControl", IsOptional = false, HasTag = true, Tag = 5, HasDefaultValue = false)]
                public ICollection<Access_Control_List_instance> AccessControl
                {
                    get
                    {
                        return accessControl_;
                    }
                    set
                    {
                        accessControl_ = value;
                    }
                }


                [ASN1Boolean(Name = "")]
                [ASN1Element(Name = "reusable", IsOptional = false, HasTag = true, Tag = 6, HasDefaultValue = false)]
                public bool Reusable
                {
                    get
                    {
                        return reusable_;
                    }
                    set
                    {
                        reusable_ = value;
                    }
                }


                [ASN1Boolean(Name = "")]
                [ASN1Element(Name = "monitor", IsOptional = false, HasTag = true, Tag = 7, HasDefaultValue = false)]
                public bool Monitor
                {
                    get
                    {
                        return monitor_;
                    }
                    set
                    {
                        monitor_ = value;
                    }
                }


                [ASN1SequenceOf(Name = "eventCondition", IsSetOf = false)]
                [ASN1Element(Name = "eventCondition", IsOptional = true, HasTag = true, Tag = 8, HasDefaultValue = false)]
                public ICollection<Event_Condition_instance> EventCondition
                {
                    get
                    {
                        return eventCondition_;
                    }
                    set
                    {
                        eventCondition_ = value;
                        eventCondition_present = true;
                    }
                }


                [ASN1SequenceOf(Name = "eventAction", IsSetOf = false)]
                [ASN1Element(Name = "eventAction", IsOptional = true, HasTag = true, Tag = 9, HasDefaultValue = false)]
                public ICollection<Event_Action_instance> EventAction
                {
                    get
                    {
                        return eventAction_;
                    }
                    set
                    {
                        eventAction_ = value;
                        eventAction_present = true;
                    }
                }


                [ASN1SequenceOf(Name = "eventEnrollment", IsSetOf = false)]
                [ASN1Element(Name = "eventEnrollment", IsOptional = true, HasTag = true, Tag = 10, HasDefaultValue = false)]
                public ICollection<Event_Enrollment_instance> EventEnrollment
                {
                    get
                    {
                        return eventEnrollment_;
                    }
                    set
                    {
                        eventEnrollment_ = value;
                        eventEnrollment_present = true;
                    }
                }


                [ASN1Element(Name = "executionArgument", IsOptional = false, HasTag = true, Tag = 11, HasDefaultValue = false)]
                public MMSString ExecutionArgument
                {
                    get
                    {
                        return executionArgument_;
                    }
                    set
                    {
                        executionArgument_ = value;
                    }
                }


                [ASN1Element(Name = "control", IsOptional = false, HasTag = true, Tag = 12, HasDefaultValue = false)]
                public Control_State Control
                {
                    get
                    {
                        return control_;
                    }
                    set
                    {
                        control_ = value;
                    }
                }


                [ASN1Element(Name = "controlling-Program-Invocation", IsOptional = false, HasTag = true, Tag = 13, HasDefaultValue = false)]
                public Program_Invocation_instance Controlling_Program_Invocation
                {
                    get
                    {
                        return controlling_Program_Invocation_;
                    }
                    set
                    {
                        controlling_Program_Invocation_ = value;
                    }
                }


                [ASN1SequenceOf(Name = "controlled-Program-Invocations", IsSetOf = false)]
                [ASN1Element(Name = "controlled-Program-Invocations", IsOptional = true, HasTag = true, Tag = 14, HasDefaultValue = false)]
                public ICollection<Program_Invocation_instance> Controlled_Program_Invocations
                {
                    get
                    {
                        return controlled_Program_Invocations_;
                    }
                    set
                    {
                        controlled_Program_Invocations_ = value;
                        controlled_Program_Invocations_present = true;
                    }
                }

                public void initWithDefaults()
                {
                }

                public IASN1PreparedElementData PreparedData
                {
                    get
                    {
                        return preparedData;
                    }
                }


                public bool isEventConditionPresent()
                {
                    return eventCondition_present;
                }

                public bool isEventActionPresent()
                {
                    return eventAction_present;
                }

                public bool isEventEnrollmentPresent()
                {
                    return eventEnrollment_present;
                }

                public bool isControlled_Program_InvocationsPresent()
                {
                    return controlled_Program_Invocations_present;
                }
            }
        }
    }
}