//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 3.0.40818.0
// 
namespace openPDCManager.PhasorDataServiceProxy {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OutputStreamDevicePhasor", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.Entities")]
    public partial class OutputStreamDevicePhasor : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int IDField;
        
        private string LabelField;
        
        private int LoadOrderField;
        
        private string NodeIDField;
        
        private int OutputStreamDeviceIDField;
        
        private string PhaseField;
        
        private string PhaseTypeField;
        
        private string PhasorTypeField;
        
        private int ScalingValueField;
        
        private string TypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Label {
            get {
                return this.LabelField;
            }
            set {
                if ((object.ReferenceEquals(this.LabelField, value) != true)) {
                    this.LabelField = value;
                    this.RaisePropertyChanged("Label");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LoadOrder {
            get {
                return this.LoadOrderField;
            }
            set {
                if ((this.LoadOrderField.Equals(value) != true)) {
                    this.LoadOrderField = value;
                    this.RaisePropertyChanged("LoadOrder");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NodeID {
            get {
                return this.NodeIDField;
            }
            set {
                if ((object.ReferenceEquals(this.NodeIDField, value) != true)) {
                    this.NodeIDField = value;
                    this.RaisePropertyChanged("NodeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OutputStreamDeviceID {
            get {
                return this.OutputStreamDeviceIDField;
            }
            set {
                if ((this.OutputStreamDeviceIDField.Equals(value) != true)) {
                    this.OutputStreamDeviceIDField = value;
                    this.RaisePropertyChanged("OutputStreamDeviceID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Phase {
            get {
                return this.PhaseField;
            }
            set {
                if ((object.ReferenceEquals(this.PhaseField, value) != true)) {
                    this.PhaseField = value;
                    this.RaisePropertyChanged("Phase");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhaseType {
            get {
                return this.PhaseTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.PhaseTypeField, value) != true)) {
                    this.PhaseTypeField = value;
                    this.RaisePropertyChanged("PhaseType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhasorType {
            get {
                return this.PhasorTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.PhasorTypeField, value) != true)) {
                    this.PhasorTypeField = value;
                    this.RaisePropertyChanged("PhasorType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ScalingValue {
            get {
                return this.ScalingValueField;
            }
            set {
                if ((this.ScalingValueField.Equals(value) != true)) {
                    this.ScalingValueField = value;
                    this.RaisePropertyChanged("ScalingValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
    public partial class CustomServiceFault : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string SystemMessageField;
        
        private string UserMessageField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SystemMessage {
            get {
                return this.SystemMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.SystemMessageField, value) != true)) {
                    this.SystemMessageField = value;
                    this.RaisePropertyChanged("SystemMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserMessage {
            get {
                return this.UserMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.UserMessageField, value) != true)) {
                    this.UserMessageField = value;
                    this.RaisePropertyChanged("UserMessage");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OutputStreamDeviceAnalog", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.Entities")]
    public partial class OutputStreamDeviceAnalog : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int IDField;
        
        private string LabelField;
        
        private int LoadOrderField;
        
        private string NodeIDField;
        
        private int OutputStreamDeviceIDField;
        
        private int ScalingValueField;
        
        private int TypeField;
        
        private string TypeNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Label {
            get {
                return this.LabelField;
            }
            set {
                if ((object.ReferenceEquals(this.LabelField, value) != true)) {
                    this.LabelField = value;
                    this.RaisePropertyChanged("Label");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LoadOrder {
            get {
                return this.LoadOrderField;
            }
            set {
                if ((this.LoadOrderField.Equals(value) != true)) {
                    this.LoadOrderField = value;
                    this.RaisePropertyChanged("LoadOrder");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NodeID {
            get {
                return this.NodeIDField;
            }
            set {
                if ((object.ReferenceEquals(this.NodeIDField, value) != true)) {
                    this.NodeIDField = value;
                    this.RaisePropertyChanged("NodeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OutputStreamDeviceID {
            get {
                return this.OutputStreamDeviceIDField;
            }
            set {
                if ((this.OutputStreamDeviceIDField.Equals(value) != true)) {
                    this.OutputStreamDeviceIDField = value;
                    this.RaisePropertyChanged("OutputStreamDeviceID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ScalingValue {
            get {
                return this.ScalingValueField;
            }
            set {
                if ((this.ScalingValueField.Equals(value) != true)) {
                    this.ScalingValueField = value;
                    this.RaisePropertyChanged("ScalingValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TypeName {
            get {
                return this.TypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeNameField, value) != true)) {
                    this.TypeNameField = value;
                    this.RaisePropertyChanged("TypeName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OutputStreamDeviceDigital", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.Entities")]
    public partial class OutputStreamDeviceDigital : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int IDField;
        
        private string LabelField;
        
        private int LoadOrderField;
        
        private int MaskValueField;
        
        private string NodeIDField;
        
        private int OutputStreamDeviceIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Label {
            get {
                return this.LabelField;
            }
            set {
                if ((object.ReferenceEquals(this.LabelField, value) != true)) {
                    this.LabelField = value;
                    this.RaisePropertyChanged("Label");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LoadOrder {
            get {
                return this.LoadOrderField;
            }
            set {
                if ((this.LoadOrderField.Equals(value) != true)) {
                    this.LoadOrderField = value;
                    this.RaisePropertyChanged("LoadOrder");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaskValue {
            get {
                return this.MaskValueField;
            }
            set {
                if ((this.MaskValueField.Equals(value) != true)) {
                    this.MaskValueField = value;
                    this.RaisePropertyChanged("MaskValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NodeID {
            get {
                return this.NodeIDField;
            }
            set {
                if ((object.ReferenceEquals(this.NodeIDField, value) != true)) {
                    this.NodeIDField = value;
                    this.RaisePropertyChanged("NodeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OutputStreamDeviceID {
            get {
                return this.OutputStreamDeviceIDField;
            }
            set {
                if ((this.OutputStreamDeviceIDField.Equals(value) != true)) {
                    this.OutputStreamDeviceIDField = value;
                    this.RaisePropertyChanged("OutputStreamDeviceID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DeviceMeasurementData", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
    public partial class DeviceMeasurementData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string AcronymField;
        
        private string CompanyNameField;
        
        private System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.DeviceInfo> DeviceListField;
        
        private bool EnabledField;
        
        private int IDField;
        
        private bool IsExpandedField;
        
        private string NameField;
        
        private string StatusColorField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Acronym {
            get {
                return this.AcronymField;
            }
            set {
                if ((object.ReferenceEquals(this.AcronymField, value) != true)) {
                    this.AcronymField = value;
                    this.RaisePropertyChanged("Acronym");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompanyName {
            get {
                return this.CompanyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyNameField, value) != true)) {
                    this.CompanyNameField = value;
                    this.RaisePropertyChanged("CompanyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.DeviceInfo> DeviceList {
            get {
                return this.DeviceListField;
            }
            set {
                if ((object.ReferenceEquals(this.DeviceListField, value) != true)) {
                    this.DeviceListField = value;
                    this.RaisePropertyChanged("DeviceList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Enabled {
            get {
                return this.EnabledField;
            }
            set {
                if ((this.EnabledField.Equals(value) != true)) {
                    this.EnabledField = value;
                    this.RaisePropertyChanged("Enabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsExpanded {
            get {
                return this.IsExpandedField;
            }
            set {
                if ((this.IsExpandedField.Equals(value) != true)) {
                    this.IsExpandedField = value;
                    this.RaisePropertyChanged("IsExpanded");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StatusColor {
            get {
                return this.StatusColorField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusColorField, value) != true)) {
                    this.StatusColorField = value;
                    this.RaisePropertyChanged("StatusColor");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DeviceInfo", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
    public partial class DeviceInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string AcronymField;
        
        private string CompanyNameField;
        
        private bool EnabledField;
        
        private System.Nullable<int> IDField;
        
        private bool IsExpandedField;
        
        private System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.MeasurementInfo> MeasurementListField;
        
        private string NameField;
        
        private string ParentAcronymField;
        
        private string ProtocolNameField;
        
        private string StatusColorField;
        
        private string VendorDeviceNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Acronym {
            get {
                return this.AcronymField;
            }
            set {
                if ((object.ReferenceEquals(this.AcronymField, value) != true)) {
                    this.AcronymField = value;
                    this.RaisePropertyChanged("Acronym");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompanyName {
            get {
                return this.CompanyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyNameField, value) != true)) {
                    this.CompanyNameField = value;
                    this.RaisePropertyChanged("CompanyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Enabled {
            get {
                return this.EnabledField;
            }
            set {
                if ((this.EnabledField.Equals(value) != true)) {
                    this.EnabledField = value;
                    this.RaisePropertyChanged("Enabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsExpanded {
            get {
                return this.IsExpandedField;
            }
            set {
                if ((this.IsExpandedField.Equals(value) != true)) {
                    this.IsExpandedField = value;
                    this.RaisePropertyChanged("IsExpanded");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.MeasurementInfo> MeasurementList {
            get {
                return this.MeasurementListField;
            }
            set {
                if ((object.ReferenceEquals(this.MeasurementListField, value) != true)) {
                    this.MeasurementListField = value;
                    this.RaisePropertyChanged("MeasurementList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParentAcronym {
            get {
                return this.ParentAcronymField;
            }
            set {
                if ((object.ReferenceEquals(this.ParentAcronymField, value) != true)) {
                    this.ParentAcronymField = value;
                    this.RaisePropertyChanged("ParentAcronym");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProtocolName {
            get {
                return this.ProtocolNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProtocolNameField, value) != true)) {
                    this.ProtocolNameField = value;
                    this.RaisePropertyChanged("ProtocolName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StatusColor {
            get {
                return this.StatusColorField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusColorField, value) != true)) {
                    this.StatusColorField = value;
                    this.RaisePropertyChanged("StatusColor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VendorDeviceName {
            get {
                return this.VendorDeviceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.VendorDeviceNameField, value) != true)) {
                    this.VendorDeviceNameField = value;
                    this.RaisePropertyChanged("VendorDeviceName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MeasurementInfo", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
    public partial class MeasurementInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string CurrentQualityField;
        
        private string CurrentTimeTagField;
        
        private string CurrentValueField;
        
        private string DescriptionField;
        
        private System.Nullable<int> DeviceIDField;
        
        private string EngineeringUnitsField;
        
        private string HistorianAcronymField;
        
        private bool IsExpandedField;
        
        private bool IsSelectedField;
        
        private int PointIDField;
        
        private string PointTagField;
        
        private string SignalAcronymField;
        
        private string SignalIDField;
        
        private string SignalNameField;
        
        private string SignalReferenceField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CurrentQuality {
            get {
                return this.CurrentQualityField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrentQualityField, value) != true)) {
                    this.CurrentQualityField = value;
                    this.RaisePropertyChanged("CurrentQuality");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CurrentTimeTag {
            get {
                return this.CurrentTimeTagField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrentTimeTagField, value) != true)) {
                    this.CurrentTimeTagField = value;
                    this.RaisePropertyChanged("CurrentTimeTag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CurrentValue {
            get {
                return this.CurrentValueField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrentValueField, value) != true)) {
                    this.CurrentValueField = value;
                    this.RaisePropertyChanged("CurrentValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> DeviceID {
            get {
                return this.DeviceIDField;
            }
            set {
                if ((this.DeviceIDField.Equals(value) != true)) {
                    this.DeviceIDField = value;
                    this.RaisePropertyChanged("DeviceID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EngineeringUnits {
            get {
                return this.EngineeringUnitsField;
            }
            set {
                if ((object.ReferenceEquals(this.EngineeringUnitsField, value) != true)) {
                    this.EngineeringUnitsField = value;
                    this.RaisePropertyChanged("EngineeringUnits");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HistorianAcronym {
            get {
                return this.HistorianAcronymField;
            }
            set {
                if ((object.ReferenceEquals(this.HistorianAcronymField, value) != true)) {
                    this.HistorianAcronymField = value;
                    this.RaisePropertyChanged("HistorianAcronym");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsExpanded {
            get {
                return this.IsExpandedField;
            }
            set {
                if ((this.IsExpandedField.Equals(value) != true)) {
                    this.IsExpandedField = value;
                    this.RaisePropertyChanged("IsExpanded");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSelected {
            get {
                return this.IsSelectedField;
            }
            set {
                if ((this.IsSelectedField.Equals(value) != true)) {
                    this.IsSelectedField = value;
                    this.RaisePropertyChanged("IsSelected");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PointID {
            get {
                return this.PointIDField;
            }
            set {
                if ((this.PointIDField.Equals(value) != true)) {
                    this.PointIDField = value;
                    this.RaisePropertyChanged("PointID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PointTag {
            get {
                return this.PointTagField;
            }
            set {
                if ((object.ReferenceEquals(this.PointTagField, value) != true)) {
                    this.PointTagField = value;
                    this.RaisePropertyChanged("PointTag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SignalAcronym {
            get {
                return this.SignalAcronymField;
            }
            set {
                if ((object.ReferenceEquals(this.SignalAcronymField, value) != true)) {
                    this.SignalAcronymField = value;
                    this.RaisePropertyChanged("SignalAcronym");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SignalID {
            get {
                return this.SignalIDField;
            }
            set {
                if ((object.ReferenceEquals(this.SignalIDField, value) != true)) {
                    this.SignalIDField = value;
                    this.RaisePropertyChanged("SignalID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SignalName {
            get {
                return this.SignalNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SignalNameField, value) != true)) {
                    this.SignalNameField = value;
                    this.RaisePropertyChanged("SignalName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SignalReference {
            get {
                return this.SignalReferenceField;
            }
            set {
                if ((object.ReferenceEquals(this.SignalReferenceField, value) != true)) {
                    this.SignalReferenceField = value;
                    this.RaisePropertyChanged("SignalReference");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MapType", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
    public enum MapType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Active = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Planning = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MapData", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
    public partial class MapData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string AcronymField;
        
        private string CompanyMapAcronymField;
        
        private string CompanyNameField;
        
        private bool DesiredField;
        
        private string DeviceTypeField;
        
        private int IDField;
        
        private bool InProgressField;
        
        private System.Nullable<decimal> LatitudeField;
        
        private System.Nullable<decimal> LongitudeField;
        
        private string NameField;
        
        private string NodeIDField;
        
        private bool PlannedField;
        
        private bool ReportingField;
        
        private string VendorDeviceNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Acronym {
            get {
                return this.AcronymField;
            }
            set {
                if ((object.ReferenceEquals(this.AcronymField, value) != true)) {
                    this.AcronymField = value;
                    this.RaisePropertyChanged("Acronym");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompanyMapAcronym {
            get {
                return this.CompanyMapAcronymField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyMapAcronymField, value) != true)) {
                    this.CompanyMapAcronymField = value;
                    this.RaisePropertyChanged("CompanyMapAcronym");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompanyName {
            get {
                return this.CompanyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyNameField, value) != true)) {
                    this.CompanyNameField = value;
                    this.RaisePropertyChanged("CompanyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Desired {
            get {
                return this.DesiredField;
            }
            set {
                if ((this.DesiredField.Equals(value) != true)) {
                    this.DesiredField = value;
                    this.RaisePropertyChanged("Desired");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeviceType {
            get {
                return this.DeviceTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.DeviceTypeField, value) != true)) {
                    this.DeviceTypeField = value;
                    this.RaisePropertyChanged("DeviceType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool InProgress {
            get {
                return this.InProgressField;
            }
            set {
                if ((this.InProgressField.Equals(value) != true)) {
                    this.InProgressField = value;
                    this.RaisePropertyChanged("InProgress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> Latitude {
            get {
                return this.LatitudeField;
            }
            set {
                if ((this.LatitudeField.Equals(value) != true)) {
                    this.LatitudeField = value;
                    this.RaisePropertyChanged("Latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> Longitude {
            get {
                return this.LongitudeField;
            }
            set {
                if ((this.LongitudeField.Equals(value) != true)) {
                    this.LongitudeField = value;
                    this.RaisePropertyChanged("Longitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NodeID {
            get {
                return this.NodeIDField;
            }
            set {
                if ((object.ReferenceEquals(this.NodeIDField, value) != true)) {
                    this.NodeIDField = value;
                    this.RaisePropertyChanged("NodeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Planned {
            get {
                return this.PlannedField;
            }
            set {
                if ((this.PlannedField.Equals(value) != true)) {
                    this.PlannedField = value;
                    this.RaisePropertyChanged("Planned");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Reporting {
            get {
                return this.ReportingField;
            }
            set {
                if ((this.ReportingField.Equals(value) != true)) {
                    this.ReportingField = value;
                    this.RaisePropertyChanged("Reporting");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VendorDeviceName {
            get {
                return this.VendorDeviceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.VendorDeviceNameField, value) != true)) {
                    this.VendorDeviceNameField = value;
                    this.RaisePropertyChanged("VendorDeviceName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConnectionSettings", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(openPDCManager.PhasorDataServiceProxy.TransportProtocol))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.DeviceMeasurementData>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(openPDCManager.PhasorDataServiceProxy.DeviceMeasurementData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.DeviceInfo>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(openPDCManager.PhasorDataServiceProxy.DeviceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.MeasurementInfo>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(openPDCManager.PhasorDataServiceProxy.MeasurementInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(openPDCManager.PhasorDataServiceProxy.MapType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.MapData>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(openPDCManager.PhasorDataServiceProxy.MapData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.WizardDeviceInfo>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(openPDCManager.PhasorDataServiceProxy.WizardDeviceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.PhasorInfo>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(openPDCManager.PhasorDataServiceProxy.PhasorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.StatisticMeasurementData>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(openPDCManager.PhasorDataServiceProxy.StatisticMeasurementData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.StreamInfo>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(openPDCManager.PhasorDataServiceProxy.StreamInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.DeviceStatistic>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(openPDCManager.PhasorDataServiceProxy.DeviceStatistic))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.DetailStatisticInfo>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(openPDCManager.PhasorDataServiceProxy.DetailStatisticInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(openPDCManager.PhasorDataServiceProxy.BasicStatisticInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.IaonTree>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(openPDCManager.PhasorDataServiceProxy.IaonTree))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, string>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<string>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<int, string>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(openPDCManager.PhasorDataServiceProxy.PhasorProtocol))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(openPDCManager.PhasorDataServiceProxy.OutputStreamDevicePhasor))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OutputStreamDeviceAnalog>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(openPDCManager.PhasorDataServiceProxy.OutputStreamDeviceAnalog))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OutputStreamDeviceDigital>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(openPDCManager.PhasorDataServiceProxy.OutputStreamDeviceDigital))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Measurement>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(openPDCManager.PhasorDataServiceProxy.Measurement))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OtherDevice>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(openPDCManager.PhasorDataServiceProxy.OtherDevice))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.CalculatedMeasurement>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CalculatedMeasurement))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(openPDCManager.PhasorDataServiceProxy.AdapterType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Adapter>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(openPDCManager.PhasorDataServiceProxy.Adapter))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OutputStream>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(openPDCManager.PhasorDataServiceProxy.OutputStream))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OutputStreamDevice>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(openPDCManager.PhasorDataServiceProxy.OutputStreamDevice))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OutputStreamMeasurement>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(openPDCManager.PhasorDataServiceProxy.OutputStreamMeasurement))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OutputStreamDevicePhasor>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Node>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(openPDCManager.PhasorDataServiceProxy.Node))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Company>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(openPDCManager.PhasorDataServiceProxy.Company))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Historian>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(openPDCManager.PhasorDataServiceProxy.Historian))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Vendor>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(openPDCManager.PhasorDataServiceProxy.Vendor))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.VendorDevice>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(openPDCManager.PhasorDataServiceProxy.VendorDevice))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Device>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(openPDCManager.PhasorDataServiceProxy.Device))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(openPDCManager.PhasorDataServiceProxy.DeviceType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Phasor>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(openPDCManager.PhasorDataServiceProxy.Phasor))]
    public partial class ConnectionSettings : object, System.ComponentModel.INotifyPropertyChanged {
        
        private bool AutoRepeatPlaybackField;
        
        private int ByteEncodingDisplayFormatField;
        
        private object ConnectionParametersField;
        
        private string ConnectionStringField;
        
        private int FrameRateField;
        
        private openPDCManager.PhasorDataServiceProxy.PhasorProtocol PhasorProtocolField;
        
        private int PmuIDField;
        
        private openPDCManager.PhasorDataServiceProxy.TransportProtocol TransportProtocolField;
        
        private string configurationFileNameField;
        
        private bool parseWordCountFromByteField;
        
        private bool refreshConfigurationFileOnChangeField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool AutoRepeatPlayback {
            get {
                return this.AutoRepeatPlaybackField;
            }
            set {
                if ((this.AutoRepeatPlaybackField.Equals(value) != true)) {
                    this.AutoRepeatPlaybackField = value;
                    this.RaisePropertyChanged("AutoRepeatPlayback");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int ByteEncodingDisplayFormat {
            get {
                return this.ByteEncodingDisplayFormatField;
            }
            set {
                if ((this.ByteEncodingDisplayFormatField.Equals(value) != true)) {
                    this.ByteEncodingDisplayFormatField = value;
                    this.RaisePropertyChanged("ByteEncodingDisplayFormat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public object ConnectionParameters {
            get {
                return this.ConnectionParametersField;
            }
            set {
                if ((object.ReferenceEquals(this.ConnectionParametersField, value) != true)) {
                    this.ConnectionParametersField = value;
                    this.RaisePropertyChanged("ConnectionParameters");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string ConnectionString {
            get {
                return this.ConnectionStringField;
            }
            set {
                if ((object.ReferenceEquals(this.ConnectionStringField, value) != true)) {
                    this.ConnectionStringField = value;
                    this.RaisePropertyChanged("ConnectionString");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int FrameRate {
            get {
                return this.FrameRateField;
            }
            set {
                if ((this.FrameRateField.Equals(value) != true)) {
                    this.FrameRateField = value;
                    this.RaisePropertyChanged("FrameRate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public openPDCManager.PhasorDataServiceProxy.PhasorProtocol PhasorProtocol {
            get {
                return this.PhasorProtocolField;
            }
            set {
                if ((this.PhasorProtocolField.Equals(value) != true)) {
                    this.PhasorProtocolField = value;
                    this.RaisePropertyChanged("PhasorProtocol");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int PmuID {
            get {
                return this.PmuIDField;
            }
            set {
                if ((this.PmuIDField.Equals(value) != true)) {
                    this.PmuIDField = value;
                    this.RaisePropertyChanged("PmuID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public openPDCManager.PhasorDataServiceProxy.TransportProtocol TransportProtocol {
            get {
                return this.TransportProtocolField;
            }
            set {
                if ((this.TransportProtocolField.Equals(value) != true)) {
                    this.TransportProtocolField = value;
                    this.RaisePropertyChanged("TransportProtocol");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string configurationFileName {
            get {
                return this.configurationFileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.configurationFileNameField, value) != true)) {
                    this.configurationFileNameField = value;
                    this.RaisePropertyChanged("configurationFileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool parseWordCountFromByte {
            get {
                return this.parseWordCountFromByteField;
            }
            set {
                if ((this.parseWordCountFromByteField.Equals(value) != true)) {
                    this.parseWordCountFromByteField = value;
                    this.RaisePropertyChanged("parseWordCountFromByte");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool refreshConfigurationFileOnChange {
            get {
                return this.refreshConfigurationFileOnChangeField;
            }
            set {
                if ((this.refreshConfigurationFileOnChangeField.Equals(value) != true)) {
                    this.refreshConfigurationFileOnChangeField = value;
                    this.RaisePropertyChanged("refreshConfigurationFileOnChange");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TransportProtocol", Namespace="http://schemas.datacontract.org/2004/07/TVA.Communication")]
    public enum TransportProtocol : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Tcp = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Udp = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Serial = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        File = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WizardDeviceInfo", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
    public partial class WizardDeviceInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int AccessIDField;
        
        private string AcronymField;
        
        private bool AddAnalogsField;
        
        private bool AddDigitalsField;
        
        private int AnalogCountField;
        
        private int DigitalCountField;
        
        private bool IncludeField;
        
        private bool IsNewField;
        
        private decimal LatitudeField;
        
        private decimal LongitudeField;
        
        private string NameField;
        
        private int ParentAccessIDField;
        
        private System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.PhasorInfo> PhasorListField;
        
        private System.Nullable<int> VendorDeviceIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AccessID {
            get {
                return this.AccessIDField;
            }
            set {
                if ((this.AccessIDField.Equals(value) != true)) {
                    this.AccessIDField = value;
                    this.RaisePropertyChanged("AccessID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Acronym {
            get {
                return this.AcronymField;
            }
            set {
                if ((object.ReferenceEquals(this.AcronymField, value) != true)) {
                    this.AcronymField = value;
                    this.RaisePropertyChanged("Acronym");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AddAnalogs {
            get {
                return this.AddAnalogsField;
            }
            set {
                if ((this.AddAnalogsField.Equals(value) != true)) {
                    this.AddAnalogsField = value;
                    this.RaisePropertyChanged("AddAnalogs");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AddDigitals {
            get {
                return this.AddDigitalsField;
            }
            set {
                if ((this.AddDigitalsField.Equals(value) != true)) {
                    this.AddDigitalsField = value;
                    this.RaisePropertyChanged("AddDigitals");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AnalogCount {
            get {
                return this.AnalogCountField;
            }
            set {
                if ((this.AnalogCountField.Equals(value) != true)) {
                    this.AnalogCountField = value;
                    this.RaisePropertyChanged("AnalogCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DigitalCount {
            get {
                return this.DigitalCountField;
            }
            set {
                if ((this.DigitalCountField.Equals(value) != true)) {
                    this.DigitalCountField = value;
                    this.RaisePropertyChanged("DigitalCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Include {
            get {
                return this.IncludeField;
            }
            set {
                if ((this.IncludeField.Equals(value) != true)) {
                    this.IncludeField = value;
                    this.RaisePropertyChanged("Include");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsNew {
            get {
                return this.IsNewField;
            }
            set {
                if ((this.IsNewField.Equals(value) != true)) {
                    this.IsNewField = value;
                    this.RaisePropertyChanged("IsNew");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Latitude {
            get {
                return this.LatitudeField;
            }
            set {
                if ((this.LatitudeField.Equals(value) != true)) {
                    this.LatitudeField = value;
                    this.RaisePropertyChanged("Latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Longitude {
            get {
                return this.LongitudeField;
            }
            set {
                if ((this.LongitudeField.Equals(value) != true)) {
                    this.LongitudeField = value;
                    this.RaisePropertyChanged("Longitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ParentAccessID {
            get {
                return this.ParentAccessIDField;
            }
            set {
                if ((this.ParentAccessIDField.Equals(value) != true)) {
                    this.ParentAccessIDField = value;
                    this.RaisePropertyChanged("ParentAccessID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.PhasorInfo> PhasorList {
            get {
                return this.PhasorListField;
            }
            set {
                if ((object.ReferenceEquals(this.PhasorListField, value) != true)) {
                    this.PhasorListField = value;
                    this.RaisePropertyChanged("PhasorList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> VendorDeviceID {
            get {
                return this.VendorDeviceIDField;
            }
            set {
                if ((this.VendorDeviceIDField.Equals(value) != true)) {
                    this.VendorDeviceIDField = value;
                    this.RaisePropertyChanged("VendorDeviceID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PhasorInfo", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
    public partial class PhasorInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DestinationLabelField;
        
        private bool IncludeField;
        
        private string LabelField;
        
        private string PhaseField;
        
        private string TypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DestinationLabel {
            get {
                return this.DestinationLabelField;
            }
            set {
                if ((object.ReferenceEquals(this.DestinationLabelField, value) != true)) {
                    this.DestinationLabelField = value;
                    this.RaisePropertyChanged("DestinationLabel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Include {
            get {
                return this.IncludeField;
            }
            set {
                if ((this.IncludeField.Equals(value) != true)) {
                    this.IncludeField = value;
                    this.RaisePropertyChanged("Include");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Label {
            get {
                return this.LabelField;
            }
            set {
                if ((object.ReferenceEquals(this.LabelField, value) != true)) {
                    this.LabelField = value;
                    this.RaisePropertyChanged("Label");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Phase {
            get {
                return this.PhaseField;
            }
            set {
                if ((object.ReferenceEquals(this.PhaseField, value) != true)) {
                    this.PhaseField = value;
                    this.RaisePropertyChanged("Phase");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StatisticMeasurementData", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
    public partial class StatisticMeasurementData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private bool IsExpandedField;
        
        private System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.StreamInfo> SourceStreamInfoListField;
        
        private string SourceTypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsExpanded {
            get {
                return this.IsExpandedField;
            }
            set {
                if ((this.IsExpandedField.Equals(value) != true)) {
                    this.IsExpandedField = value;
                    this.RaisePropertyChanged("IsExpanded");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.StreamInfo> SourceStreamInfoList {
            get {
                return this.SourceStreamInfoListField;
            }
            set {
                if ((object.ReferenceEquals(this.SourceStreamInfoListField, value) != true)) {
                    this.SourceStreamInfoListField = value;
                    this.RaisePropertyChanged("SourceStreamInfoList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceType {
            get {
                return this.SourceTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.SourceTypeField, value) != true)) {
                    this.SourceTypeField = value;
                    this.RaisePropertyChanged("SourceType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StreamInfo", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
    public partial class StreamInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string AcronymField;
        
        private System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.DeviceStatistic> DeviceStatisticListField;
        
        private int IDField;
        
        private bool IsExpandedField;
        
        private string NameField;
        
        private System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.DetailStatisticInfo> StatisticListField;
        
        private string StatusColorField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Acronym {
            get {
                return this.AcronymField;
            }
            set {
                if ((object.ReferenceEquals(this.AcronymField, value) != true)) {
                    this.AcronymField = value;
                    this.RaisePropertyChanged("Acronym");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.DeviceStatistic> DeviceStatisticList {
            get {
                return this.DeviceStatisticListField;
            }
            set {
                if ((object.ReferenceEquals(this.DeviceStatisticListField, value) != true)) {
                    this.DeviceStatisticListField = value;
                    this.RaisePropertyChanged("DeviceStatisticList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsExpanded {
            get {
                return this.IsExpandedField;
            }
            set {
                if ((this.IsExpandedField.Equals(value) != true)) {
                    this.IsExpandedField = value;
                    this.RaisePropertyChanged("IsExpanded");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.DetailStatisticInfo> StatisticList {
            get {
                return this.StatisticListField;
            }
            set {
                if ((object.ReferenceEquals(this.StatisticListField, value) != true)) {
                    this.StatisticListField = value;
                    this.RaisePropertyChanged("StatisticList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StatusColor {
            get {
                return this.StatusColorField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusColorField, value) != true)) {
                    this.StatusColorField = value;
                    this.RaisePropertyChanged("StatusColor");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DeviceStatistic", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
    public partial class DeviceStatistic : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string AcronymField;
        
        private int IDField;
        
        private bool IsExpandedField;
        
        private string NameField;
        
        private System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.DetailStatisticInfo> StatisticListField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Acronym {
            get {
                return this.AcronymField;
            }
            set {
                if ((object.ReferenceEquals(this.AcronymField, value) != true)) {
                    this.AcronymField = value;
                    this.RaisePropertyChanged("Acronym");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsExpanded {
            get {
                return this.IsExpandedField;
            }
            set {
                if ((this.IsExpandedField.Equals(value) != true)) {
                    this.IsExpandedField = value;
                    this.RaisePropertyChanged("IsExpanded");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.DetailStatisticInfo> StatisticList {
            get {
                return this.StatisticListField;
            }
            set {
                if ((object.ReferenceEquals(this.StatisticListField, value) != true)) {
                    this.StatisticListField = value;
                    this.RaisePropertyChanged("StatisticList");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DetailStatisticInfo", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
    public partial class DetailStatisticInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int DeviceIDField;
        
        private bool IsExpandedField;
        
        private int PointIDField;
        
        private string PointTagField;
        
        private string SignalReferenceField;
        
        private openPDCManager.PhasorDataServiceProxy.BasicStatisticInfo StatisticsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DeviceID {
            get {
                return this.DeviceIDField;
            }
            set {
                if ((this.DeviceIDField.Equals(value) != true)) {
                    this.DeviceIDField = value;
                    this.RaisePropertyChanged("DeviceID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsExpanded {
            get {
                return this.IsExpandedField;
            }
            set {
                if ((this.IsExpandedField.Equals(value) != true)) {
                    this.IsExpandedField = value;
                    this.RaisePropertyChanged("IsExpanded");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PointID {
            get {
                return this.PointIDField;
            }
            set {
                if ((this.PointIDField.Equals(value) != true)) {
                    this.PointIDField = value;
                    this.RaisePropertyChanged("PointID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PointTag {
            get {
                return this.PointTagField;
            }
            set {
                if ((object.ReferenceEquals(this.PointTagField, value) != true)) {
                    this.PointTagField = value;
                    this.RaisePropertyChanged("PointTag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SignalReference {
            get {
                return this.SignalReferenceField;
            }
            set {
                if ((object.ReferenceEquals(this.SignalReferenceField, value) != true)) {
                    this.SignalReferenceField = value;
                    this.RaisePropertyChanged("SignalReference");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public openPDCManager.PhasorDataServiceProxy.BasicStatisticInfo Statistics {
            get {
                return this.StatisticsField;
            }
            set {
                if ((object.ReferenceEquals(this.StatisticsField, value) != true)) {
                    this.StatisticsField = value;
                    this.RaisePropertyChanged("Statistics");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BasicStatisticInfo", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
    public partial class BasicStatisticInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DataTypeField;
        
        private string DescriptionField;
        
        private string DisplayFormatField;
        
        private bool IsConnectedStateField;
        
        private int LoadOrderField;
        
        private string NameField;
        
        private string QualityField;
        
        private string SourceField;
        
        private string TimeTagField;
        
        private string ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DataType {
            get {
                return this.DataTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.DataTypeField, value) != true)) {
                    this.DataTypeField = value;
                    this.RaisePropertyChanged("DataType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DisplayFormat {
            get {
                return this.DisplayFormatField;
            }
            set {
                if ((object.ReferenceEquals(this.DisplayFormatField, value) != true)) {
                    this.DisplayFormatField = value;
                    this.RaisePropertyChanged("DisplayFormat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsConnectedState {
            get {
                return this.IsConnectedStateField;
            }
            set {
                if ((this.IsConnectedStateField.Equals(value) != true)) {
                    this.IsConnectedStateField = value;
                    this.RaisePropertyChanged("IsConnectedState");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LoadOrder {
            get {
                return this.LoadOrderField;
            }
            set {
                if ((this.LoadOrderField.Equals(value) != true)) {
                    this.LoadOrderField = value;
                    this.RaisePropertyChanged("LoadOrder");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Quality {
            get {
                return this.QualityField;
            }
            set {
                if ((object.ReferenceEquals(this.QualityField, value) != true)) {
                    this.QualityField = value;
                    this.RaisePropertyChanged("Quality");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Source {
            get {
                return this.SourceField;
            }
            set {
                if ((object.ReferenceEquals(this.SourceField, value) != true)) {
                    this.SourceField = value;
                    this.RaisePropertyChanged("Source");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TimeTag {
            get {
                return this.TimeTagField;
            }
            set {
                if ((object.ReferenceEquals(this.TimeTagField, value) != true)) {
                    this.TimeTagField = value;
                    this.RaisePropertyChanged("TimeTag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IaonTree", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
    public partial class IaonTree : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Adapter> AdapterListField;
        
        private string AdapterTypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Adapter> AdapterList {
            get {
                return this.AdapterListField;
            }
            set {
                if ((object.ReferenceEquals(this.AdapterListField, value) != true)) {
                    this.AdapterListField = value;
                    this.RaisePropertyChanged("AdapterList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AdapterType {
            get {
                return this.AdapterTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.AdapterTypeField, value) != true)) {
                    this.AdapterTypeField = value;
                    this.RaisePropertyChanged("AdapterType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PhasorProtocol", Namespace="http://schemas.datacontract.org/2004/07/TVA.PhasorProtocols")]
    public enum PhasorProtocol : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IeeeC37_118V1 = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IeeeC37_118D6 = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Ieee1344 = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BpaPdcStream = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FNet = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SelFastMessage = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Macrodyne = 6,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Measurement", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.Entities")]
    public partial class Measurement : object, System.ComponentModel.INotifyPropertyChanged {
        
        private double AdderField;
        
        private string AlternateTagField;
        
        private string DescriptionField;
        
        private string DeviceAcronymField;
        
        private System.Nullable<int> DeviceIDField;
        
        private bool EnabledField;
        
        private System.Nullable<int> FramesPerSecondField;
        
        private string HistorianAcronymField;
        
        private System.Nullable<int> HistorianIDField;
        
        private double MultiplierField;
        
        private string PhasorLabelField;
        
        private System.Nullable<int> PhasorSourceIndexField;
        
        private int PointIDField;
        
        private string PointTagField;
        
        private string SignalAcronymField;
        
        private string SignalIDField;
        
        private string SignalNameField;
        
        private string SignalReferenceField;
        
        private string SignalSuffixField;
        
        private int SignalTypeIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Adder {
            get {
                return this.AdderField;
            }
            set {
                if ((this.AdderField.Equals(value) != true)) {
                    this.AdderField = value;
                    this.RaisePropertyChanged("Adder");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AlternateTag {
            get {
                return this.AlternateTagField;
            }
            set {
                if ((object.ReferenceEquals(this.AlternateTagField, value) != true)) {
                    this.AlternateTagField = value;
                    this.RaisePropertyChanged("AlternateTag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeviceAcronym {
            get {
                return this.DeviceAcronymField;
            }
            set {
                if ((object.ReferenceEquals(this.DeviceAcronymField, value) != true)) {
                    this.DeviceAcronymField = value;
                    this.RaisePropertyChanged("DeviceAcronym");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> DeviceID {
            get {
                return this.DeviceIDField;
            }
            set {
                if ((this.DeviceIDField.Equals(value) != true)) {
                    this.DeviceIDField = value;
                    this.RaisePropertyChanged("DeviceID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Enabled {
            get {
                return this.EnabledField;
            }
            set {
                if ((this.EnabledField.Equals(value) != true)) {
                    this.EnabledField = value;
                    this.RaisePropertyChanged("Enabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> FramesPerSecond {
            get {
                return this.FramesPerSecondField;
            }
            set {
                if ((this.FramesPerSecondField.Equals(value) != true)) {
                    this.FramesPerSecondField = value;
                    this.RaisePropertyChanged("FramesPerSecond");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HistorianAcronym {
            get {
                return this.HistorianAcronymField;
            }
            set {
                if ((object.ReferenceEquals(this.HistorianAcronymField, value) != true)) {
                    this.HistorianAcronymField = value;
                    this.RaisePropertyChanged("HistorianAcronym");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> HistorianID {
            get {
                return this.HistorianIDField;
            }
            set {
                if ((this.HistorianIDField.Equals(value) != true)) {
                    this.HistorianIDField = value;
                    this.RaisePropertyChanged("HistorianID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Multiplier {
            get {
                return this.MultiplierField;
            }
            set {
                if ((this.MultiplierField.Equals(value) != true)) {
                    this.MultiplierField = value;
                    this.RaisePropertyChanged("Multiplier");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhasorLabel {
            get {
                return this.PhasorLabelField;
            }
            set {
                if ((object.ReferenceEquals(this.PhasorLabelField, value) != true)) {
                    this.PhasorLabelField = value;
                    this.RaisePropertyChanged("PhasorLabel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> PhasorSourceIndex {
            get {
                return this.PhasorSourceIndexField;
            }
            set {
                if ((this.PhasorSourceIndexField.Equals(value) != true)) {
                    this.PhasorSourceIndexField = value;
                    this.RaisePropertyChanged("PhasorSourceIndex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PointID {
            get {
                return this.PointIDField;
            }
            set {
                if ((this.PointIDField.Equals(value) != true)) {
                    this.PointIDField = value;
                    this.RaisePropertyChanged("PointID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PointTag {
            get {
                return this.PointTagField;
            }
            set {
                if ((object.ReferenceEquals(this.PointTagField, value) != true)) {
                    this.PointTagField = value;
                    this.RaisePropertyChanged("PointTag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SignalAcronym {
            get {
                return this.SignalAcronymField;
            }
            set {
                if ((object.ReferenceEquals(this.SignalAcronymField, value) != true)) {
                    this.SignalAcronymField = value;
                    this.RaisePropertyChanged("SignalAcronym");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SignalID {
            get {
                return this.SignalIDField;
            }
            set {
                if ((object.ReferenceEquals(this.SignalIDField, value) != true)) {
                    this.SignalIDField = value;
                    this.RaisePropertyChanged("SignalID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SignalName {
            get {
                return this.SignalNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SignalNameField, value) != true)) {
                    this.SignalNameField = value;
                    this.RaisePropertyChanged("SignalName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SignalReference {
            get {
                return this.SignalReferenceField;
            }
            set {
                if ((object.ReferenceEquals(this.SignalReferenceField, value) != true)) {
                    this.SignalReferenceField = value;
                    this.RaisePropertyChanged("SignalReference");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SignalSuffix {
            get {
                return this.SignalSuffixField;
            }
            set {
                if ((object.ReferenceEquals(this.SignalSuffixField, value) != true)) {
                    this.SignalSuffixField = value;
                    this.RaisePropertyChanged("SignalSuffix");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SignalTypeID {
            get {
                return this.SignalTypeIDField;
            }
            set {
                if ((this.SignalTypeIDField.Equals(value) != true)) {
                    this.SignalTypeIDField = value;
                    this.RaisePropertyChanged("SignalTypeID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OtherDevice", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.Entities")]
    public partial class OtherDevice : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string AcronymField;
        
        private System.Nullable<int> CompanyIDField;
        
        private string CompanyNameField;
        
        private bool DesiredField;
        
        private int IDField;
        
        private bool InProgressField;
        
        private System.Nullable<int> InterconnectionIDField;
        
        private string InterconnectionNameField;
        
        private bool IsConcentratorField;
        
        private System.Nullable<decimal> LatitudeField;
        
        private System.Nullable<decimal> LongitudeField;
        
        private string NameField;
        
        private bool PlannedField;
        
        private System.Nullable<int> VendorDeviceIDField;
        
        private string VendorDeviceNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Acronym {
            get {
                return this.AcronymField;
            }
            set {
                if ((object.ReferenceEquals(this.AcronymField, value) != true)) {
                    this.AcronymField = value;
                    this.RaisePropertyChanged("Acronym");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CompanyID {
            get {
                return this.CompanyIDField;
            }
            set {
                if ((this.CompanyIDField.Equals(value) != true)) {
                    this.CompanyIDField = value;
                    this.RaisePropertyChanged("CompanyID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompanyName {
            get {
                return this.CompanyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyNameField, value) != true)) {
                    this.CompanyNameField = value;
                    this.RaisePropertyChanged("CompanyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Desired {
            get {
                return this.DesiredField;
            }
            set {
                if ((this.DesiredField.Equals(value) != true)) {
                    this.DesiredField = value;
                    this.RaisePropertyChanged("Desired");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool InProgress {
            get {
                return this.InProgressField;
            }
            set {
                if ((this.InProgressField.Equals(value) != true)) {
                    this.InProgressField = value;
                    this.RaisePropertyChanged("InProgress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> InterconnectionID {
            get {
                return this.InterconnectionIDField;
            }
            set {
                if ((this.InterconnectionIDField.Equals(value) != true)) {
                    this.InterconnectionIDField = value;
                    this.RaisePropertyChanged("InterconnectionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InterconnectionName {
            get {
                return this.InterconnectionNameField;
            }
            set {
                if ((object.ReferenceEquals(this.InterconnectionNameField, value) != true)) {
                    this.InterconnectionNameField = value;
                    this.RaisePropertyChanged("InterconnectionName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsConcentrator {
            get {
                return this.IsConcentratorField;
            }
            set {
                if ((this.IsConcentratorField.Equals(value) != true)) {
                    this.IsConcentratorField = value;
                    this.RaisePropertyChanged("IsConcentrator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> Latitude {
            get {
                return this.LatitudeField;
            }
            set {
                if ((this.LatitudeField.Equals(value) != true)) {
                    this.LatitudeField = value;
                    this.RaisePropertyChanged("Latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> Longitude {
            get {
                return this.LongitudeField;
            }
            set {
                if ((this.LongitudeField.Equals(value) != true)) {
                    this.LongitudeField = value;
                    this.RaisePropertyChanged("Longitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Planned {
            get {
                return this.PlannedField;
            }
            set {
                if ((this.PlannedField.Equals(value) != true)) {
                    this.PlannedField = value;
                    this.RaisePropertyChanged("Planned");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> VendorDeviceID {
            get {
                return this.VendorDeviceIDField;
            }
            set {
                if ((this.VendorDeviceIDField.Equals(value) != true)) {
                    this.VendorDeviceIDField = value;
                    this.RaisePropertyChanged("VendorDeviceID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VendorDeviceName {
            get {
                return this.VendorDeviceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.VendorDeviceNameField, value) != true)) {
                    this.VendorDeviceNameField = value;
                    this.RaisePropertyChanged("VendorDeviceName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CalculatedMeasurement", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.Entities")]
    public partial class CalculatedMeasurement : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string AcronymField;
        
        private bool AllowPreemptivePublishingField;
        
        private bool AllowSortsByArrivalField;
        
        private string AssemblyNameField;
        
        private string ConfigSectionField;
        
        private string ConnectionStringField;
        
        private string DownsamplingMethodField;
        
        private bool EnabledField;
        
        private int FramesPerSecondField;
        
        private int IDField;
        
        private bool IgnoreBadTimeStampsField;
        
        private string InputMeasurementsField;
        
        private double LagTimeField;
        
        private double LeadTimeField;
        
        private int LoadOrderField;
        
        private int MinimumMeasurementsToUseField;
        
        private string NameField;
        
        private string NodeIdField;
        
        private string NodeNameField;
        
        private string OutputMeasurementsField;
        
        private bool PerformTimestampReasonabilityCheckField;
        
        private int TimeResolutionField;
        
        private string TypeNameField;
        
        private bool UseLocalClockAsRealTimeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Acronym {
            get {
                return this.AcronymField;
            }
            set {
                if ((object.ReferenceEquals(this.AcronymField, value) != true)) {
                    this.AcronymField = value;
                    this.RaisePropertyChanged("Acronym");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AllowPreemptivePublishing {
            get {
                return this.AllowPreemptivePublishingField;
            }
            set {
                if ((this.AllowPreemptivePublishingField.Equals(value) != true)) {
                    this.AllowPreemptivePublishingField = value;
                    this.RaisePropertyChanged("AllowPreemptivePublishing");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AllowSortsByArrival {
            get {
                return this.AllowSortsByArrivalField;
            }
            set {
                if ((this.AllowSortsByArrivalField.Equals(value) != true)) {
                    this.AllowSortsByArrivalField = value;
                    this.RaisePropertyChanged("AllowSortsByArrival");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AssemblyName {
            get {
                return this.AssemblyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AssemblyNameField, value) != true)) {
                    this.AssemblyNameField = value;
                    this.RaisePropertyChanged("AssemblyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ConfigSection {
            get {
                return this.ConfigSectionField;
            }
            set {
                if ((object.ReferenceEquals(this.ConfigSectionField, value) != true)) {
                    this.ConfigSectionField = value;
                    this.RaisePropertyChanged("ConfigSection");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ConnectionString {
            get {
                return this.ConnectionStringField;
            }
            set {
                if ((object.ReferenceEquals(this.ConnectionStringField, value) != true)) {
                    this.ConnectionStringField = value;
                    this.RaisePropertyChanged("ConnectionString");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DownsamplingMethod {
            get {
                return this.DownsamplingMethodField;
            }
            set {
                if ((object.ReferenceEquals(this.DownsamplingMethodField, value) != true)) {
                    this.DownsamplingMethodField = value;
                    this.RaisePropertyChanged("DownsamplingMethod");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Enabled {
            get {
                return this.EnabledField;
            }
            set {
                if ((this.EnabledField.Equals(value) != true)) {
                    this.EnabledField = value;
                    this.RaisePropertyChanged("Enabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FramesPerSecond {
            get {
                return this.FramesPerSecondField;
            }
            set {
                if ((this.FramesPerSecondField.Equals(value) != true)) {
                    this.FramesPerSecondField = value;
                    this.RaisePropertyChanged("FramesPerSecond");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IgnoreBadTimeStamps {
            get {
                return this.IgnoreBadTimeStampsField;
            }
            set {
                if ((this.IgnoreBadTimeStampsField.Equals(value) != true)) {
                    this.IgnoreBadTimeStampsField = value;
                    this.RaisePropertyChanged("IgnoreBadTimeStamps");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InputMeasurements {
            get {
                return this.InputMeasurementsField;
            }
            set {
                if ((object.ReferenceEquals(this.InputMeasurementsField, value) != true)) {
                    this.InputMeasurementsField = value;
                    this.RaisePropertyChanged("InputMeasurements");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double LagTime {
            get {
                return this.LagTimeField;
            }
            set {
                if ((this.LagTimeField.Equals(value) != true)) {
                    this.LagTimeField = value;
                    this.RaisePropertyChanged("LagTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double LeadTime {
            get {
                return this.LeadTimeField;
            }
            set {
                if ((this.LeadTimeField.Equals(value) != true)) {
                    this.LeadTimeField = value;
                    this.RaisePropertyChanged("LeadTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LoadOrder {
            get {
                return this.LoadOrderField;
            }
            set {
                if ((this.LoadOrderField.Equals(value) != true)) {
                    this.LoadOrderField = value;
                    this.RaisePropertyChanged("LoadOrder");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MinimumMeasurementsToUse {
            get {
                return this.MinimumMeasurementsToUseField;
            }
            set {
                if ((this.MinimumMeasurementsToUseField.Equals(value) != true)) {
                    this.MinimumMeasurementsToUseField = value;
                    this.RaisePropertyChanged("MinimumMeasurementsToUse");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NodeId {
            get {
                return this.NodeIdField;
            }
            set {
                if ((object.ReferenceEquals(this.NodeIdField, value) != true)) {
                    this.NodeIdField = value;
                    this.RaisePropertyChanged("NodeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NodeName {
            get {
                return this.NodeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.NodeNameField, value) != true)) {
                    this.NodeNameField = value;
                    this.RaisePropertyChanged("NodeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OutputMeasurements {
            get {
                return this.OutputMeasurementsField;
            }
            set {
                if ((object.ReferenceEquals(this.OutputMeasurementsField, value) != true)) {
                    this.OutputMeasurementsField = value;
                    this.RaisePropertyChanged("OutputMeasurements");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool PerformTimestampReasonabilityCheck {
            get {
                return this.PerformTimestampReasonabilityCheckField;
            }
            set {
                if ((this.PerformTimestampReasonabilityCheckField.Equals(value) != true)) {
                    this.PerformTimestampReasonabilityCheckField = value;
                    this.RaisePropertyChanged("PerformTimestampReasonabilityCheck");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TimeResolution {
            get {
                return this.TimeResolutionField;
            }
            set {
                if ((this.TimeResolutionField.Equals(value) != true)) {
                    this.TimeResolutionField = value;
                    this.RaisePropertyChanged("TimeResolution");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TypeName {
            get {
                return this.TypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeNameField, value) != true)) {
                    this.TypeNameField = value;
                    this.RaisePropertyChanged("TypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool UseLocalClockAsRealTime {
            get {
                return this.UseLocalClockAsRealTimeField;
            }
            set {
                if ((this.UseLocalClockAsRealTimeField.Equals(value) != true)) {
                    this.UseLocalClockAsRealTimeField = value;
                    this.RaisePropertyChanged("UseLocalClockAsRealTime");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AdapterType", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.Entities")]
    public enum AdapterType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Action = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Input = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Output = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Adapter", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.Entities")]
    public partial class Adapter : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string AdapterNameField;
        
        private string AssemblyNameField;
        
        private string ConnectionStringField;
        
        private bool EnabledField;
        
        private int IDField;
        
        private int LoadOrderField;
        
        private string NodeIDField;
        
        private string NodeNameField;
        
        private string TypeNameField;
        
        private openPDCManager.PhasorDataServiceProxy.AdapterType adapterTypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AdapterName {
            get {
                return this.AdapterNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AdapterNameField, value) != true)) {
                    this.AdapterNameField = value;
                    this.RaisePropertyChanged("AdapterName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AssemblyName {
            get {
                return this.AssemblyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AssemblyNameField, value) != true)) {
                    this.AssemblyNameField = value;
                    this.RaisePropertyChanged("AssemblyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ConnectionString {
            get {
                return this.ConnectionStringField;
            }
            set {
                if ((object.ReferenceEquals(this.ConnectionStringField, value) != true)) {
                    this.ConnectionStringField = value;
                    this.RaisePropertyChanged("ConnectionString");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Enabled {
            get {
                return this.EnabledField;
            }
            set {
                if ((this.EnabledField.Equals(value) != true)) {
                    this.EnabledField = value;
                    this.RaisePropertyChanged("Enabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LoadOrder {
            get {
                return this.LoadOrderField;
            }
            set {
                if ((this.LoadOrderField.Equals(value) != true)) {
                    this.LoadOrderField = value;
                    this.RaisePropertyChanged("LoadOrder");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NodeID {
            get {
                return this.NodeIDField;
            }
            set {
                if ((object.ReferenceEquals(this.NodeIDField, value) != true)) {
                    this.NodeIDField = value;
                    this.RaisePropertyChanged("NodeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NodeName {
            get {
                return this.NodeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.NodeNameField, value) != true)) {
                    this.NodeNameField = value;
                    this.RaisePropertyChanged("NodeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TypeName {
            get {
                return this.TypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeNameField, value) != true)) {
                    this.TypeNameField = value;
                    this.RaisePropertyChanged("TypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public openPDCManager.PhasorDataServiceProxy.AdapterType adapterType {
            get {
                return this.adapterTypeField;
            }
            set {
                if ((this.adapterTypeField.Equals(value) != true)) {
                    this.adapterTypeField = value;
                    this.RaisePropertyChanged("adapterType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OutputStream", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.Entities")]
    public partial class OutputStream : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string AcronymField;
        
        private bool AllowPreemptivePublishingField;
        
        private bool AllowSortsByArrivalField;
        
        private int AnalogScalingValueField;
        
        private bool AutoPublishConfigFrameField;
        
        private bool AutoStartDataChannelField;
        
        private string CommandChannelField;
        
        private string ConnectionStringField;
        
        private string CoordinateFormatField;
        
        private int CurrentScalingValueField;
        
        private string DataChannelField;
        
        private string DataFormatField;
        
        private int DigitalMaskValueField;
        
        private string DownsamplingMethodField;
        
        private bool EnabledField;
        
        private int FramesPerSecondField;
        
        private int IDField;
        
        private int IDCodeField;
        
        private bool IgnoreBadTimeStampsField;
        
        private double LagTimeField;
        
        private double LeadTimeField;
        
        private int LoadOrderField;
        
        private string NameField;
        
        private string NodeIDField;
        
        private string NodeNameField;
        
        private int NominalFrequencyField;
        
        private bool PerformTimestampReasonabilityCheckField;
        
        private int TimeResolutionField;
        
        private int TypeField;
        
        private string TypeNameField;
        
        private bool UseLocalClockAsRealTimeField;
        
        private int VoltageScalingValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Acronym {
            get {
                return this.AcronymField;
            }
            set {
                if ((object.ReferenceEquals(this.AcronymField, value) != true)) {
                    this.AcronymField = value;
                    this.RaisePropertyChanged("Acronym");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AllowPreemptivePublishing {
            get {
                return this.AllowPreemptivePublishingField;
            }
            set {
                if ((this.AllowPreemptivePublishingField.Equals(value) != true)) {
                    this.AllowPreemptivePublishingField = value;
                    this.RaisePropertyChanged("AllowPreemptivePublishing");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AllowSortsByArrival {
            get {
                return this.AllowSortsByArrivalField;
            }
            set {
                if ((this.AllowSortsByArrivalField.Equals(value) != true)) {
                    this.AllowSortsByArrivalField = value;
                    this.RaisePropertyChanged("AllowSortsByArrival");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AnalogScalingValue {
            get {
                return this.AnalogScalingValueField;
            }
            set {
                if ((this.AnalogScalingValueField.Equals(value) != true)) {
                    this.AnalogScalingValueField = value;
                    this.RaisePropertyChanged("AnalogScalingValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AutoPublishConfigFrame {
            get {
                return this.AutoPublishConfigFrameField;
            }
            set {
                if ((this.AutoPublishConfigFrameField.Equals(value) != true)) {
                    this.AutoPublishConfigFrameField = value;
                    this.RaisePropertyChanged("AutoPublishConfigFrame");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AutoStartDataChannel {
            get {
                return this.AutoStartDataChannelField;
            }
            set {
                if ((this.AutoStartDataChannelField.Equals(value) != true)) {
                    this.AutoStartDataChannelField = value;
                    this.RaisePropertyChanged("AutoStartDataChannel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CommandChannel {
            get {
                return this.CommandChannelField;
            }
            set {
                if ((object.ReferenceEquals(this.CommandChannelField, value) != true)) {
                    this.CommandChannelField = value;
                    this.RaisePropertyChanged("CommandChannel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ConnectionString {
            get {
                return this.ConnectionStringField;
            }
            set {
                if ((object.ReferenceEquals(this.ConnectionStringField, value) != true)) {
                    this.ConnectionStringField = value;
                    this.RaisePropertyChanged("ConnectionString");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CoordinateFormat {
            get {
                return this.CoordinateFormatField;
            }
            set {
                if ((object.ReferenceEquals(this.CoordinateFormatField, value) != true)) {
                    this.CoordinateFormatField = value;
                    this.RaisePropertyChanged("CoordinateFormat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CurrentScalingValue {
            get {
                return this.CurrentScalingValueField;
            }
            set {
                if ((this.CurrentScalingValueField.Equals(value) != true)) {
                    this.CurrentScalingValueField = value;
                    this.RaisePropertyChanged("CurrentScalingValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DataChannel {
            get {
                return this.DataChannelField;
            }
            set {
                if ((object.ReferenceEquals(this.DataChannelField, value) != true)) {
                    this.DataChannelField = value;
                    this.RaisePropertyChanged("DataChannel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DataFormat {
            get {
                return this.DataFormatField;
            }
            set {
                if ((object.ReferenceEquals(this.DataFormatField, value) != true)) {
                    this.DataFormatField = value;
                    this.RaisePropertyChanged("DataFormat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DigitalMaskValue {
            get {
                return this.DigitalMaskValueField;
            }
            set {
                if ((this.DigitalMaskValueField.Equals(value) != true)) {
                    this.DigitalMaskValueField = value;
                    this.RaisePropertyChanged("DigitalMaskValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DownsamplingMethod {
            get {
                return this.DownsamplingMethodField;
            }
            set {
                if ((object.ReferenceEquals(this.DownsamplingMethodField, value) != true)) {
                    this.DownsamplingMethodField = value;
                    this.RaisePropertyChanged("DownsamplingMethod");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Enabled {
            get {
                return this.EnabledField;
            }
            set {
                if ((this.EnabledField.Equals(value) != true)) {
                    this.EnabledField = value;
                    this.RaisePropertyChanged("Enabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FramesPerSecond {
            get {
                return this.FramesPerSecondField;
            }
            set {
                if ((this.FramesPerSecondField.Equals(value) != true)) {
                    this.FramesPerSecondField = value;
                    this.RaisePropertyChanged("FramesPerSecond");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IDCode {
            get {
                return this.IDCodeField;
            }
            set {
                if ((this.IDCodeField.Equals(value) != true)) {
                    this.IDCodeField = value;
                    this.RaisePropertyChanged("IDCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IgnoreBadTimeStamps {
            get {
                return this.IgnoreBadTimeStampsField;
            }
            set {
                if ((this.IgnoreBadTimeStampsField.Equals(value) != true)) {
                    this.IgnoreBadTimeStampsField = value;
                    this.RaisePropertyChanged("IgnoreBadTimeStamps");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double LagTime {
            get {
                return this.LagTimeField;
            }
            set {
                if ((this.LagTimeField.Equals(value) != true)) {
                    this.LagTimeField = value;
                    this.RaisePropertyChanged("LagTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double LeadTime {
            get {
                return this.LeadTimeField;
            }
            set {
                if ((this.LeadTimeField.Equals(value) != true)) {
                    this.LeadTimeField = value;
                    this.RaisePropertyChanged("LeadTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LoadOrder {
            get {
                return this.LoadOrderField;
            }
            set {
                if ((this.LoadOrderField.Equals(value) != true)) {
                    this.LoadOrderField = value;
                    this.RaisePropertyChanged("LoadOrder");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NodeID {
            get {
                return this.NodeIDField;
            }
            set {
                if ((object.ReferenceEquals(this.NodeIDField, value) != true)) {
                    this.NodeIDField = value;
                    this.RaisePropertyChanged("NodeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NodeName {
            get {
                return this.NodeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.NodeNameField, value) != true)) {
                    this.NodeNameField = value;
                    this.RaisePropertyChanged("NodeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NominalFrequency {
            get {
                return this.NominalFrequencyField;
            }
            set {
                if ((this.NominalFrequencyField.Equals(value) != true)) {
                    this.NominalFrequencyField = value;
                    this.RaisePropertyChanged("NominalFrequency");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool PerformTimestampReasonabilityCheck {
            get {
                return this.PerformTimestampReasonabilityCheckField;
            }
            set {
                if ((this.PerformTimestampReasonabilityCheckField.Equals(value) != true)) {
                    this.PerformTimestampReasonabilityCheckField = value;
                    this.RaisePropertyChanged("PerformTimestampReasonabilityCheck");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TimeResolution {
            get {
                return this.TimeResolutionField;
            }
            set {
                if ((this.TimeResolutionField.Equals(value) != true)) {
                    this.TimeResolutionField = value;
                    this.RaisePropertyChanged("TimeResolution");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TypeName {
            get {
                return this.TypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeNameField, value) != true)) {
                    this.TypeNameField = value;
                    this.RaisePropertyChanged("TypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool UseLocalClockAsRealTime {
            get {
                return this.UseLocalClockAsRealTimeField;
            }
            set {
                if ((this.UseLocalClockAsRealTimeField.Equals(value) != true)) {
                    this.UseLocalClockAsRealTimeField = value;
                    this.RaisePropertyChanged("UseLocalClockAsRealTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int VoltageScalingValue {
            get {
                return this.VoltageScalingValueField;
            }
            set {
                if ((this.VoltageScalingValueField.Equals(value) != true)) {
                    this.VoltageScalingValueField = value;
                    this.RaisePropertyChanged("VoltageScalingValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OutputStreamDevice", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.Entities")]
    public partial class OutputStreamDevice : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string AcronymField;
        
        private int AdapterIDField;
        
        private string AnalogDataFormatField;
        
        private string BpaAcronymField;
        
        private string CoordinateFormatField;
        
        private bool EnabledField;
        
        private string FrequencyDataFormatField;
        
        private int IDField;
        
        private int IdCodeField;
        
        private int LoadOrderField;
        
        private string NameField;
        
        private string NodeIDField;
        
        private string PhasorDataFormatField;
        
        private bool VirtualField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Acronym {
            get {
                return this.AcronymField;
            }
            set {
                if ((object.ReferenceEquals(this.AcronymField, value) != true)) {
                    this.AcronymField = value;
                    this.RaisePropertyChanged("Acronym");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AdapterID {
            get {
                return this.AdapterIDField;
            }
            set {
                if ((this.AdapterIDField.Equals(value) != true)) {
                    this.AdapterIDField = value;
                    this.RaisePropertyChanged("AdapterID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AnalogDataFormat {
            get {
                return this.AnalogDataFormatField;
            }
            set {
                if ((object.ReferenceEquals(this.AnalogDataFormatField, value) != true)) {
                    this.AnalogDataFormatField = value;
                    this.RaisePropertyChanged("AnalogDataFormat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BpaAcronym {
            get {
                return this.BpaAcronymField;
            }
            set {
                if ((object.ReferenceEquals(this.BpaAcronymField, value) != true)) {
                    this.BpaAcronymField = value;
                    this.RaisePropertyChanged("BpaAcronym");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CoordinateFormat {
            get {
                return this.CoordinateFormatField;
            }
            set {
                if ((object.ReferenceEquals(this.CoordinateFormatField, value) != true)) {
                    this.CoordinateFormatField = value;
                    this.RaisePropertyChanged("CoordinateFormat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Enabled {
            get {
                return this.EnabledField;
            }
            set {
                if ((this.EnabledField.Equals(value) != true)) {
                    this.EnabledField = value;
                    this.RaisePropertyChanged("Enabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FrequencyDataFormat {
            get {
                return this.FrequencyDataFormatField;
            }
            set {
                if ((object.ReferenceEquals(this.FrequencyDataFormatField, value) != true)) {
                    this.FrequencyDataFormatField = value;
                    this.RaisePropertyChanged("FrequencyDataFormat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdCode {
            get {
                return this.IdCodeField;
            }
            set {
                if ((this.IdCodeField.Equals(value) != true)) {
                    this.IdCodeField = value;
                    this.RaisePropertyChanged("IdCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LoadOrder {
            get {
                return this.LoadOrderField;
            }
            set {
                if ((this.LoadOrderField.Equals(value) != true)) {
                    this.LoadOrderField = value;
                    this.RaisePropertyChanged("LoadOrder");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NodeID {
            get {
                return this.NodeIDField;
            }
            set {
                if ((object.ReferenceEquals(this.NodeIDField, value) != true)) {
                    this.NodeIDField = value;
                    this.RaisePropertyChanged("NodeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhasorDataFormat {
            get {
                return this.PhasorDataFormatField;
            }
            set {
                if ((object.ReferenceEquals(this.PhasorDataFormatField, value) != true)) {
                    this.PhasorDataFormatField = value;
                    this.RaisePropertyChanged("PhasorDataFormat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Virtual {
            get {
                return this.VirtualField;
            }
            set {
                if ((this.VirtualField.Equals(value) != true)) {
                    this.VirtualField = value;
                    this.RaisePropertyChanged("Virtual");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OutputStreamMeasurement", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.Entities")]
    public partial class OutputStreamMeasurement : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int AdapterIDField;
        
        private string HistorianAcronymField;
        
        private System.Nullable<int> HistorianIDField;
        
        private int IDField;
        
        private string NodeIDField;
        
        private int PointIDField;
        
        private string SignalReferenceField;
        
        private string SourcePointTagField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AdapterID {
            get {
                return this.AdapterIDField;
            }
            set {
                if ((this.AdapterIDField.Equals(value) != true)) {
                    this.AdapterIDField = value;
                    this.RaisePropertyChanged("AdapterID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HistorianAcronym {
            get {
                return this.HistorianAcronymField;
            }
            set {
                if ((object.ReferenceEquals(this.HistorianAcronymField, value) != true)) {
                    this.HistorianAcronymField = value;
                    this.RaisePropertyChanged("HistorianAcronym");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> HistorianID {
            get {
                return this.HistorianIDField;
            }
            set {
                if ((this.HistorianIDField.Equals(value) != true)) {
                    this.HistorianIDField = value;
                    this.RaisePropertyChanged("HistorianID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NodeID {
            get {
                return this.NodeIDField;
            }
            set {
                if ((object.ReferenceEquals(this.NodeIDField, value) != true)) {
                    this.NodeIDField = value;
                    this.RaisePropertyChanged("NodeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PointID {
            get {
                return this.PointIDField;
            }
            set {
                if ((this.PointIDField.Equals(value) != true)) {
                    this.PointIDField = value;
                    this.RaisePropertyChanged("PointID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SignalReference {
            get {
                return this.SignalReferenceField;
            }
            set {
                if ((object.ReferenceEquals(this.SignalReferenceField, value) != true)) {
                    this.SignalReferenceField = value;
                    this.RaisePropertyChanged("SignalReference");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourcePointTag {
            get {
                return this.SourcePointTagField;
            }
            set {
                if ((object.ReferenceEquals(this.SourcePointTagField, value) != true)) {
                    this.SourcePointTagField = value;
                    this.RaisePropertyChanged("SourcePointTag");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Node", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.Entities")]
    public partial class Node : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Nullable<int> CompanyIDField;
        
        private string CompanyNameField;
        
        private string DescriptionField;
        
        private bool EnabledField;
        
        private string IDField;
        
        private string ImageField;
        
        private System.Nullable<decimal> LatitudeField;
        
        private int LoadOrderField;
        
        private System.Nullable<decimal> LongitudeField;
        
        private bool MasterField;
        
        private string NameField;
        
        private string RealTimeStatisticServiceUrlField;
        
        private string RemoteStatusServiceUrlField;
        
        private string TimeSeriesDataServiceUrlField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CompanyID {
            get {
                return this.CompanyIDField;
            }
            set {
                if ((this.CompanyIDField.Equals(value) != true)) {
                    this.CompanyIDField = value;
                    this.RaisePropertyChanged("CompanyID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompanyName {
            get {
                return this.CompanyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyNameField, value) != true)) {
                    this.CompanyNameField = value;
                    this.RaisePropertyChanged("CompanyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Enabled {
            get {
                return this.EnabledField;
            }
            set {
                if ((this.EnabledField.Equals(value) != true)) {
                    this.EnabledField = value;
                    this.RaisePropertyChanged("Enabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ID {
            get {
                return this.IDField;
            }
            set {
                if ((object.ReferenceEquals(this.IDField, value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Image {
            get {
                return this.ImageField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageField, value) != true)) {
                    this.ImageField = value;
                    this.RaisePropertyChanged("Image");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> Latitude {
            get {
                return this.LatitudeField;
            }
            set {
                if ((this.LatitudeField.Equals(value) != true)) {
                    this.LatitudeField = value;
                    this.RaisePropertyChanged("Latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LoadOrder {
            get {
                return this.LoadOrderField;
            }
            set {
                if ((this.LoadOrderField.Equals(value) != true)) {
                    this.LoadOrderField = value;
                    this.RaisePropertyChanged("LoadOrder");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> Longitude {
            get {
                return this.LongitudeField;
            }
            set {
                if ((this.LongitudeField.Equals(value) != true)) {
                    this.LongitudeField = value;
                    this.RaisePropertyChanged("Longitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Master {
            get {
                return this.MasterField;
            }
            set {
                if ((this.MasterField.Equals(value) != true)) {
                    this.MasterField = value;
                    this.RaisePropertyChanged("Master");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RealTimeStatisticServiceUrl {
            get {
                return this.RealTimeStatisticServiceUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.RealTimeStatisticServiceUrlField, value) != true)) {
                    this.RealTimeStatisticServiceUrlField = value;
                    this.RaisePropertyChanged("RealTimeStatisticServiceUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RemoteStatusServiceUrl {
            get {
                return this.RemoteStatusServiceUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.RemoteStatusServiceUrlField, value) != true)) {
                    this.RemoteStatusServiceUrlField = value;
                    this.RaisePropertyChanged("RemoteStatusServiceUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TimeSeriesDataServiceUrl {
            get {
                return this.TimeSeriesDataServiceUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.TimeSeriesDataServiceUrlField, value) != true)) {
                    this.TimeSeriesDataServiceUrlField = value;
                    this.RaisePropertyChanged("TimeSeriesDataServiceUrl");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Company", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.Entities")]
    public partial class Company : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string AcronymField;
        
        private int IDField;
        
        private int LoadOrderField;
        
        private string MapAcronymField;
        
        private string NameField;
        
        private string URLField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Acronym {
            get {
                return this.AcronymField;
            }
            set {
                if ((object.ReferenceEquals(this.AcronymField, value) != true)) {
                    this.AcronymField = value;
                    this.RaisePropertyChanged("Acronym");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LoadOrder {
            get {
                return this.LoadOrderField;
            }
            set {
                if ((this.LoadOrderField.Equals(value) != true)) {
                    this.LoadOrderField = value;
                    this.RaisePropertyChanged("LoadOrder");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MapAcronym {
            get {
                return this.MapAcronymField;
            }
            set {
                if ((object.ReferenceEquals(this.MapAcronymField, value) != true)) {
                    this.MapAcronymField = value;
                    this.RaisePropertyChanged("MapAcronym");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string URL {
            get {
                return this.URLField;
            }
            set {
                if ((object.ReferenceEquals(this.URLField, value) != true)) {
                    this.URLField = value;
                    this.RaisePropertyChanged("URL");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Historian", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.Entities")]
    public partial class Historian : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string AcronymField;
        
        private string AssemblyNameField;
        
        private string ConnectionStringField;
        
        private string DescriptionField;
        
        private bool EnabledField;
        
        private int IDField;
        
        private bool IsLocalField;
        
        private int LoadOrderField;
        
        private int MeasurementReportingIntervalField;
        
        private string NameField;
        
        private string NodeIDField;
        
        private string NodeNameField;
        
        private string TypeNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Acronym {
            get {
                return this.AcronymField;
            }
            set {
                if ((object.ReferenceEquals(this.AcronymField, value) != true)) {
                    this.AcronymField = value;
                    this.RaisePropertyChanged("Acronym");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AssemblyName {
            get {
                return this.AssemblyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AssemblyNameField, value) != true)) {
                    this.AssemblyNameField = value;
                    this.RaisePropertyChanged("AssemblyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ConnectionString {
            get {
                return this.ConnectionStringField;
            }
            set {
                if ((object.ReferenceEquals(this.ConnectionStringField, value) != true)) {
                    this.ConnectionStringField = value;
                    this.RaisePropertyChanged("ConnectionString");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Enabled {
            get {
                return this.EnabledField;
            }
            set {
                if ((this.EnabledField.Equals(value) != true)) {
                    this.EnabledField = value;
                    this.RaisePropertyChanged("Enabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsLocal {
            get {
                return this.IsLocalField;
            }
            set {
                if ((this.IsLocalField.Equals(value) != true)) {
                    this.IsLocalField = value;
                    this.RaisePropertyChanged("IsLocal");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LoadOrder {
            get {
                return this.LoadOrderField;
            }
            set {
                if ((this.LoadOrderField.Equals(value) != true)) {
                    this.LoadOrderField = value;
                    this.RaisePropertyChanged("LoadOrder");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MeasurementReportingInterval {
            get {
                return this.MeasurementReportingIntervalField;
            }
            set {
                if ((this.MeasurementReportingIntervalField.Equals(value) != true)) {
                    this.MeasurementReportingIntervalField = value;
                    this.RaisePropertyChanged("MeasurementReportingInterval");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NodeID {
            get {
                return this.NodeIDField;
            }
            set {
                if ((object.ReferenceEquals(this.NodeIDField, value) != true)) {
                    this.NodeIDField = value;
                    this.RaisePropertyChanged("NodeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NodeName {
            get {
                return this.NodeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.NodeNameField, value) != true)) {
                    this.NodeNameField = value;
                    this.RaisePropertyChanged("NodeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TypeName {
            get {
                return this.TypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeNameField, value) != true)) {
                    this.TypeNameField = value;
                    this.RaisePropertyChanged("TypeName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Vendor", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.Entities")]
    public partial class Vendor : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string AcronymField;
        
        private string ContactEmailField;
        
        private int IDField;
        
        private string NameField;
        
        private string PhoneNumberField;
        
        private string URLField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Acronym {
            get {
                return this.AcronymField;
            }
            set {
                if ((object.ReferenceEquals(this.AcronymField, value) != true)) {
                    this.AcronymField = value;
                    this.RaisePropertyChanged("Acronym");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ContactEmail {
            get {
                return this.ContactEmailField;
            }
            set {
                if ((object.ReferenceEquals(this.ContactEmailField, value) != true)) {
                    this.ContactEmailField = value;
                    this.RaisePropertyChanged("ContactEmail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhoneNumber {
            get {
                return this.PhoneNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneNumberField, value) != true)) {
                    this.PhoneNumberField = value;
                    this.RaisePropertyChanged("PhoneNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string URL {
            get {
                return this.URLField;
            }
            set {
                if ((object.ReferenceEquals(this.URLField, value) != true)) {
                    this.URLField = value;
                    this.RaisePropertyChanged("URL");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VendorDevice", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.Entities")]
    public partial class VendorDevice : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DescriptionField;
        
        private int IDField;
        
        private string NameField;
        
        private string URLField;
        
        private int VendorIDField;
        
        private string VendorNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string URL {
            get {
                return this.URLField;
            }
            set {
                if ((object.ReferenceEquals(this.URLField, value) != true)) {
                    this.URLField = value;
                    this.RaisePropertyChanged("URL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int VendorID {
            get {
                return this.VendorIDField;
            }
            set {
                if ((this.VendorIDField.Equals(value) != true)) {
                    this.VendorIDField = value;
                    this.RaisePropertyChanged("VendorID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VendorName {
            get {
                return this.VendorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.VendorNameField, value) != true)) {
                    this.VendorNameField = value;
                    this.RaisePropertyChanged("VendorName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Device", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.Entities")]
    public partial class Device : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int AccessIDField;
        
        private string AcronymField;
        
        private bool AllowUseOfCachedConfigurationField;
        
        private int AllowedParsingExceptionsField;
        
        private bool AutoStartDataParsingSequenceField;
        
        private string CompanyAcronymField;
        
        private System.Nullable<int> CompanyIDField;
        
        private string CompanyNameField;
        
        private string ConnectionStringField;
        
        private string ContactListField;
        
        private System.DateTime CreatedOnField;
        
        private double DataLossIntervalField;
        
        private double DelayedConnectionIntervalField;
        
        private bool EnabledField;
        
        private System.Nullable<int> FramesPerSecondField;
        
        private string HistorianAcronymField;
        
        private System.Nullable<int> HistorianIDField;
        
        private int IDField;
        
        private System.Nullable<int> InterconnectionIDField;
        
        private string InterconnectionNameField;
        
        private bool IsConcentratorField;
        
        private System.Nullable<decimal> LatitudeField;
        
        private int LoadOrderField;
        
        private System.Nullable<decimal> LongitudeField;
        
        private System.Nullable<int> MeasuredLinesField;
        
        private int MeasurementReportingIntervalField;
        
        private string NameField;
        
        private string NodeIDField;
        
        private string NodeNameField;
        
        private string ParentAcronymField;
        
        private System.Nullable<int> ParentIDField;
        
        private double ParsingExceptionWindowField;
        
        private System.Nullable<int> ProtocolIDField;
        
        private string ProtocolNameField;
        
        private bool SkipDisableRealTimeDataField;
        
        private long TimeAdjustmentTicksField;
        
        private string TimeZoneField;
        
        private string VendorAcronymField;
        
        private System.Nullable<int> VendorDeviceIDField;
        
        private string VendorDeviceNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AccessID {
            get {
                return this.AccessIDField;
            }
            set {
                if ((this.AccessIDField.Equals(value) != true)) {
                    this.AccessIDField = value;
                    this.RaisePropertyChanged("AccessID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Acronym {
            get {
                return this.AcronymField;
            }
            set {
                if ((object.ReferenceEquals(this.AcronymField, value) != true)) {
                    this.AcronymField = value;
                    this.RaisePropertyChanged("Acronym");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AllowUseOfCachedConfiguration {
            get {
                return this.AllowUseOfCachedConfigurationField;
            }
            set {
                if ((this.AllowUseOfCachedConfigurationField.Equals(value) != true)) {
                    this.AllowUseOfCachedConfigurationField = value;
                    this.RaisePropertyChanged("AllowUseOfCachedConfiguration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AllowedParsingExceptions {
            get {
                return this.AllowedParsingExceptionsField;
            }
            set {
                if ((this.AllowedParsingExceptionsField.Equals(value) != true)) {
                    this.AllowedParsingExceptionsField = value;
                    this.RaisePropertyChanged("AllowedParsingExceptions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AutoStartDataParsingSequence {
            get {
                return this.AutoStartDataParsingSequenceField;
            }
            set {
                if ((this.AutoStartDataParsingSequenceField.Equals(value) != true)) {
                    this.AutoStartDataParsingSequenceField = value;
                    this.RaisePropertyChanged("AutoStartDataParsingSequence");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompanyAcronym {
            get {
                return this.CompanyAcronymField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyAcronymField, value) != true)) {
                    this.CompanyAcronymField = value;
                    this.RaisePropertyChanged("CompanyAcronym");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CompanyID {
            get {
                return this.CompanyIDField;
            }
            set {
                if ((this.CompanyIDField.Equals(value) != true)) {
                    this.CompanyIDField = value;
                    this.RaisePropertyChanged("CompanyID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompanyName {
            get {
                return this.CompanyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyNameField, value) != true)) {
                    this.CompanyNameField = value;
                    this.RaisePropertyChanged("CompanyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ConnectionString {
            get {
                return this.ConnectionStringField;
            }
            set {
                if ((object.ReferenceEquals(this.ConnectionStringField, value) != true)) {
                    this.ConnectionStringField = value;
                    this.RaisePropertyChanged("ConnectionString");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ContactList {
            get {
                return this.ContactListField;
            }
            set {
                if ((object.ReferenceEquals(this.ContactListField, value) != true)) {
                    this.ContactListField = value;
                    this.RaisePropertyChanged("ContactList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreatedOn {
            get {
                return this.CreatedOnField;
            }
            set {
                if ((this.CreatedOnField.Equals(value) != true)) {
                    this.CreatedOnField = value;
                    this.RaisePropertyChanged("CreatedOn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double DataLossInterval {
            get {
                return this.DataLossIntervalField;
            }
            set {
                if ((this.DataLossIntervalField.Equals(value) != true)) {
                    this.DataLossIntervalField = value;
                    this.RaisePropertyChanged("DataLossInterval");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double DelayedConnectionInterval {
            get {
                return this.DelayedConnectionIntervalField;
            }
            set {
                if ((this.DelayedConnectionIntervalField.Equals(value) != true)) {
                    this.DelayedConnectionIntervalField = value;
                    this.RaisePropertyChanged("DelayedConnectionInterval");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Enabled {
            get {
                return this.EnabledField;
            }
            set {
                if ((this.EnabledField.Equals(value) != true)) {
                    this.EnabledField = value;
                    this.RaisePropertyChanged("Enabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> FramesPerSecond {
            get {
                return this.FramesPerSecondField;
            }
            set {
                if ((this.FramesPerSecondField.Equals(value) != true)) {
                    this.FramesPerSecondField = value;
                    this.RaisePropertyChanged("FramesPerSecond");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HistorianAcronym {
            get {
                return this.HistorianAcronymField;
            }
            set {
                if ((object.ReferenceEquals(this.HistorianAcronymField, value) != true)) {
                    this.HistorianAcronymField = value;
                    this.RaisePropertyChanged("HistorianAcronym");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> HistorianID {
            get {
                return this.HistorianIDField;
            }
            set {
                if ((this.HistorianIDField.Equals(value) != true)) {
                    this.HistorianIDField = value;
                    this.RaisePropertyChanged("HistorianID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> InterconnectionID {
            get {
                return this.InterconnectionIDField;
            }
            set {
                if ((this.InterconnectionIDField.Equals(value) != true)) {
                    this.InterconnectionIDField = value;
                    this.RaisePropertyChanged("InterconnectionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InterconnectionName {
            get {
                return this.InterconnectionNameField;
            }
            set {
                if ((object.ReferenceEquals(this.InterconnectionNameField, value) != true)) {
                    this.InterconnectionNameField = value;
                    this.RaisePropertyChanged("InterconnectionName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsConcentrator {
            get {
                return this.IsConcentratorField;
            }
            set {
                if ((this.IsConcentratorField.Equals(value) != true)) {
                    this.IsConcentratorField = value;
                    this.RaisePropertyChanged("IsConcentrator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> Latitude {
            get {
                return this.LatitudeField;
            }
            set {
                if ((this.LatitudeField.Equals(value) != true)) {
                    this.LatitudeField = value;
                    this.RaisePropertyChanged("Latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LoadOrder {
            get {
                return this.LoadOrderField;
            }
            set {
                if ((this.LoadOrderField.Equals(value) != true)) {
                    this.LoadOrderField = value;
                    this.RaisePropertyChanged("LoadOrder");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> Longitude {
            get {
                return this.LongitudeField;
            }
            set {
                if ((this.LongitudeField.Equals(value) != true)) {
                    this.LongitudeField = value;
                    this.RaisePropertyChanged("Longitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> MeasuredLines {
            get {
                return this.MeasuredLinesField;
            }
            set {
                if ((this.MeasuredLinesField.Equals(value) != true)) {
                    this.MeasuredLinesField = value;
                    this.RaisePropertyChanged("MeasuredLines");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MeasurementReportingInterval {
            get {
                return this.MeasurementReportingIntervalField;
            }
            set {
                if ((this.MeasurementReportingIntervalField.Equals(value) != true)) {
                    this.MeasurementReportingIntervalField = value;
                    this.RaisePropertyChanged("MeasurementReportingInterval");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NodeID {
            get {
                return this.NodeIDField;
            }
            set {
                if ((object.ReferenceEquals(this.NodeIDField, value) != true)) {
                    this.NodeIDField = value;
                    this.RaisePropertyChanged("NodeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NodeName {
            get {
                return this.NodeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.NodeNameField, value) != true)) {
                    this.NodeNameField = value;
                    this.RaisePropertyChanged("NodeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParentAcronym {
            get {
                return this.ParentAcronymField;
            }
            set {
                if ((object.ReferenceEquals(this.ParentAcronymField, value) != true)) {
                    this.ParentAcronymField = value;
                    this.RaisePropertyChanged("ParentAcronym");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ParentID {
            get {
                return this.ParentIDField;
            }
            set {
                if ((this.ParentIDField.Equals(value) != true)) {
                    this.ParentIDField = value;
                    this.RaisePropertyChanged("ParentID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ParsingExceptionWindow {
            get {
                return this.ParsingExceptionWindowField;
            }
            set {
                if ((this.ParsingExceptionWindowField.Equals(value) != true)) {
                    this.ParsingExceptionWindowField = value;
                    this.RaisePropertyChanged("ParsingExceptionWindow");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ProtocolID {
            get {
                return this.ProtocolIDField;
            }
            set {
                if ((this.ProtocolIDField.Equals(value) != true)) {
                    this.ProtocolIDField = value;
                    this.RaisePropertyChanged("ProtocolID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProtocolName {
            get {
                return this.ProtocolNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProtocolNameField, value) != true)) {
                    this.ProtocolNameField = value;
                    this.RaisePropertyChanged("ProtocolName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool SkipDisableRealTimeData {
            get {
                return this.SkipDisableRealTimeDataField;
            }
            set {
                if ((this.SkipDisableRealTimeDataField.Equals(value) != true)) {
                    this.SkipDisableRealTimeDataField = value;
                    this.RaisePropertyChanged("SkipDisableRealTimeData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long TimeAdjustmentTicks {
            get {
                return this.TimeAdjustmentTicksField;
            }
            set {
                if ((this.TimeAdjustmentTicksField.Equals(value) != true)) {
                    this.TimeAdjustmentTicksField = value;
                    this.RaisePropertyChanged("TimeAdjustmentTicks");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TimeZone {
            get {
                return this.TimeZoneField;
            }
            set {
                if ((object.ReferenceEquals(this.TimeZoneField, value) != true)) {
                    this.TimeZoneField = value;
                    this.RaisePropertyChanged("TimeZone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VendorAcronym {
            get {
                return this.VendorAcronymField;
            }
            set {
                if ((object.ReferenceEquals(this.VendorAcronymField, value) != true)) {
                    this.VendorAcronymField = value;
                    this.RaisePropertyChanged("VendorAcronym");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> VendorDeviceID {
            get {
                return this.VendorDeviceIDField;
            }
            set {
                if ((this.VendorDeviceIDField.Equals(value) != true)) {
                    this.VendorDeviceIDField = value;
                    this.RaisePropertyChanged("VendorDeviceID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VendorDeviceName {
            get {
                return this.VendorDeviceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.VendorDeviceNameField, value) != true)) {
                    this.VendorDeviceNameField = value;
                    this.RaisePropertyChanged("VendorDeviceName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DeviceType", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.Entities")]
    public enum DeviceType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Concentrator = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NonConcentrator = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        All = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Phasor", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.Entities")]
    public partial class Phasor : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Nullable<int> DestinationPhasorIDField;
        
        private string DestinationPhasorLabelField;
        
        private string DeviceAcronymField;
        
        private int DeviceIDField;
        
        private int IDField;
        
        private string LabelField;
        
        private string PhaseField;
        
        private string PhaseTypeField;
        
        private string PhasorTypeField;
        
        private int SourceIndexField;
        
        private string TypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> DestinationPhasorID {
            get {
                return this.DestinationPhasorIDField;
            }
            set {
                if ((this.DestinationPhasorIDField.Equals(value) != true)) {
                    this.DestinationPhasorIDField = value;
                    this.RaisePropertyChanged("DestinationPhasorID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DestinationPhasorLabel {
            get {
                return this.DestinationPhasorLabelField;
            }
            set {
                if ((object.ReferenceEquals(this.DestinationPhasorLabelField, value) != true)) {
                    this.DestinationPhasorLabelField = value;
                    this.RaisePropertyChanged("DestinationPhasorLabel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeviceAcronym {
            get {
                return this.DeviceAcronymField;
            }
            set {
                if ((object.ReferenceEquals(this.DeviceAcronymField, value) != true)) {
                    this.DeviceAcronymField = value;
                    this.RaisePropertyChanged("DeviceAcronym");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DeviceID {
            get {
                return this.DeviceIDField;
            }
            set {
                if ((this.DeviceIDField.Equals(value) != true)) {
                    this.DeviceIDField = value;
                    this.RaisePropertyChanged("DeviceID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Label {
            get {
                return this.LabelField;
            }
            set {
                if ((object.ReferenceEquals(this.LabelField, value) != true)) {
                    this.LabelField = value;
                    this.RaisePropertyChanged("Label");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Phase {
            get {
                return this.PhaseField;
            }
            set {
                if ((object.ReferenceEquals(this.PhaseField, value) != true)) {
                    this.PhaseField = value;
                    this.RaisePropertyChanged("Phase");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhaseType {
            get {
                return this.PhaseTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.PhaseTypeField, value) != true)) {
                    this.PhaseTypeField = value;
                    this.RaisePropertyChanged("PhaseType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhasorType {
            get {
                return this.PhasorTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.PhasorTypeField, value) != true)) {
                    this.PhasorTypeField = value;
                    this.RaisePropertyChanged("PhasorType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SourceIndex {
            get {
                return this.SourceIndexField;
            }
            set {
                if ((this.SourceIndexField.Equals(value) != true)) {
                    this.SourceIndexField = value;
                    this.RaisePropertyChanged("SourceIndex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PhasorDataServiceProxy.IPhasorDataService")]
    public interface IPhasorDataService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/SaveOutputStreamDevicePhasor", ReplyAction="http://tempuri.org/IPhasorDataService/SaveOutputStreamDevicePhasorResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/SaveOutputStreamDevicePhasorCustomServiceFa" +
            "ultFault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginSaveOutputStreamDevicePhasor(openPDCManager.PhasorDataServiceProxy.OutputStreamDevicePhasor outputStreamDevicePhasor, bool isNew, System.AsyncCallback callback, object asyncState);
        
        string EndSaveOutputStreamDevicePhasor(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetOutputStreamDeviceAnalogList", ReplyAction="http://tempuri.org/IPhasorDataService/GetOutputStreamDeviceAnalogListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/GetOutputStreamDeviceAnalogListCustomServic" +
            "eFaultFault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginGetOutputStreamDeviceAnalogList(int outputStreamDeviceID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OutputStreamDeviceAnalog> EndGetOutputStreamDeviceAnalogList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/SaveOutputStreamDeviceAnalog", ReplyAction="http://tempuri.org/IPhasorDataService/SaveOutputStreamDeviceAnalogResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/SaveOutputStreamDeviceAnalogCustomServiceFa" +
            "ultFault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginSaveOutputStreamDeviceAnalog(openPDCManager.PhasorDataServiceProxy.OutputStreamDeviceAnalog outputStreamDeviceAnalog, bool isNew, System.AsyncCallback callback, object asyncState);
        
        string EndSaveOutputStreamDeviceAnalog(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetOutputStreamDeviceDigitalList", ReplyAction="http://tempuri.org/IPhasorDataService/GetOutputStreamDeviceDigitalListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/GetOutputStreamDeviceDigitalListCustomServi" +
            "ceFaultFault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginGetOutputStreamDeviceDigitalList(int outputStreamDeviceID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OutputStreamDeviceDigital> EndGetOutputStreamDeviceDigitalList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/SaveOutputStreamDeviceDigital", ReplyAction="http://tempuri.org/IPhasorDataService/SaveOutputStreamDeviceDigitalResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/SaveOutputStreamDeviceDigitalCustomServiceF" +
            "aultFault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginSaveOutputStreamDeviceDigital(openPDCManager.PhasorDataServiceProxy.OutputStreamDeviceDigital outputStreamDeviceDigital, bool isNew, System.AsyncCallback callback, object asyncState);
        
        string EndSaveOutputStreamDeviceDigital(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetDeviceMeasurementData", ReplyAction="http://tempuri.org/IPhasorDataService/GetDeviceMeasurementDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/GetDeviceMeasurementDataCustomServiceFaultF" +
            "ault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginGetDeviceMeasurementData(string nodeID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.DeviceMeasurementData> EndGetDeviceMeasurementData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetTimeZones", ReplyAction="http://tempuri.org/IPhasorDataService/GetTimeZonesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/GetTimeZonesCustomServiceFaultFault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginGetTimeZones(bool isOptional, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.Dictionary<string, string> EndGetTimeZones(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetMapData", ReplyAction="http://tempuri.org/IPhasorDataService/GetMapDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/GetMapDataCustomServiceFaultFault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginGetMapData(openPDCManager.PhasorDataServiceProxy.MapType mapType, string nodeID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.MapData> EndGetMapData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetConnectionSettings", ReplyAction="http://tempuri.org/IPhasorDataService/GetConnectionSettingsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/GetConnectionSettingsCustomServiceFaultFaul" +
            "t", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginGetConnectionSettings(byte[] inputStream, System.AsyncCallback callback, object asyncState);
        
        openPDCManager.PhasorDataServiceProxy.ConnectionSettings EndGetConnectionSettings(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetWizardConfigurationInfo", ReplyAction="http://tempuri.org/IPhasorDataService/GetWizardConfigurationInfoResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/GetWizardConfigurationInfoCustomServiceFaul" +
            "tFault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginGetWizardConfigurationInfo(byte[] inputStream, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.WizardDeviceInfo> EndGetWizardConfigurationInfo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/RetrieveConfigurationFrame", ReplyAction="http://tempuri.org/IPhasorDataService/RetrieveConfigurationFrameResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/RetrieveConfigurationFrameCustomServiceFaul" +
            "tFault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginRetrieveConfigurationFrame(string nodeConnectionString, string deviceConnectionString, int protocolID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.WizardDeviceInfo> EndRetrieveConfigurationFrame(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/SaveWizardConfigurationInfo", ReplyAction="http://tempuri.org/IPhasorDataService/SaveWizardConfigurationInfoResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/SaveWizardConfigurationInfoCustomServiceFau" +
            "ltFault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginSaveWizardConfigurationInfo(string nodeID, System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.WizardDeviceInfo> wizardDeviceInfoList, string connectionString, System.Nullable<int> protocolID, System.Nullable<int> companyID, System.Nullable<int> historianID, System.Nullable<int> interconnectionID, System.Nullable<int> parentID, bool skipDisableRealTimeData, System.AsyncCallback callback, object asyncState);
        
        string EndSaveWizardConfigurationInfo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetExecutingAssemblyPath", ReplyAction="http://tempuri.org/IPhasorDataService/GetExecutingAssemblyPathResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/GetExecutingAssemblyPathCustomServiceFaultF" +
            "ault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginGetExecutingAssemblyPath(System.AsyncCallback callback, object asyncState);
        
        string EndGetExecutingAssemblyPath(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/SaveIniFile", ReplyAction="http://tempuri.org/IPhasorDataService/SaveIniFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/SaveIniFileCustomServiceFaultFault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginSaveIniFile(byte[] input, System.AsyncCallback callback, object asyncState);
        
        string EndSaveIniFile(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetStopBits", ReplyAction="http://tempuri.org/IPhasorDataService/GetStopBitsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/GetStopBitsCustomServiceFaultFault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginGetStopBits(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<string> EndGetStopBits(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetParities", ReplyAction="http://tempuri.org/IPhasorDataService/GetParitiesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/GetParitiesCustomServiceFaultFault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginGetParities(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<string> EndGetParities(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetStatisticMeasurementData", ReplyAction="http://tempuri.org/IPhasorDataService/GetStatisticMeasurementDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/GetStatisticMeasurementDataCustomServiceFau" +
            "ltFault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginGetStatisticMeasurementData(string nodeID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.StatisticMeasurementData> EndGetStatisticMeasurementData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetRuntimeID", ReplyAction="http://tempuri.org/IPhasorDataService/GetRuntimeIDResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/GetRuntimeIDCustomServiceFaultFault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginGetRuntimeID(string sourceTable, int sourceID, System.AsyncCallback callback, object asyncState);
        
        string EndGetRuntimeID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetMeasurementList", ReplyAction="http://tempuri.org/IPhasorDataService/GetMeasurementListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/GetMeasurementListCustomServiceFaultFault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginGetMeasurementList(string nodeID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Measurement> EndGetMeasurementList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetFilteredMeasurementsByDevice", ReplyAction="http://tempuri.org/IPhasorDataService/GetFilteredMeasurementsByDeviceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/GetFilteredMeasurementsByDeviceCustomServic" +
            "eFaultFault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginGetFilteredMeasurementsByDevice(int deviceID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Measurement> EndGetFilteredMeasurementsByDevice(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/SaveMeasurement", ReplyAction="http://tempuri.org/IPhasorDataService/SaveMeasurementResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/SaveMeasurementCustomServiceFaultFault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginSaveMeasurement(openPDCManager.PhasorDataServiceProxy.Measurement measurement, bool isNew, System.AsyncCallback callback, object asyncState);
        
        string EndSaveMeasurement(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetMeasurementsByDevice", ReplyAction="http://tempuri.org/IPhasorDataService/GetMeasurementsByDeviceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/GetMeasurementsByDeviceCustomServiceFaultFa" +
            "ult", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginGetMeasurementsByDevice(int deviceID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Measurement> EndGetMeasurementsByDevice(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetMeasurementsForOutputStream", ReplyAction="http://tempuri.org/IPhasorDataService/GetMeasurementsForOutputStreamResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/GetMeasurementsForOutputStreamCustomService" +
            "FaultFault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginGetMeasurementsForOutputStream(string nodeID, int outputStreamID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Measurement> EndGetMeasurementsForOutputStream(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetOtherDeviceList", ReplyAction="http://tempuri.org/IPhasorDataService/GetOtherDeviceListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/GetOtherDeviceListCustomServiceFaultFault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginGetOtherDeviceList(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OtherDevice> EndGetOtherDeviceList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/SaveOtherDevice", ReplyAction="http://tempuri.org/IPhasorDataService/SaveOtherDeviceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/SaveOtherDeviceCustomServiceFaultFault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginSaveOtherDevice(openPDCManager.PhasorDataServiceProxy.OtherDevice otherDevice, bool isNew, System.AsyncCallback callback, object asyncState);
        
        string EndSaveOtherDevice(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetOtherDeviceByDeviceID", ReplyAction="http://tempuri.org/IPhasorDataService/GetOtherDeviceByDeviceIDResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/GetOtherDeviceByDeviceIDCustomServiceFaultF" +
            "ault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginGetOtherDeviceByDeviceID(int deviceID, System.AsyncCallback callback, object asyncState);
        
        openPDCManager.PhasorDataServiceProxy.OtherDevice EndGetOtherDeviceByDeviceID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetInterconnections", ReplyAction="http://tempuri.org/IPhasorDataService/GetInterconnectionsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/GetInterconnectionsCustomServiceFaultFault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginGetInterconnections(bool isOptional, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.Dictionary<int, string> EndGetInterconnections(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetProtocols", ReplyAction="http://tempuri.org/IPhasorDataService/GetProtocolsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/GetProtocolsCustomServiceFaultFault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginGetProtocols(bool isOptional, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.Dictionary<int, string> EndGetProtocols(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetProtocolIDByAcronym", ReplyAction="http://tempuri.org/IPhasorDataService/GetProtocolIDByAcronymResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/GetProtocolIDByAcronymCustomServiceFaultFau" +
            "lt", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginGetProtocolIDByAcronym(string acronym, System.AsyncCallback callback, object asyncState);
        
        int EndGetProtocolIDByAcronym(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetSignalTypes", ReplyAction="http://tempuri.org/IPhasorDataService/GetSignalTypesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/GetSignalTypesCustomServiceFaultFault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginGetSignalTypes(bool isOptional, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.Dictionary<int, string> EndGetSignalTypes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetCalculatedMeasurementList", ReplyAction="http://tempuri.org/IPhasorDataService/GetCalculatedMeasurementListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/GetCalculatedMeasurementListCustomServiceFa" +
            "ultFault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginGetCalculatedMeasurementList(string nodeID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.CalculatedMeasurement> EndGetCalculatedMeasurementList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/SaveCalculatedMeasurement", ReplyAction="http://tempuri.org/IPhasorDataService/SaveCalculatedMeasurementResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/SaveCalculatedMeasurementCustomServiceFault" +
            "Fault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginSaveCalculatedMeasurement(openPDCManager.PhasorDataServiceProxy.CalculatedMeasurement calculatedMeasurement, bool isNew, System.AsyncCallback callback, object asyncState);
        
        string EndSaveCalculatedMeasurement(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetAdapterList", ReplyAction="http://tempuri.org/IPhasorDataService/GetAdapterListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/GetAdapterListCustomServiceFaultFault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginGetAdapterList(bool enabledOnly, openPDCManager.PhasorDataServiceProxy.AdapterType adapterType, string nodeID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Adapter> EndGetAdapterList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/SaveAdapter", ReplyAction="http://tempuri.org/IPhasorDataService/SaveAdapterResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/SaveAdapterCustomServiceFaultFault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginSaveAdapter(openPDCManager.PhasorDataServiceProxy.Adapter adapter, bool isNew, System.AsyncCallback callback, object asyncState);
        
        string EndSaveAdapter(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetIaonTreeData", ReplyAction="http://tempuri.org/IPhasorDataService/GetIaonTreeDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/GetIaonTreeDataCustomServiceFaultFault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginGetIaonTreeData(string nodeID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.IaonTree> EndGetIaonTreeData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetOutputStreamList", ReplyAction="http://tempuri.org/IPhasorDataService/GetOutputStreamListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/GetOutputStreamListCustomServiceFaultFault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginGetOutputStreamList(bool enabledOnly, string nodeID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OutputStream> EndGetOutputStreamList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/SaveOutputStream", ReplyAction="http://tempuri.org/IPhasorDataService/SaveOutputStreamResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/SaveOutputStreamCustomServiceFaultFault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginSaveOutputStream(openPDCManager.PhasorDataServiceProxy.OutputStream outputStream, bool isNew, System.AsyncCallback callback, object asyncState);
        
        string EndSaveOutputStream(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/DeleteOutputStream", ReplyAction="http://tempuri.org/IPhasorDataService/DeleteOutputStreamResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/DeleteOutputStreamCustomServiceFaultFault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginDeleteOutputStream(int outputStreamID, System.AsyncCallback callback, object asyncState);
        
        string EndDeleteOutputStream(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetOutputStreamDeviceList", ReplyAction="http://tempuri.org/IPhasorDataService/GetOutputStreamDeviceListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/GetOutputStreamDeviceListCustomServiceFault" +
            "Fault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginGetOutputStreamDeviceList(int outputStreamID, bool enabledOnly, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OutputStreamDevice> EndGetOutputStreamDeviceList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/SaveOutputStreamDevice", ReplyAction="http://tempuri.org/IPhasorDataService/SaveOutputStreamDeviceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/SaveOutputStreamDeviceCustomServiceFaultFau" +
            "lt", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginSaveOutputStreamDevice(openPDCManager.PhasorDataServiceProxy.OutputStreamDevice outputStreamDevice, bool isNew, string originalAcronym, System.AsyncCallback callback, object asyncState);
        
        string EndSaveOutputStreamDevice(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/DeleteOutputStreamDevice", ReplyAction="http://tempuri.org/IPhasorDataService/DeleteOutputStreamDeviceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/DeleteOutputStreamDeviceCustomServiceFaultF" +
            "ault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginDeleteOutputStreamDevice(int outputStreamID, System.Collections.ObjectModel.ObservableCollection<string> devicesToBeDeleted, System.AsyncCallback callback, object asyncState);
        
        string EndDeleteOutputStreamDevice(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/AddDevices", ReplyAction="http://tempuri.org/IPhasorDataService/AddDevicesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/AddDevicesCustomServiceFaultFault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginAddDevices(int outputStreamID, System.Collections.Generic.Dictionary<int, string> devicesToBeAdded, bool addDigitals, bool addAnalogs, System.AsyncCallback callback, object asyncState);
        
        string EndAddDevices(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetOutputStreamMeasurementList", ReplyAction="http://tempuri.org/IPhasorDataService/GetOutputStreamMeasurementListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/GetOutputStreamMeasurementListCustomService" +
            "FaultFault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginGetOutputStreamMeasurementList(int outputStreamID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OutputStreamMeasurement> EndGetOutputStreamMeasurementList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/SaveOutputStreamMeasurement", ReplyAction="http://tempuri.org/IPhasorDataService/SaveOutputStreamMeasurementResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/SaveOutputStreamMeasurementCustomServiceFau" +
            "ltFault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginSaveOutputStreamMeasurement(openPDCManager.PhasorDataServiceProxy.OutputStreamMeasurement outputStreamMeasurement, bool isNew, System.AsyncCallback callback, object asyncState);
        
        string EndSaveOutputStreamMeasurement(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/DeleteOutputStreamMeasurement", ReplyAction="http://tempuri.org/IPhasorDataService/DeleteOutputStreamMeasurementResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/DeleteOutputStreamMeasurementCustomServiceF" +
            "aultFault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginDeleteOutputStreamMeasurement(int outputStreamMeasurementID, System.AsyncCallback callback, object asyncState);
        
        string EndDeleteOutputStreamMeasurement(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetOutputStreamDevicePhasorList", ReplyAction="http://tempuri.org/IPhasorDataService/GetOutputStreamDevicePhasorListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/GetOutputStreamDevicePhasorListCustomServic" +
            "eFaultFault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginGetOutputStreamDevicePhasorList(int outputStreamDeviceID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OutputStreamDevicePhasor> EndGetOutputStreamDevicePhasorList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetNodeList", ReplyAction="http://tempuri.org/IPhasorDataService/GetNodeListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/GetNodeListCustomServiceFaultFault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginGetNodeList(bool enabledOnly, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Node> EndGetNodeList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetNodes", ReplyAction="http://tempuri.org/IPhasorDataService/GetNodesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/GetNodesCustomServiceFaultFault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginGetNodes(bool enabledOnly, bool isOptional, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.Dictionary<string, string> EndGetNodes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/SaveNode", ReplyAction="http://tempuri.org/IPhasorDataService/SaveNodeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/SaveNodeCustomServiceFaultFault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginSaveNode(openPDCManager.PhasorDataServiceProxy.Node node, bool isNew, System.AsyncCallback callback, object asyncState);
        
        string EndSaveNode(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetNodeByID", ReplyAction="http://tempuri.org/IPhasorDataService/GetNodeByIDResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/GetNodeByIDCustomServiceFaultFault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginGetNodeByID(string id, System.AsyncCallback callback, object asyncState);
        
        openPDCManager.PhasorDataServiceProxy.Node EndGetNodeByID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetCompanyList", ReplyAction="http://tempuri.org/IPhasorDataService/GetCompanyListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/GetCompanyListCustomServiceFaultFault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginGetCompanyList(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Company> EndGetCompanyList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetCompanies", ReplyAction="http://tempuri.org/IPhasorDataService/GetCompaniesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/GetCompaniesCustomServiceFaultFault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginGetCompanies(bool isOptional, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.Dictionary<int, string> EndGetCompanies(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/SaveCompany", ReplyAction="http://tempuri.org/IPhasorDataService/SaveCompanyResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/SaveCompanyCustomServiceFaultFault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginSaveCompany(openPDCManager.PhasorDataServiceProxy.Company company, bool isNew, System.AsyncCallback callback, object asyncState);
        
        string EndSaveCompany(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetHistorianList", ReplyAction="http://tempuri.org/IPhasorDataService/GetHistorianListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/GetHistorianListCustomServiceFaultFault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginGetHistorianList(string nodeID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Historian> EndGetHistorianList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/SaveHistorian", ReplyAction="http://tempuri.org/IPhasorDataService/SaveHistorianResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/SaveHistorianCustomServiceFaultFault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginSaveHistorian(openPDCManager.PhasorDataServiceProxy.Historian historian, bool isNew, System.AsyncCallback callback, object asyncState);
        
        string EndSaveHistorian(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetHistorians", ReplyAction="http://tempuri.org/IPhasorDataService/GetHistoriansResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/GetHistoriansCustomServiceFaultFault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginGetHistorians(bool enabledOnly, bool isOptional, bool includeSTAT, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.Dictionary<int, string> EndGetHistorians(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetVendorList", ReplyAction="http://tempuri.org/IPhasorDataService/GetVendorListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/GetVendorListCustomServiceFaultFault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginGetVendorList(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Vendor> EndGetVendorList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetVendors", ReplyAction="http://tempuri.org/IPhasorDataService/GetVendorsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/GetVendorsCustomServiceFaultFault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginGetVendors(bool isOptional, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.Dictionary<int, string> EndGetVendors(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/SaveVendor", ReplyAction="http://tempuri.org/IPhasorDataService/SaveVendorResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/SaveVendorCustomServiceFaultFault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginSaveVendor(openPDCManager.PhasorDataServiceProxy.Vendor vendor, bool isNew, System.AsyncCallback callback, object asyncState);
        
        string EndSaveVendor(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetVendorDeviceList", ReplyAction="http://tempuri.org/IPhasorDataService/GetVendorDeviceListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/GetVendorDeviceListCustomServiceFaultFault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginGetVendorDeviceList(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.VendorDevice> EndGetVendorDeviceList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/SaveVendorDevice", ReplyAction="http://tempuri.org/IPhasorDataService/SaveVendorDeviceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/SaveVendorDeviceCustomServiceFaultFault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginSaveVendorDevice(openPDCManager.PhasorDataServiceProxy.VendorDevice vendorDevice, bool isNew, System.AsyncCallback callback, object asyncState);
        
        string EndSaveVendorDevice(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetVendorDevices", ReplyAction="http://tempuri.org/IPhasorDataService/GetVendorDevicesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/GetVendorDevicesCustomServiceFaultFault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginGetVendorDevices(bool isOptional, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.Dictionary<int, string> EndGetVendorDevices(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetDeviceList", ReplyAction="http://tempuri.org/IPhasorDataService/GetDeviceListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/GetDeviceListCustomServiceFaultFault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginGetDeviceList(string nodeID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Device> EndGetDeviceList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetDeviceListByParentID", ReplyAction="http://tempuri.org/IPhasorDataService/GetDeviceListByParentIDResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/GetDeviceListByParentIDCustomServiceFaultFa" +
            "ult", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginGetDeviceListByParentID(int parentID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Device> EndGetDeviceListByParentID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetDevices", ReplyAction="http://tempuri.org/IPhasorDataService/GetDevicesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/GetDevicesCustomServiceFaultFault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginGetDevices(openPDCManager.PhasorDataServiceProxy.DeviceType deviceType, string nodeID, bool isOptional, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.Dictionary<int, string> EndGetDevices(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/SaveDevice", ReplyAction="http://tempuri.org/IPhasorDataService/SaveDeviceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/SaveDeviceCustomServiceFaultFault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginSaveDevice(openPDCManager.PhasorDataServiceProxy.Device device, bool isNew, int digitalCount, int analogCount, System.AsyncCallback callback, object asyncState);
        
        string EndSaveDevice(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetDeviceByDeviceID", ReplyAction="http://tempuri.org/IPhasorDataService/GetDeviceByDeviceIDResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/GetDeviceByDeviceIDCustomServiceFaultFault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginGetDeviceByDeviceID(int deviceID, System.AsyncCallback callback, object asyncState);
        
        openPDCManager.PhasorDataServiceProxy.Device EndGetDeviceByDeviceID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetDeviceByAcronym", ReplyAction="http://tempuri.org/IPhasorDataService/GetDeviceByAcronymResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/GetDeviceByAcronymCustomServiceFaultFault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginGetDeviceByAcronym(string acronym, System.AsyncCallback callback, object asyncState);
        
        openPDCManager.PhasorDataServiceProxy.Device EndGetDeviceByAcronym(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetDevicesForOutputStream", ReplyAction="http://tempuri.org/IPhasorDataService/GetDevicesForOutputStreamResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/GetDevicesForOutputStreamCustomServiceFault" +
            "Fault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginGetDevicesForOutputStream(int outputStreamID, string nodeID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.Dictionary<int, string> EndGetDevicesForOutputStream(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetConcentratorDevice", ReplyAction="http://tempuri.org/IPhasorDataService/GetConcentratorDeviceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/GetConcentratorDeviceCustomServiceFaultFaul" +
            "t", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginGetConcentratorDevice(int deviceID, System.AsyncCallback callback, object asyncState);
        
        openPDCManager.PhasorDataServiceProxy.Device EndGetConcentratorDevice(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/DeleteDevice", ReplyAction="http://tempuri.org/IPhasorDataService/DeleteDeviceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/DeleteDeviceCustomServiceFaultFault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginDeleteDevice(int deviceID, System.AsyncCallback callback, object asyncState);
        
        string EndDeleteDevice(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetPhasorList", ReplyAction="http://tempuri.org/IPhasorDataService/GetPhasorListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/GetPhasorListCustomServiceFaultFault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginGetPhasorList(int deviceID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Phasor> EndGetPhasorList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetPhasors", ReplyAction="http://tempuri.org/IPhasorDataService/GetPhasorsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/GetPhasorsCustomServiceFaultFault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginGetPhasors(int deviceID, bool isOptional, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.Dictionary<int, string> EndGetPhasors(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/SavePhasor", ReplyAction="http://tempuri.org/IPhasorDataService/SavePhasorResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(openPDCManager.PhasorDataServiceProxy.CustomServiceFault), Action="http://tempuri.org/IPhasorDataService/SavePhasorCustomServiceFaultFault", Name="CustomServiceFault", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Data.BusinessObjects")]
        System.IAsyncResult BeginSavePhasor(openPDCManager.PhasorDataServiceProxy.Phasor phasor, bool isNew, System.AsyncCallback callback, object asyncState);
        
        string EndSavePhasor(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPhasorDataServiceChannel : openPDCManager.PhasorDataServiceProxy.IPhasorDataService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveOutputStreamDevicePhasorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveOutputStreamDevicePhasorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetOutputStreamDeviceAnalogListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetOutputStreamDeviceAnalogListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OutputStreamDeviceAnalog> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OutputStreamDeviceAnalog>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveOutputStreamDeviceAnalogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveOutputStreamDeviceAnalogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetOutputStreamDeviceDigitalListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetOutputStreamDeviceDigitalListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OutputStreamDeviceDigital> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OutputStreamDeviceDigital>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveOutputStreamDeviceDigitalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveOutputStreamDeviceDigitalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDeviceMeasurementDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDeviceMeasurementDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.DeviceMeasurementData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.DeviceMeasurementData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTimeZonesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTimeZonesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.Dictionary<string, string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.Dictionary<string, string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMapDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMapDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.MapData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.MapData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetConnectionSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetConnectionSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public openPDCManager.PhasorDataServiceProxy.ConnectionSettings Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((openPDCManager.PhasorDataServiceProxy.ConnectionSettings)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetWizardConfigurationInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetWizardConfigurationInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.WizardDeviceInfo> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.WizardDeviceInfo>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveConfigurationFrameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveConfigurationFrameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.WizardDeviceInfo> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.WizardDeviceInfo>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveWizardConfigurationInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveWizardConfigurationInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetExecutingAssemblyPathCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetExecutingAssemblyPathCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveIniFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveIniFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetStopBitsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetStopBitsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetParitiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetParitiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetStatisticMeasurementDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetStatisticMeasurementDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.StatisticMeasurementData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.StatisticMeasurementData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRuntimeIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRuntimeIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMeasurementListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMeasurementListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Measurement> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Measurement>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFilteredMeasurementsByDeviceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFilteredMeasurementsByDeviceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Measurement> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Measurement>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveMeasurementCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveMeasurementCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMeasurementsByDeviceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMeasurementsByDeviceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Measurement> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Measurement>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMeasurementsForOutputStreamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMeasurementsForOutputStreamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Measurement> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Measurement>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetOtherDeviceListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetOtherDeviceListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OtherDevice> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OtherDevice>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveOtherDeviceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveOtherDeviceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetOtherDeviceByDeviceIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetOtherDeviceByDeviceIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public openPDCManager.PhasorDataServiceProxy.OtherDevice Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((openPDCManager.PhasorDataServiceProxy.OtherDevice)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetInterconnectionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetInterconnectionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.Dictionary<int, string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.Dictionary<int, string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetProtocolsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetProtocolsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.Dictionary<int, string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.Dictionary<int, string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetProtocolIDByAcronymCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetProtocolIDByAcronymCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSignalTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSignalTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.Dictionary<int, string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.Dictionary<int, string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCalculatedMeasurementListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCalculatedMeasurementListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.CalculatedMeasurement> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.CalculatedMeasurement>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveCalculatedMeasurementCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveCalculatedMeasurementCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAdapterListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAdapterListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Adapter> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Adapter>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveAdapterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveAdapterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetIaonTreeDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetIaonTreeDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.IaonTree> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.IaonTree>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetOutputStreamListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetOutputStreamListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OutputStream> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OutputStream>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveOutputStreamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveOutputStreamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteOutputStreamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteOutputStreamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetOutputStreamDeviceListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetOutputStreamDeviceListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OutputStreamDevice> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OutputStreamDevice>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveOutputStreamDeviceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveOutputStreamDeviceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteOutputStreamDeviceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteOutputStreamDeviceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddDevicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddDevicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetOutputStreamMeasurementListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetOutputStreamMeasurementListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OutputStreamMeasurement> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OutputStreamMeasurement>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveOutputStreamMeasurementCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveOutputStreamMeasurementCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteOutputStreamMeasurementCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteOutputStreamMeasurementCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetOutputStreamDevicePhasorListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetOutputStreamDevicePhasorListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OutputStreamDevicePhasor> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OutputStreamDevicePhasor>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetNodeListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetNodeListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Node> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Node>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetNodesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetNodesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.Dictionary<string, string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.Dictionary<string, string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveNodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveNodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetNodeByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetNodeByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public openPDCManager.PhasorDataServiceProxy.Node Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((openPDCManager.PhasorDataServiceProxy.Node)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCompanyListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCompanyListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Company> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Company>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCompaniesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCompaniesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.Dictionary<int, string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.Dictionary<int, string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveCompanyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveCompanyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetHistorianListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetHistorianListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Historian> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Historian>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveHistorianCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveHistorianCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetHistoriansCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetHistoriansCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.Dictionary<int, string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.Dictionary<int, string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetVendorListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetVendorListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Vendor> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Vendor>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetVendorsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetVendorsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.Dictionary<int, string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.Dictionary<int, string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveVendorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveVendorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetVendorDeviceListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetVendorDeviceListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.VendorDevice> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.VendorDevice>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveVendorDeviceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveVendorDeviceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetVendorDevicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetVendorDevicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.Dictionary<int, string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.Dictionary<int, string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDeviceListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDeviceListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Device> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Device>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDeviceListByParentIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDeviceListByParentIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Device> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Device>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDevicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDevicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.Dictionary<int, string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.Dictionary<int, string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveDeviceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveDeviceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDeviceByDeviceIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDeviceByDeviceIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public openPDCManager.PhasorDataServiceProxy.Device Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((openPDCManager.PhasorDataServiceProxy.Device)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDeviceByAcronymCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDeviceByAcronymCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public openPDCManager.PhasorDataServiceProxy.Device Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((openPDCManager.PhasorDataServiceProxy.Device)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDevicesForOutputStreamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDevicesForOutputStreamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.Dictionary<int, string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.Dictionary<int, string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetConcentratorDeviceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetConcentratorDeviceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public openPDCManager.PhasorDataServiceProxy.Device Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((openPDCManager.PhasorDataServiceProxy.Device)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteDeviceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteDeviceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetPhasorListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetPhasorListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Phasor> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Phasor>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetPhasorsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetPhasorsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.Dictionary<int, string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.Dictionary<int, string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SavePhasorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SavePhasorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PhasorDataServiceClient : System.ServiceModel.ClientBase<openPDCManager.PhasorDataServiceProxy.IPhasorDataService>, openPDCManager.PhasorDataServiceProxy.IPhasorDataService {
        
        private BeginOperationDelegate onBeginSaveOutputStreamDevicePhasorDelegate;
        
        private EndOperationDelegate onEndSaveOutputStreamDevicePhasorDelegate;
        
        private System.Threading.SendOrPostCallback onSaveOutputStreamDevicePhasorCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetOutputStreamDeviceAnalogListDelegate;
        
        private EndOperationDelegate onEndGetOutputStreamDeviceAnalogListDelegate;
        
        private System.Threading.SendOrPostCallback onGetOutputStreamDeviceAnalogListCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveOutputStreamDeviceAnalogDelegate;
        
        private EndOperationDelegate onEndSaveOutputStreamDeviceAnalogDelegate;
        
        private System.Threading.SendOrPostCallback onSaveOutputStreamDeviceAnalogCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetOutputStreamDeviceDigitalListDelegate;
        
        private EndOperationDelegate onEndGetOutputStreamDeviceDigitalListDelegate;
        
        private System.Threading.SendOrPostCallback onGetOutputStreamDeviceDigitalListCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveOutputStreamDeviceDigitalDelegate;
        
        private EndOperationDelegate onEndSaveOutputStreamDeviceDigitalDelegate;
        
        private System.Threading.SendOrPostCallback onSaveOutputStreamDeviceDigitalCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDeviceMeasurementDataDelegate;
        
        private EndOperationDelegate onEndGetDeviceMeasurementDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetDeviceMeasurementDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTimeZonesDelegate;
        
        private EndOperationDelegate onEndGetTimeZonesDelegate;
        
        private System.Threading.SendOrPostCallback onGetTimeZonesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMapDataDelegate;
        
        private EndOperationDelegate onEndGetMapDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetMapDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetConnectionSettingsDelegate;
        
        private EndOperationDelegate onEndGetConnectionSettingsDelegate;
        
        private System.Threading.SendOrPostCallback onGetConnectionSettingsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetWizardConfigurationInfoDelegate;
        
        private EndOperationDelegate onEndGetWizardConfigurationInfoDelegate;
        
        private System.Threading.SendOrPostCallback onGetWizardConfigurationInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveConfigurationFrameDelegate;
        
        private EndOperationDelegate onEndRetrieveConfigurationFrameDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveConfigurationFrameCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveWizardConfigurationInfoDelegate;
        
        private EndOperationDelegate onEndSaveWizardConfigurationInfoDelegate;
        
        private System.Threading.SendOrPostCallback onSaveWizardConfigurationInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetExecutingAssemblyPathDelegate;
        
        private EndOperationDelegate onEndGetExecutingAssemblyPathDelegate;
        
        private System.Threading.SendOrPostCallback onGetExecutingAssemblyPathCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveIniFileDelegate;
        
        private EndOperationDelegate onEndSaveIniFileDelegate;
        
        private System.Threading.SendOrPostCallback onSaveIniFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetStopBitsDelegate;
        
        private EndOperationDelegate onEndGetStopBitsDelegate;
        
        private System.Threading.SendOrPostCallback onGetStopBitsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetParitiesDelegate;
        
        private EndOperationDelegate onEndGetParitiesDelegate;
        
        private System.Threading.SendOrPostCallback onGetParitiesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetStatisticMeasurementDataDelegate;
        
        private EndOperationDelegate onEndGetStatisticMeasurementDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetStatisticMeasurementDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRuntimeIDDelegate;
        
        private EndOperationDelegate onEndGetRuntimeIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetRuntimeIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMeasurementListDelegate;
        
        private EndOperationDelegate onEndGetMeasurementListDelegate;
        
        private System.Threading.SendOrPostCallback onGetMeasurementListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFilteredMeasurementsByDeviceDelegate;
        
        private EndOperationDelegate onEndGetFilteredMeasurementsByDeviceDelegate;
        
        private System.Threading.SendOrPostCallback onGetFilteredMeasurementsByDeviceCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveMeasurementDelegate;
        
        private EndOperationDelegate onEndSaveMeasurementDelegate;
        
        private System.Threading.SendOrPostCallback onSaveMeasurementCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMeasurementsByDeviceDelegate;
        
        private EndOperationDelegate onEndGetMeasurementsByDeviceDelegate;
        
        private System.Threading.SendOrPostCallback onGetMeasurementsByDeviceCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMeasurementsForOutputStreamDelegate;
        
        private EndOperationDelegate onEndGetMeasurementsForOutputStreamDelegate;
        
        private System.Threading.SendOrPostCallback onGetMeasurementsForOutputStreamCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetOtherDeviceListDelegate;
        
        private EndOperationDelegate onEndGetOtherDeviceListDelegate;
        
        private System.Threading.SendOrPostCallback onGetOtherDeviceListCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveOtherDeviceDelegate;
        
        private EndOperationDelegate onEndSaveOtherDeviceDelegate;
        
        private System.Threading.SendOrPostCallback onSaveOtherDeviceCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetOtherDeviceByDeviceIDDelegate;
        
        private EndOperationDelegate onEndGetOtherDeviceByDeviceIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetOtherDeviceByDeviceIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetInterconnectionsDelegate;
        
        private EndOperationDelegate onEndGetInterconnectionsDelegate;
        
        private System.Threading.SendOrPostCallback onGetInterconnectionsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetProtocolsDelegate;
        
        private EndOperationDelegate onEndGetProtocolsDelegate;
        
        private System.Threading.SendOrPostCallback onGetProtocolsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetProtocolIDByAcronymDelegate;
        
        private EndOperationDelegate onEndGetProtocolIDByAcronymDelegate;
        
        private System.Threading.SendOrPostCallback onGetProtocolIDByAcronymCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSignalTypesDelegate;
        
        private EndOperationDelegate onEndGetSignalTypesDelegate;
        
        private System.Threading.SendOrPostCallback onGetSignalTypesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCalculatedMeasurementListDelegate;
        
        private EndOperationDelegate onEndGetCalculatedMeasurementListDelegate;
        
        private System.Threading.SendOrPostCallback onGetCalculatedMeasurementListCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveCalculatedMeasurementDelegate;
        
        private EndOperationDelegate onEndSaveCalculatedMeasurementDelegate;
        
        private System.Threading.SendOrPostCallback onSaveCalculatedMeasurementCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAdapterListDelegate;
        
        private EndOperationDelegate onEndGetAdapterListDelegate;
        
        private System.Threading.SendOrPostCallback onGetAdapterListCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveAdapterDelegate;
        
        private EndOperationDelegate onEndSaveAdapterDelegate;
        
        private System.Threading.SendOrPostCallback onSaveAdapterCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetIaonTreeDataDelegate;
        
        private EndOperationDelegate onEndGetIaonTreeDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetIaonTreeDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetOutputStreamListDelegate;
        
        private EndOperationDelegate onEndGetOutputStreamListDelegate;
        
        private System.Threading.SendOrPostCallback onGetOutputStreamListCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveOutputStreamDelegate;
        
        private EndOperationDelegate onEndSaveOutputStreamDelegate;
        
        private System.Threading.SendOrPostCallback onSaveOutputStreamCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteOutputStreamDelegate;
        
        private EndOperationDelegate onEndDeleteOutputStreamDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteOutputStreamCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetOutputStreamDeviceListDelegate;
        
        private EndOperationDelegate onEndGetOutputStreamDeviceListDelegate;
        
        private System.Threading.SendOrPostCallback onGetOutputStreamDeviceListCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveOutputStreamDeviceDelegate;
        
        private EndOperationDelegate onEndSaveOutputStreamDeviceDelegate;
        
        private System.Threading.SendOrPostCallback onSaveOutputStreamDeviceCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteOutputStreamDeviceDelegate;
        
        private EndOperationDelegate onEndDeleteOutputStreamDeviceDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteOutputStreamDeviceCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddDevicesDelegate;
        
        private EndOperationDelegate onEndAddDevicesDelegate;
        
        private System.Threading.SendOrPostCallback onAddDevicesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetOutputStreamMeasurementListDelegate;
        
        private EndOperationDelegate onEndGetOutputStreamMeasurementListDelegate;
        
        private System.Threading.SendOrPostCallback onGetOutputStreamMeasurementListCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveOutputStreamMeasurementDelegate;
        
        private EndOperationDelegate onEndSaveOutputStreamMeasurementDelegate;
        
        private System.Threading.SendOrPostCallback onSaveOutputStreamMeasurementCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteOutputStreamMeasurementDelegate;
        
        private EndOperationDelegate onEndDeleteOutputStreamMeasurementDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteOutputStreamMeasurementCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetOutputStreamDevicePhasorListDelegate;
        
        private EndOperationDelegate onEndGetOutputStreamDevicePhasorListDelegate;
        
        private System.Threading.SendOrPostCallback onGetOutputStreamDevicePhasorListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetNodeListDelegate;
        
        private EndOperationDelegate onEndGetNodeListDelegate;
        
        private System.Threading.SendOrPostCallback onGetNodeListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetNodesDelegate;
        
        private EndOperationDelegate onEndGetNodesDelegate;
        
        private System.Threading.SendOrPostCallback onGetNodesCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveNodeDelegate;
        
        private EndOperationDelegate onEndSaveNodeDelegate;
        
        private System.Threading.SendOrPostCallback onSaveNodeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetNodeByIDDelegate;
        
        private EndOperationDelegate onEndGetNodeByIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetNodeByIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCompanyListDelegate;
        
        private EndOperationDelegate onEndGetCompanyListDelegate;
        
        private System.Threading.SendOrPostCallback onGetCompanyListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCompaniesDelegate;
        
        private EndOperationDelegate onEndGetCompaniesDelegate;
        
        private System.Threading.SendOrPostCallback onGetCompaniesCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveCompanyDelegate;
        
        private EndOperationDelegate onEndSaveCompanyDelegate;
        
        private System.Threading.SendOrPostCallback onSaveCompanyCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetHistorianListDelegate;
        
        private EndOperationDelegate onEndGetHistorianListDelegate;
        
        private System.Threading.SendOrPostCallback onGetHistorianListCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveHistorianDelegate;
        
        private EndOperationDelegate onEndSaveHistorianDelegate;
        
        private System.Threading.SendOrPostCallback onSaveHistorianCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetHistoriansDelegate;
        
        private EndOperationDelegate onEndGetHistoriansDelegate;
        
        private System.Threading.SendOrPostCallback onGetHistoriansCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetVendorListDelegate;
        
        private EndOperationDelegate onEndGetVendorListDelegate;
        
        private System.Threading.SendOrPostCallback onGetVendorListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetVendorsDelegate;
        
        private EndOperationDelegate onEndGetVendorsDelegate;
        
        private System.Threading.SendOrPostCallback onGetVendorsCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveVendorDelegate;
        
        private EndOperationDelegate onEndSaveVendorDelegate;
        
        private System.Threading.SendOrPostCallback onSaveVendorCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetVendorDeviceListDelegate;
        
        private EndOperationDelegate onEndGetVendorDeviceListDelegate;
        
        private System.Threading.SendOrPostCallback onGetVendorDeviceListCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveVendorDeviceDelegate;
        
        private EndOperationDelegate onEndSaveVendorDeviceDelegate;
        
        private System.Threading.SendOrPostCallback onSaveVendorDeviceCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetVendorDevicesDelegate;
        
        private EndOperationDelegate onEndGetVendorDevicesDelegate;
        
        private System.Threading.SendOrPostCallback onGetVendorDevicesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDeviceListDelegate;
        
        private EndOperationDelegate onEndGetDeviceListDelegate;
        
        private System.Threading.SendOrPostCallback onGetDeviceListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDeviceListByParentIDDelegate;
        
        private EndOperationDelegate onEndGetDeviceListByParentIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetDeviceListByParentIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDevicesDelegate;
        
        private EndOperationDelegate onEndGetDevicesDelegate;
        
        private System.Threading.SendOrPostCallback onGetDevicesCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveDeviceDelegate;
        
        private EndOperationDelegate onEndSaveDeviceDelegate;
        
        private System.Threading.SendOrPostCallback onSaveDeviceCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDeviceByDeviceIDDelegate;
        
        private EndOperationDelegate onEndGetDeviceByDeviceIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetDeviceByDeviceIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDeviceByAcronymDelegate;
        
        private EndOperationDelegate onEndGetDeviceByAcronymDelegate;
        
        private System.Threading.SendOrPostCallback onGetDeviceByAcronymCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDevicesForOutputStreamDelegate;
        
        private EndOperationDelegate onEndGetDevicesForOutputStreamDelegate;
        
        private System.Threading.SendOrPostCallback onGetDevicesForOutputStreamCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetConcentratorDeviceDelegate;
        
        private EndOperationDelegate onEndGetConcentratorDeviceDelegate;
        
        private System.Threading.SendOrPostCallback onGetConcentratorDeviceCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteDeviceDelegate;
        
        private EndOperationDelegate onEndDeleteDeviceDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteDeviceCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetPhasorListDelegate;
        
        private EndOperationDelegate onEndGetPhasorListDelegate;
        
        private System.Threading.SendOrPostCallback onGetPhasorListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetPhasorsDelegate;
        
        private EndOperationDelegate onEndGetPhasorsDelegate;
        
        private System.Threading.SendOrPostCallback onGetPhasorsCompletedDelegate;
        
        private BeginOperationDelegate onBeginSavePhasorDelegate;
        
        private EndOperationDelegate onEndSavePhasorDelegate;
        
        private System.Threading.SendOrPostCallback onSavePhasorCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public PhasorDataServiceClient() {
        }
        
        public PhasorDataServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PhasorDataServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PhasorDataServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PhasorDataServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<SaveOutputStreamDevicePhasorCompletedEventArgs> SaveOutputStreamDevicePhasorCompleted;
        
        public event System.EventHandler<GetOutputStreamDeviceAnalogListCompletedEventArgs> GetOutputStreamDeviceAnalogListCompleted;
        
        public event System.EventHandler<SaveOutputStreamDeviceAnalogCompletedEventArgs> SaveOutputStreamDeviceAnalogCompleted;
        
        public event System.EventHandler<GetOutputStreamDeviceDigitalListCompletedEventArgs> GetOutputStreamDeviceDigitalListCompleted;
        
        public event System.EventHandler<SaveOutputStreamDeviceDigitalCompletedEventArgs> SaveOutputStreamDeviceDigitalCompleted;
        
        public event System.EventHandler<GetDeviceMeasurementDataCompletedEventArgs> GetDeviceMeasurementDataCompleted;
        
        public event System.EventHandler<GetTimeZonesCompletedEventArgs> GetTimeZonesCompleted;
        
        public event System.EventHandler<GetMapDataCompletedEventArgs> GetMapDataCompleted;
        
        public event System.EventHandler<GetConnectionSettingsCompletedEventArgs> GetConnectionSettingsCompleted;
        
        public event System.EventHandler<GetWizardConfigurationInfoCompletedEventArgs> GetWizardConfigurationInfoCompleted;
        
        public event System.EventHandler<RetrieveConfigurationFrameCompletedEventArgs> RetrieveConfigurationFrameCompleted;
        
        public event System.EventHandler<SaveWizardConfigurationInfoCompletedEventArgs> SaveWizardConfigurationInfoCompleted;
        
        public event System.EventHandler<GetExecutingAssemblyPathCompletedEventArgs> GetExecutingAssemblyPathCompleted;
        
        public event System.EventHandler<SaveIniFileCompletedEventArgs> SaveIniFileCompleted;
        
        public event System.EventHandler<GetStopBitsCompletedEventArgs> GetStopBitsCompleted;
        
        public event System.EventHandler<GetParitiesCompletedEventArgs> GetParitiesCompleted;
        
        public event System.EventHandler<GetStatisticMeasurementDataCompletedEventArgs> GetStatisticMeasurementDataCompleted;
        
        public event System.EventHandler<GetRuntimeIDCompletedEventArgs> GetRuntimeIDCompleted;
        
        public event System.EventHandler<GetMeasurementListCompletedEventArgs> GetMeasurementListCompleted;
        
        public event System.EventHandler<GetFilteredMeasurementsByDeviceCompletedEventArgs> GetFilteredMeasurementsByDeviceCompleted;
        
        public event System.EventHandler<SaveMeasurementCompletedEventArgs> SaveMeasurementCompleted;
        
        public event System.EventHandler<GetMeasurementsByDeviceCompletedEventArgs> GetMeasurementsByDeviceCompleted;
        
        public event System.EventHandler<GetMeasurementsForOutputStreamCompletedEventArgs> GetMeasurementsForOutputStreamCompleted;
        
        public event System.EventHandler<GetOtherDeviceListCompletedEventArgs> GetOtherDeviceListCompleted;
        
        public event System.EventHandler<SaveOtherDeviceCompletedEventArgs> SaveOtherDeviceCompleted;
        
        public event System.EventHandler<GetOtherDeviceByDeviceIDCompletedEventArgs> GetOtherDeviceByDeviceIDCompleted;
        
        public event System.EventHandler<GetInterconnectionsCompletedEventArgs> GetInterconnectionsCompleted;
        
        public event System.EventHandler<GetProtocolsCompletedEventArgs> GetProtocolsCompleted;
        
        public event System.EventHandler<GetProtocolIDByAcronymCompletedEventArgs> GetProtocolIDByAcronymCompleted;
        
        public event System.EventHandler<GetSignalTypesCompletedEventArgs> GetSignalTypesCompleted;
        
        public event System.EventHandler<GetCalculatedMeasurementListCompletedEventArgs> GetCalculatedMeasurementListCompleted;
        
        public event System.EventHandler<SaveCalculatedMeasurementCompletedEventArgs> SaveCalculatedMeasurementCompleted;
        
        public event System.EventHandler<GetAdapterListCompletedEventArgs> GetAdapterListCompleted;
        
        public event System.EventHandler<SaveAdapterCompletedEventArgs> SaveAdapterCompleted;
        
        public event System.EventHandler<GetIaonTreeDataCompletedEventArgs> GetIaonTreeDataCompleted;
        
        public event System.EventHandler<GetOutputStreamListCompletedEventArgs> GetOutputStreamListCompleted;
        
        public event System.EventHandler<SaveOutputStreamCompletedEventArgs> SaveOutputStreamCompleted;
        
        public event System.EventHandler<DeleteOutputStreamCompletedEventArgs> DeleteOutputStreamCompleted;
        
        public event System.EventHandler<GetOutputStreamDeviceListCompletedEventArgs> GetOutputStreamDeviceListCompleted;
        
        public event System.EventHandler<SaveOutputStreamDeviceCompletedEventArgs> SaveOutputStreamDeviceCompleted;
        
        public event System.EventHandler<DeleteOutputStreamDeviceCompletedEventArgs> DeleteOutputStreamDeviceCompleted;
        
        public event System.EventHandler<AddDevicesCompletedEventArgs> AddDevicesCompleted;
        
        public event System.EventHandler<GetOutputStreamMeasurementListCompletedEventArgs> GetOutputStreamMeasurementListCompleted;
        
        public event System.EventHandler<SaveOutputStreamMeasurementCompletedEventArgs> SaveOutputStreamMeasurementCompleted;
        
        public event System.EventHandler<DeleteOutputStreamMeasurementCompletedEventArgs> DeleteOutputStreamMeasurementCompleted;
        
        public event System.EventHandler<GetOutputStreamDevicePhasorListCompletedEventArgs> GetOutputStreamDevicePhasorListCompleted;
        
        public event System.EventHandler<GetNodeListCompletedEventArgs> GetNodeListCompleted;
        
        public event System.EventHandler<GetNodesCompletedEventArgs> GetNodesCompleted;
        
        public event System.EventHandler<SaveNodeCompletedEventArgs> SaveNodeCompleted;
        
        public event System.EventHandler<GetNodeByIDCompletedEventArgs> GetNodeByIDCompleted;
        
        public event System.EventHandler<GetCompanyListCompletedEventArgs> GetCompanyListCompleted;
        
        public event System.EventHandler<GetCompaniesCompletedEventArgs> GetCompaniesCompleted;
        
        public event System.EventHandler<SaveCompanyCompletedEventArgs> SaveCompanyCompleted;
        
        public event System.EventHandler<GetHistorianListCompletedEventArgs> GetHistorianListCompleted;
        
        public event System.EventHandler<SaveHistorianCompletedEventArgs> SaveHistorianCompleted;
        
        public event System.EventHandler<GetHistoriansCompletedEventArgs> GetHistoriansCompleted;
        
        public event System.EventHandler<GetVendorListCompletedEventArgs> GetVendorListCompleted;
        
        public event System.EventHandler<GetVendorsCompletedEventArgs> GetVendorsCompleted;
        
        public event System.EventHandler<SaveVendorCompletedEventArgs> SaveVendorCompleted;
        
        public event System.EventHandler<GetVendorDeviceListCompletedEventArgs> GetVendorDeviceListCompleted;
        
        public event System.EventHandler<SaveVendorDeviceCompletedEventArgs> SaveVendorDeviceCompleted;
        
        public event System.EventHandler<GetVendorDevicesCompletedEventArgs> GetVendorDevicesCompleted;
        
        public event System.EventHandler<GetDeviceListCompletedEventArgs> GetDeviceListCompleted;
        
        public event System.EventHandler<GetDeviceListByParentIDCompletedEventArgs> GetDeviceListByParentIDCompleted;
        
        public event System.EventHandler<GetDevicesCompletedEventArgs> GetDevicesCompleted;
        
        public event System.EventHandler<SaveDeviceCompletedEventArgs> SaveDeviceCompleted;
        
        public event System.EventHandler<GetDeviceByDeviceIDCompletedEventArgs> GetDeviceByDeviceIDCompleted;
        
        public event System.EventHandler<GetDeviceByAcronymCompletedEventArgs> GetDeviceByAcronymCompleted;
        
        public event System.EventHandler<GetDevicesForOutputStreamCompletedEventArgs> GetDevicesForOutputStreamCompleted;
        
        public event System.EventHandler<GetConcentratorDeviceCompletedEventArgs> GetConcentratorDeviceCompleted;
        
        public event System.EventHandler<DeleteDeviceCompletedEventArgs> DeleteDeviceCompleted;
        
        public event System.EventHandler<GetPhasorListCompletedEventArgs> GetPhasorListCompleted;
        
        public event System.EventHandler<GetPhasorsCompletedEventArgs> GetPhasorsCompleted;
        
        public event System.EventHandler<SavePhasorCompletedEventArgs> SavePhasorCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginSaveOutputStreamDevicePhasor(openPDCManager.PhasorDataServiceProxy.OutputStreamDevicePhasor outputStreamDevicePhasor, bool isNew, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveOutputStreamDevicePhasor(outputStreamDevicePhasor, isNew, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndSaveOutputStreamDevicePhasor(System.IAsyncResult result) {
            return base.Channel.EndSaveOutputStreamDevicePhasor(result);
        }
        
        private System.IAsyncResult OnBeginSaveOutputStreamDevicePhasor(object[] inValues, System.AsyncCallback callback, object asyncState) {
            openPDCManager.PhasorDataServiceProxy.OutputStreamDevicePhasor outputStreamDevicePhasor = ((openPDCManager.PhasorDataServiceProxy.OutputStreamDevicePhasor)(inValues[0]));
            bool isNew = ((bool)(inValues[1]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginSaveOutputStreamDevicePhasor(outputStreamDevicePhasor, isNew, callback, asyncState);
        }
        
        private object[] OnEndSaveOutputStreamDevicePhasor(System.IAsyncResult result) {
            string retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndSaveOutputStreamDevicePhasor(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveOutputStreamDevicePhasorCompleted(object state) {
            if ((this.SaveOutputStreamDevicePhasorCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveOutputStreamDevicePhasorCompleted(this, new SaveOutputStreamDevicePhasorCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveOutputStreamDevicePhasorAsync(openPDCManager.PhasorDataServiceProxy.OutputStreamDevicePhasor outputStreamDevicePhasor, bool isNew) {
            this.SaveOutputStreamDevicePhasorAsync(outputStreamDevicePhasor, isNew, null);
        }
        
        public void SaveOutputStreamDevicePhasorAsync(openPDCManager.PhasorDataServiceProxy.OutputStreamDevicePhasor outputStreamDevicePhasor, bool isNew, object userState) {
            if ((this.onBeginSaveOutputStreamDevicePhasorDelegate == null)) {
                this.onBeginSaveOutputStreamDevicePhasorDelegate = new BeginOperationDelegate(this.OnBeginSaveOutputStreamDevicePhasor);
            }
            if ((this.onEndSaveOutputStreamDevicePhasorDelegate == null)) {
                this.onEndSaveOutputStreamDevicePhasorDelegate = new EndOperationDelegate(this.OnEndSaveOutputStreamDevicePhasor);
            }
            if ((this.onSaveOutputStreamDevicePhasorCompletedDelegate == null)) {
                this.onSaveOutputStreamDevicePhasorCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveOutputStreamDevicePhasorCompleted);
            }
            base.InvokeAsync(this.onBeginSaveOutputStreamDevicePhasorDelegate, new object[] {
                        outputStreamDevicePhasor,
                        isNew}, this.onEndSaveOutputStreamDevicePhasorDelegate, this.onSaveOutputStreamDevicePhasorCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginGetOutputStreamDeviceAnalogList(int outputStreamDeviceID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetOutputStreamDeviceAnalogList(outputStreamDeviceID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OutputStreamDeviceAnalog> openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndGetOutputStreamDeviceAnalogList(System.IAsyncResult result) {
            return base.Channel.EndGetOutputStreamDeviceAnalogList(result);
        }
        
        private System.IAsyncResult OnBeginGetOutputStreamDeviceAnalogList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int outputStreamDeviceID = ((int)(inValues[0]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetOutputStreamDeviceAnalogList(outputStreamDeviceID, callback, asyncState);
        }
        
        private object[] OnEndGetOutputStreamDeviceAnalogList(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OutputStreamDeviceAnalog> retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetOutputStreamDeviceAnalogList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetOutputStreamDeviceAnalogListCompleted(object state) {
            if ((this.GetOutputStreamDeviceAnalogListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetOutputStreamDeviceAnalogListCompleted(this, new GetOutputStreamDeviceAnalogListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetOutputStreamDeviceAnalogListAsync(int outputStreamDeviceID) {
            this.GetOutputStreamDeviceAnalogListAsync(outputStreamDeviceID, null);
        }
        
        public void GetOutputStreamDeviceAnalogListAsync(int outputStreamDeviceID, object userState) {
            if ((this.onBeginGetOutputStreamDeviceAnalogListDelegate == null)) {
                this.onBeginGetOutputStreamDeviceAnalogListDelegate = new BeginOperationDelegate(this.OnBeginGetOutputStreamDeviceAnalogList);
            }
            if ((this.onEndGetOutputStreamDeviceAnalogListDelegate == null)) {
                this.onEndGetOutputStreamDeviceAnalogListDelegate = new EndOperationDelegate(this.OnEndGetOutputStreamDeviceAnalogList);
            }
            if ((this.onGetOutputStreamDeviceAnalogListCompletedDelegate == null)) {
                this.onGetOutputStreamDeviceAnalogListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetOutputStreamDeviceAnalogListCompleted);
            }
            base.InvokeAsync(this.onBeginGetOutputStreamDeviceAnalogListDelegate, new object[] {
                        outputStreamDeviceID}, this.onEndGetOutputStreamDeviceAnalogListDelegate, this.onGetOutputStreamDeviceAnalogListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginSaveOutputStreamDeviceAnalog(openPDCManager.PhasorDataServiceProxy.OutputStreamDeviceAnalog outputStreamDeviceAnalog, bool isNew, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveOutputStreamDeviceAnalog(outputStreamDeviceAnalog, isNew, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndSaveOutputStreamDeviceAnalog(System.IAsyncResult result) {
            return base.Channel.EndSaveOutputStreamDeviceAnalog(result);
        }
        
        private System.IAsyncResult OnBeginSaveOutputStreamDeviceAnalog(object[] inValues, System.AsyncCallback callback, object asyncState) {
            openPDCManager.PhasorDataServiceProxy.OutputStreamDeviceAnalog outputStreamDeviceAnalog = ((openPDCManager.PhasorDataServiceProxy.OutputStreamDeviceAnalog)(inValues[0]));
            bool isNew = ((bool)(inValues[1]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginSaveOutputStreamDeviceAnalog(outputStreamDeviceAnalog, isNew, callback, asyncState);
        }
        
        private object[] OnEndSaveOutputStreamDeviceAnalog(System.IAsyncResult result) {
            string retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndSaveOutputStreamDeviceAnalog(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveOutputStreamDeviceAnalogCompleted(object state) {
            if ((this.SaveOutputStreamDeviceAnalogCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveOutputStreamDeviceAnalogCompleted(this, new SaveOutputStreamDeviceAnalogCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveOutputStreamDeviceAnalogAsync(openPDCManager.PhasorDataServiceProxy.OutputStreamDeviceAnalog outputStreamDeviceAnalog, bool isNew) {
            this.SaveOutputStreamDeviceAnalogAsync(outputStreamDeviceAnalog, isNew, null);
        }
        
        public void SaveOutputStreamDeviceAnalogAsync(openPDCManager.PhasorDataServiceProxy.OutputStreamDeviceAnalog outputStreamDeviceAnalog, bool isNew, object userState) {
            if ((this.onBeginSaveOutputStreamDeviceAnalogDelegate == null)) {
                this.onBeginSaveOutputStreamDeviceAnalogDelegate = new BeginOperationDelegate(this.OnBeginSaveOutputStreamDeviceAnalog);
            }
            if ((this.onEndSaveOutputStreamDeviceAnalogDelegate == null)) {
                this.onEndSaveOutputStreamDeviceAnalogDelegate = new EndOperationDelegate(this.OnEndSaveOutputStreamDeviceAnalog);
            }
            if ((this.onSaveOutputStreamDeviceAnalogCompletedDelegate == null)) {
                this.onSaveOutputStreamDeviceAnalogCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveOutputStreamDeviceAnalogCompleted);
            }
            base.InvokeAsync(this.onBeginSaveOutputStreamDeviceAnalogDelegate, new object[] {
                        outputStreamDeviceAnalog,
                        isNew}, this.onEndSaveOutputStreamDeviceAnalogDelegate, this.onSaveOutputStreamDeviceAnalogCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginGetOutputStreamDeviceDigitalList(int outputStreamDeviceID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetOutputStreamDeviceDigitalList(outputStreamDeviceID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OutputStreamDeviceDigital> openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndGetOutputStreamDeviceDigitalList(System.IAsyncResult result) {
            return base.Channel.EndGetOutputStreamDeviceDigitalList(result);
        }
        
        private System.IAsyncResult OnBeginGetOutputStreamDeviceDigitalList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int outputStreamDeviceID = ((int)(inValues[0]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetOutputStreamDeviceDigitalList(outputStreamDeviceID, callback, asyncState);
        }
        
        private object[] OnEndGetOutputStreamDeviceDigitalList(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OutputStreamDeviceDigital> retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetOutputStreamDeviceDigitalList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetOutputStreamDeviceDigitalListCompleted(object state) {
            if ((this.GetOutputStreamDeviceDigitalListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetOutputStreamDeviceDigitalListCompleted(this, new GetOutputStreamDeviceDigitalListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetOutputStreamDeviceDigitalListAsync(int outputStreamDeviceID) {
            this.GetOutputStreamDeviceDigitalListAsync(outputStreamDeviceID, null);
        }
        
        public void GetOutputStreamDeviceDigitalListAsync(int outputStreamDeviceID, object userState) {
            if ((this.onBeginGetOutputStreamDeviceDigitalListDelegate == null)) {
                this.onBeginGetOutputStreamDeviceDigitalListDelegate = new BeginOperationDelegate(this.OnBeginGetOutputStreamDeviceDigitalList);
            }
            if ((this.onEndGetOutputStreamDeviceDigitalListDelegate == null)) {
                this.onEndGetOutputStreamDeviceDigitalListDelegate = new EndOperationDelegate(this.OnEndGetOutputStreamDeviceDigitalList);
            }
            if ((this.onGetOutputStreamDeviceDigitalListCompletedDelegate == null)) {
                this.onGetOutputStreamDeviceDigitalListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetOutputStreamDeviceDigitalListCompleted);
            }
            base.InvokeAsync(this.onBeginGetOutputStreamDeviceDigitalListDelegate, new object[] {
                        outputStreamDeviceID}, this.onEndGetOutputStreamDeviceDigitalListDelegate, this.onGetOutputStreamDeviceDigitalListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginSaveOutputStreamDeviceDigital(openPDCManager.PhasorDataServiceProxy.OutputStreamDeviceDigital outputStreamDeviceDigital, bool isNew, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveOutputStreamDeviceDigital(outputStreamDeviceDigital, isNew, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndSaveOutputStreamDeviceDigital(System.IAsyncResult result) {
            return base.Channel.EndSaveOutputStreamDeviceDigital(result);
        }
        
        private System.IAsyncResult OnBeginSaveOutputStreamDeviceDigital(object[] inValues, System.AsyncCallback callback, object asyncState) {
            openPDCManager.PhasorDataServiceProxy.OutputStreamDeviceDigital outputStreamDeviceDigital = ((openPDCManager.PhasorDataServiceProxy.OutputStreamDeviceDigital)(inValues[0]));
            bool isNew = ((bool)(inValues[1]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginSaveOutputStreamDeviceDigital(outputStreamDeviceDigital, isNew, callback, asyncState);
        }
        
        private object[] OnEndSaveOutputStreamDeviceDigital(System.IAsyncResult result) {
            string retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndSaveOutputStreamDeviceDigital(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveOutputStreamDeviceDigitalCompleted(object state) {
            if ((this.SaveOutputStreamDeviceDigitalCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveOutputStreamDeviceDigitalCompleted(this, new SaveOutputStreamDeviceDigitalCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveOutputStreamDeviceDigitalAsync(openPDCManager.PhasorDataServiceProxy.OutputStreamDeviceDigital outputStreamDeviceDigital, bool isNew) {
            this.SaveOutputStreamDeviceDigitalAsync(outputStreamDeviceDigital, isNew, null);
        }
        
        public void SaveOutputStreamDeviceDigitalAsync(openPDCManager.PhasorDataServiceProxy.OutputStreamDeviceDigital outputStreamDeviceDigital, bool isNew, object userState) {
            if ((this.onBeginSaveOutputStreamDeviceDigitalDelegate == null)) {
                this.onBeginSaveOutputStreamDeviceDigitalDelegate = new BeginOperationDelegate(this.OnBeginSaveOutputStreamDeviceDigital);
            }
            if ((this.onEndSaveOutputStreamDeviceDigitalDelegate == null)) {
                this.onEndSaveOutputStreamDeviceDigitalDelegate = new EndOperationDelegate(this.OnEndSaveOutputStreamDeviceDigital);
            }
            if ((this.onSaveOutputStreamDeviceDigitalCompletedDelegate == null)) {
                this.onSaveOutputStreamDeviceDigitalCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveOutputStreamDeviceDigitalCompleted);
            }
            base.InvokeAsync(this.onBeginSaveOutputStreamDeviceDigitalDelegate, new object[] {
                        outputStreamDeviceDigital,
                        isNew}, this.onEndSaveOutputStreamDeviceDigitalDelegate, this.onSaveOutputStreamDeviceDigitalCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginGetDeviceMeasurementData(string nodeID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDeviceMeasurementData(nodeID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.DeviceMeasurementData> openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndGetDeviceMeasurementData(System.IAsyncResult result) {
            return base.Channel.EndGetDeviceMeasurementData(result);
        }
        
        private System.IAsyncResult OnBeginGetDeviceMeasurementData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string nodeID = ((string)(inValues[0]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetDeviceMeasurementData(nodeID, callback, asyncState);
        }
        
        private object[] OnEndGetDeviceMeasurementData(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.DeviceMeasurementData> retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetDeviceMeasurementData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDeviceMeasurementDataCompleted(object state) {
            if ((this.GetDeviceMeasurementDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDeviceMeasurementDataCompleted(this, new GetDeviceMeasurementDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDeviceMeasurementDataAsync(string nodeID) {
            this.GetDeviceMeasurementDataAsync(nodeID, null);
        }
        
        public void GetDeviceMeasurementDataAsync(string nodeID, object userState) {
            if ((this.onBeginGetDeviceMeasurementDataDelegate == null)) {
                this.onBeginGetDeviceMeasurementDataDelegate = new BeginOperationDelegate(this.OnBeginGetDeviceMeasurementData);
            }
            if ((this.onEndGetDeviceMeasurementDataDelegate == null)) {
                this.onEndGetDeviceMeasurementDataDelegate = new EndOperationDelegate(this.OnEndGetDeviceMeasurementData);
            }
            if ((this.onGetDeviceMeasurementDataCompletedDelegate == null)) {
                this.onGetDeviceMeasurementDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDeviceMeasurementDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetDeviceMeasurementDataDelegate, new object[] {
                        nodeID}, this.onEndGetDeviceMeasurementDataDelegate, this.onGetDeviceMeasurementDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginGetTimeZones(bool isOptional, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTimeZones(isOptional, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.Dictionary<string, string> openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndGetTimeZones(System.IAsyncResult result) {
            return base.Channel.EndGetTimeZones(result);
        }
        
        private System.IAsyncResult OnBeginGetTimeZones(object[] inValues, System.AsyncCallback callback, object asyncState) {
            bool isOptional = ((bool)(inValues[0]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetTimeZones(isOptional, callback, asyncState);
        }
        
        private object[] OnEndGetTimeZones(System.IAsyncResult result) {
            System.Collections.Generic.Dictionary<string, string> retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetTimeZones(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTimeZonesCompleted(object state) {
            if ((this.GetTimeZonesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTimeZonesCompleted(this, new GetTimeZonesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTimeZonesAsync(bool isOptional) {
            this.GetTimeZonesAsync(isOptional, null);
        }
        
        public void GetTimeZonesAsync(bool isOptional, object userState) {
            if ((this.onBeginGetTimeZonesDelegate == null)) {
                this.onBeginGetTimeZonesDelegate = new BeginOperationDelegate(this.OnBeginGetTimeZones);
            }
            if ((this.onEndGetTimeZonesDelegate == null)) {
                this.onEndGetTimeZonesDelegate = new EndOperationDelegate(this.OnEndGetTimeZones);
            }
            if ((this.onGetTimeZonesCompletedDelegate == null)) {
                this.onGetTimeZonesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTimeZonesCompleted);
            }
            base.InvokeAsync(this.onBeginGetTimeZonesDelegate, new object[] {
                        isOptional}, this.onEndGetTimeZonesDelegate, this.onGetTimeZonesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginGetMapData(openPDCManager.PhasorDataServiceProxy.MapType mapType, string nodeID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMapData(mapType, nodeID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.MapData> openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndGetMapData(System.IAsyncResult result) {
            return base.Channel.EndGetMapData(result);
        }
        
        private System.IAsyncResult OnBeginGetMapData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            openPDCManager.PhasorDataServiceProxy.MapType mapType = ((openPDCManager.PhasorDataServiceProxy.MapType)(inValues[0]));
            string nodeID = ((string)(inValues[1]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetMapData(mapType, nodeID, callback, asyncState);
        }
        
        private object[] OnEndGetMapData(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.MapData> retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetMapData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMapDataCompleted(object state) {
            if ((this.GetMapDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMapDataCompleted(this, new GetMapDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMapDataAsync(openPDCManager.PhasorDataServiceProxy.MapType mapType, string nodeID) {
            this.GetMapDataAsync(mapType, nodeID, null);
        }
        
        public void GetMapDataAsync(openPDCManager.PhasorDataServiceProxy.MapType mapType, string nodeID, object userState) {
            if ((this.onBeginGetMapDataDelegate == null)) {
                this.onBeginGetMapDataDelegate = new BeginOperationDelegate(this.OnBeginGetMapData);
            }
            if ((this.onEndGetMapDataDelegate == null)) {
                this.onEndGetMapDataDelegate = new EndOperationDelegate(this.OnEndGetMapData);
            }
            if ((this.onGetMapDataCompletedDelegate == null)) {
                this.onGetMapDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMapDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetMapDataDelegate, new object[] {
                        mapType,
                        nodeID}, this.onEndGetMapDataDelegate, this.onGetMapDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginGetConnectionSettings(byte[] inputStream, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetConnectionSettings(inputStream, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        openPDCManager.PhasorDataServiceProxy.ConnectionSettings openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndGetConnectionSettings(System.IAsyncResult result) {
            return base.Channel.EndGetConnectionSettings(result);
        }
        
        private System.IAsyncResult OnBeginGetConnectionSettings(object[] inValues, System.AsyncCallback callback, object asyncState) {
            byte[] inputStream = ((byte[])(inValues[0]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetConnectionSettings(inputStream, callback, asyncState);
        }
        
        private object[] OnEndGetConnectionSettings(System.IAsyncResult result) {
            openPDCManager.PhasorDataServiceProxy.ConnectionSettings retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetConnectionSettings(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetConnectionSettingsCompleted(object state) {
            if ((this.GetConnectionSettingsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetConnectionSettingsCompleted(this, new GetConnectionSettingsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetConnectionSettingsAsync(byte[] inputStream) {
            this.GetConnectionSettingsAsync(inputStream, null);
        }
        
        public void GetConnectionSettingsAsync(byte[] inputStream, object userState) {
            if ((this.onBeginGetConnectionSettingsDelegate == null)) {
                this.onBeginGetConnectionSettingsDelegate = new BeginOperationDelegate(this.OnBeginGetConnectionSettings);
            }
            if ((this.onEndGetConnectionSettingsDelegate == null)) {
                this.onEndGetConnectionSettingsDelegate = new EndOperationDelegate(this.OnEndGetConnectionSettings);
            }
            if ((this.onGetConnectionSettingsCompletedDelegate == null)) {
                this.onGetConnectionSettingsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetConnectionSettingsCompleted);
            }
            base.InvokeAsync(this.onBeginGetConnectionSettingsDelegate, new object[] {
                        inputStream}, this.onEndGetConnectionSettingsDelegate, this.onGetConnectionSettingsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginGetWizardConfigurationInfo(byte[] inputStream, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetWizardConfigurationInfo(inputStream, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.WizardDeviceInfo> openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndGetWizardConfigurationInfo(System.IAsyncResult result) {
            return base.Channel.EndGetWizardConfigurationInfo(result);
        }
        
        private System.IAsyncResult OnBeginGetWizardConfigurationInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            byte[] inputStream = ((byte[])(inValues[0]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetWizardConfigurationInfo(inputStream, callback, asyncState);
        }
        
        private object[] OnEndGetWizardConfigurationInfo(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.WizardDeviceInfo> retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetWizardConfigurationInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetWizardConfigurationInfoCompleted(object state) {
            if ((this.GetWizardConfigurationInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetWizardConfigurationInfoCompleted(this, new GetWizardConfigurationInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetWizardConfigurationInfoAsync(byte[] inputStream) {
            this.GetWizardConfigurationInfoAsync(inputStream, null);
        }
        
        public void GetWizardConfigurationInfoAsync(byte[] inputStream, object userState) {
            if ((this.onBeginGetWizardConfigurationInfoDelegate == null)) {
                this.onBeginGetWizardConfigurationInfoDelegate = new BeginOperationDelegate(this.OnBeginGetWizardConfigurationInfo);
            }
            if ((this.onEndGetWizardConfigurationInfoDelegate == null)) {
                this.onEndGetWizardConfigurationInfoDelegate = new EndOperationDelegate(this.OnEndGetWizardConfigurationInfo);
            }
            if ((this.onGetWizardConfigurationInfoCompletedDelegate == null)) {
                this.onGetWizardConfigurationInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetWizardConfigurationInfoCompleted);
            }
            base.InvokeAsync(this.onBeginGetWizardConfigurationInfoDelegate, new object[] {
                        inputStream}, this.onEndGetWizardConfigurationInfoDelegate, this.onGetWizardConfigurationInfoCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginRetrieveConfigurationFrame(string nodeConnectionString, string deviceConnectionString, int protocolID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveConfigurationFrame(nodeConnectionString, deviceConnectionString, protocolID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.WizardDeviceInfo> openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndRetrieveConfigurationFrame(System.IAsyncResult result) {
            return base.Channel.EndRetrieveConfigurationFrame(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveConfigurationFrame(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string nodeConnectionString = ((string)(inValues[0]));
            string deviceConnectionString = ((string)(inValues[1]));
            int protocolID = ((int)(inValues[2]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginRetrieveConfigurationFrame(nodeConnectionString, deviceConnectionString, protocolID, callback, asyncState);
        }
        
        private object[] OnEndRetrieveConfigurationFrame(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.WizardDeviceInfo> retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndRetrieveConfigurationFrame(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveConfigurationFrameCompleted(object state) {
            if ((this.RetrieveConfigurationFrameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveConfigurationFrameCompleted(this, new RetrieveConfigurationFrameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveConfigurationFrameAsync(string nodeConnectionString, string deviceConnectionString, int protocolID) {
            this.RetrieveConfigurationFrameAsync(nodeConnectionString, deviceConnectionString, protocolID, null);
        }
        
        public void RetrieveConfigurationFrameAsync(string nodeConnectionString, string deviceConnectionString, int protocolID, object userState) {
            if ((this.onBeginRetrieveConfigurationFrameDelegate == null)) {
                this.onBeginRetrieveConfigurationFrameDelegate = new BeginOperationDelegate(this.OnBeginRetrieveConfigurationFrame);
            }
            if ((this.onEndRetrieveConfigurationFrameDelegate == null)) {
                this.onEndRetrieveConfigurationFrameDelegate = new EndOperationDelegate(this.OnEndRetrieveConfigurationFrame);
            }
            if ((this.onRetrieveConfigurationFrameCompletedDelegate == null)) {
                this.onRetrieveConfigurationFrameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveConfigurationFrameCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveConfigurationFrameDelegate, new object[] {
                        nodeConnectionString,
                        deviceConnectionString,
                        protocolID}, this.onEndRetrieveConfigurationFrameDelegate, this.onRetrieveConfigurationFrameCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginSaveWizardConfigurationInfo(string nodeID, System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.WizardDeviceInfo> wizardDeviceInfoList, string connectionString, System.Nullable<int> protocolID, System.Nullable<int> companyID, System.Nullable<int> historianID, System.Nullable<int> interconnectionID, System.Nullable<int> parentID, bool skipDisableRealTimeData, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveWizardConfigurationInfo(nodeID, wizardDeviceInfoList, connectionString, protocolID, companyID, historianID, interconnectionID, parentID, skipDisableRealTimeData, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndSaveWizardConfigurationInfo(System.IAsyncResult result) {
            return base.Channel.EndSaveWizardConfigurationInfo(result);
        }
        
        private System.IAsyncResult OnBeginSaveWizardConfigurationInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string nodeID = ((string)(inValues[0]));
            System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.WizardDeviceInfo> wizardDeviceInfoList = ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.WizardDeviceInfo>)(inValues[1]));
            string connectionString = ((string)(inValues[2]));
            System.Nullable<int> protocolID = ((System.Nullable<int>)(inValues[3]));
            System.Nullable<int> companyID = ((System.Nullable<int>)(inValues[4]));
            System.Nullable<int> historianID = ((System.Nullable<int>)(inValues[5]));
            System.Nullable<int> interconnectionID = ((System.Nullable<int>)(inValues[6]));
            System.Nullable<int> parentID = ((System.Nullable<int>)(inValues[7]));
            bool skipDisableRealTimeData = ((bool)(inValues[8]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginSaveWizardConfigurationInfo(nodeID, wizardDeviceInfoList, connectionString, protocolID, companyID, historianID, interconnectionID, parentID, skipDisableRealTimeData, callback, asyncState);
        }
        
        private object[] OnEndSaveWizardConfigurationInfo(System.IAsyncResult result) {
            string retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndSaveWizardConfigurationInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveWizardConfigurationInfoCompleted(object state) {
            if ((this.SaveWizardConfigurationInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveWizardConfigurationInfoCompleted(this, new SaveWizardConfigurationInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveWizardConfigurationInfoAsync(string nodeID, System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.WizardDeviceInfo> wizardDeviceInfoList, string connectionString, System.Nullable<int> protocolID, System.Nullable<int> companyID, System.Nullable<int> historianID, System.Nullable<int> interconnectionID, System.Nullable<int> parentID, bool skipDisableRealTimeData) {
            this.SaveWizardConfigurationInfoAsync(nodeID, wizardDeviceInfoList, connectionString, protocolID, companyID, historianID, interconnectionID, parentID, skipDisableRealTimeData, null);
        }
        
        public void SaveWizardConfigurationInfoAsync(string nodeID, System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.WizardDeviceInfo> wizardDeviceInfoList, string connectionString, System.Nullable<int> protocolID, System.Nullable<int> companyID, System.Nullable<int> historianID, System.Nullable<int> interconnectionID, System.Nullable<int> parentID, bool skipDisableRealTimeData, object userState) {
            if ((this.onBeginSaveWizardConfigurationInfoDelegate == null)) {
                this.onBeginSaveWizardConfigurationInfoDelegate = new BeginOperationDelegate(this.OnBeginSaveWizardConfigurationInfo);
            }
            if ((this.onEndSaveWizardConfigurationInfoDelegate == null)) {
                this.onEndSaveWizardConfigurationInfoDelegate = new EndOperationDelegate(this.OnEndSaveWizardConfigurationInfo);
            }
            if ((this.onSaveWizardConfigurationInfoCompletedDelegate == null)) {
                this.onSaveWizardConfigurationInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveWizardConfigurationInfoCompleted);
            }
            base.InvokeAsync(this.onBeginSaveWizardConfigurationInfoDelegate, new object[] {
                        nodeID,
                        wizardDeviceInfoList,
                        connectionString,
                        protocolID,
                        companyID,
                        historianID,
                        interconnectionID,
                        parentID,
                        skipDisableRealTimeData}, this.onEndSaveWizardConfigurationInfoDelegate, this.onSaveWizardConfigurationInfoCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginGetExecutingAssemblyPath(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetExecutingAssemblyPath(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndGetExecutingAssemblyPath(System.IAsyncResult result) {
            return base.Channel.EndGetExecutingAssemblyPath(result);
        }
        
        private System.IAsyncResult OnBeginGetExecutingAssemblyPath(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetExecutingAssemblyPath(callback, asyncState);
        }
        
        private object[] OnEndGetExecutingAssemblyPath(System.IAsyncResult result) {
            string retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetExecutingAssemblyPath(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetExecutingAssemblyPathCompleted(object state) {
            if ((this.GetExecutingAssemblyPathCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetExecutingAssemblyPathCompleted(this, new GetExecutingAssemblyPathCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetExecutingAssemblyPathAsync() {
            this.GetExecutingAssemblyPathAsync(null);
        }
        
        public void GetExecutingAssemblyPathAsync(object userState) {
            if ((this.onBeginGetExecutingAssemblyPathDelegate == null)) {
                this.onBeginGetExecutingAssemblyPathDelegate = new BeginOperationDelegate(this.OnBeginGetExecutingAssemblyPath);
            }
            if ((this.onEndGetExecutingAssemblyPathDelegate == null)) {
                this.onEndGetExecutingAssemblyPathDelegate = new EndOperationDelegate(this.OnEndGetExecutingAssemblyPath);
            }
            if ((this.onGetExecutingAssemblyPathCompletedDelegate == null)) {
                this.onGetExecutingAssemblyPathCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetExecutingAssemblyPathCompleted);
            }
            base.InvokeAsync(this.onBeginGetExecutingAssemblyPathDelegate, null, this.onEndGetExecutingAssemblyPathDelegate, this.onGetExecutingAssemblyPathCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginSaveIniFile(byte[] input, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveIniFile(input, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndSaveIniFile(System.IAsyncResult result) {
            return base.Channel.EndSaveIniFile(result);
        }
        
        private System.IAsyncResult OnBeginSaveIniFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            byte[] input = ((byte[])(inValues[0]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginSaveIniFile(input, callback, asyncState);
        }
        
        private object[] OnEndSaveIniFile(System.IAsyncResult result) {
            string retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndSaveIniFile(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveIniFileCompleted(object state) {
            if ((this.SaveIniFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveIniFileCompleted(this, new SaveIniFileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveIniFileAsync(byte[] input) {
            this.SaveIniFileAsync(input, null);
        }
        
        public void SaveIniFileAsync(byte[] input, object userState) {
            if ((this.onBeginSaveIniFileDelegate == null)) {
                this.onBeginSaveIniFileDelegate = new BeginOperationDelegate(this.OnBeginSaveIniFile);
            }
            if ((this.onEndSaveIniFileDelegate == null)) {
                this.onEndSaveIniFileDelegate = new EndOperationDelegate(this.OnEndSaveIniFile);
            }
            if ((this.onSaveIniFileCompletedDelegate == null)) {
                this.onSaveIniFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveIniFileCompleted);
            }
            base.InvokeAsync(this.onBeginSaveIniFileDelegate, new object[] {
                        input}, this.onEndSaveIniFileDelegate, this.onSaveIniFileCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginGetStopBits(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetStopBits(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<string> openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndGetStopBits(System.IAsyncResult result) {
            return base.Channel.EndGetStopBits(result);
        }
        
        private System.IAsyncResult OnBeginGetStopBits(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetStopBits(callback, asyncState);
        }
        
        private object[] OnEndGetStopBits(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<string> retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetStopBits(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetStopBitsCompleted(object state) {
            if ((this.GetStopBitsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetStopBitsCompleted(this, new GetStopBitsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetStopBitsAsync() {
            this.GetStopBitsAsync(null);
        }
        
        public void GetStopBitsAsync(object userState) {
            if ((this.onBeginGetStopBitsDelegate == null)) {
                this.onBeginGetStopBitsDelegate = new BeginOperationDelegate(this.OnBeginGetStopBits);
            }
            if ((this.onEndGetStopBitsDelegate == null)) {
                this.onEndGetStopBitsDelegate = new EndOperationDelegate(this.OnEndGetStopBits);
            }
            if ((this.onGetStopBitsCompletedDelegate == null)) {
                this.onGetStopBitsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetStopBitsCompleted);
            }
            base.InvokeAsync(this.onBeginGetStopBitsDelegate, null, this.onEndGetStopBitsDelegate, this.onGetStopBitsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginGetParities(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetParities(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<string> openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndGetParities(System.IAsyncResult result) {
            return base.Channel.EndGetParities(result);
        }
        
        private System.IAsyncResult OnBeginGetParities(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetParities(callback, asyncState);
        }
        
        private object[] OnEndGetParities(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<string> retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetParities(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetParitiesCompleted(object state) {
            if ((this.GetParitiesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetParitiesCompleted(this, new GetParitiesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetParitiesAsync() {
            this.GetParitiesAsync(null);
        }
        
        public void GetParitiesAsync(object userState) {
            if ((this.onBeginGetParitiesDelegate == null)) {
                this.onBeginGetParitiesDelegate = new BeginOperationDelegate(this.OnBeginGetParities);
            }
            if ((this.onEndGetParitiesDelegate == null)) {
                this.onEndGetParitiesDelegate = new EndOperationDelegate(this.OnEndGetParities);
            }
            if ((this.onGetParitiesCompletedDelegate == null)) {
                this.onGetParitiesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetParitiesCompleted);
            }
            base.InvokeAsync(this.onBeginGetParitiesDelegate, null, this.onEndGetParitiesDelegate, this.onGetParitiesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginGetStatisticMeasurementData(string nodeID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetStatisticMeasurementData(nodeID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.StatisticMeasurementData> openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndGetStatisticMeasurementData(System.IAsyncResult result) {
            return base.Channel.EndGetStatisticMeasurementData(result);
        }
        
        private System.IAsyncResult OnBeginGetStatisticMeasurementData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string nodeID = ((string)(inValues[0]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetStatisticMeasurementData(nodeID, callback, asyncState);
        }
        
        private object[] OnEndGetStatisticMeasurementData(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.StatisticMeasurementData> retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetStatisticMeasurementData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetStatisticMeasurementDataCompleted(object state) {
            if ((this.GetStatisticMeasurementDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetStatisticMeasurementDataCompleted(this, new GetStatisticMeasurementDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetStatisticMeasurementDataAsync(string nodeID) {
            this.GetStatisticMeasurementDataAsync(nodeID, null);
        }
        
        public void GetStatisticMeasurementDataAsync(string nodeID, object userState) {
            if ((this.onBeginGetStatisticMeasurementDataDelegate == null)) {
                this.onBeginGetStatisticMeasurementDataDelegate = new BeginOperationDelegate(this.OnBeginGetStatisticMeasurementData);
            }
            if ((this.onEndGetStatisticMeasurementDataDelegate == null)) {
                this.onEndGetStatisticMeasurementDataDelegate = new EndOperationDelegate(this.OnEndGetStatisticMeasurementData);
            }
            if ((this.onGetStatisticMeasurementDataCompletedDelegate == null)) {
                this.onGetStatisticMeasurementDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetStatisticMeasurementDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetStatisticMeasurementDataDelegate, new object[] {
                        nodeID}, this.onEndGetStatisticMeasurementDataDelegate, this.onGetStatisticMeasurementDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginGetRuntimeID(string sourceTable, int sourceID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRuntimeID(sourceTable, sourceID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndGetRuntimeID(System.IAsyncResult result) {
            return base.Channel.EndGetRuntimeID(result);
        }
        
        private System.IAsyncResult OnBeginGetRuntimeID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sourceTable = ((string)(inValues[0]));
            int sourceID = ((int)(inValues[1]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetRuntimeID(sourceTable, sourceID, callback, asyncState);
        }
        
        private object[] OnEndGetRuntimeID(System.IAsyncResult result) {
            string retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetRuntimeID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRuntimeIDCompleted(object state) {
            if ((this.GetRuntimeIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRuntimeIDCompleted(this, new GetRuntimeIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRuntimeIDAsync(string sourceTable, int sourceID) {
            this.GetRuntimeIDAsync(sourceTable, sourceID, null);
        }
        
        public void GetRuntimeIDAsync(string sourceTable, int sourceID, object userState) {
            if ((this.onBeginGetRuntimeIDDelegate == null)) {
                this.onBeginGetRuntimeIDDelegate = new BeginOperationDelegate(this.OnBeginGetRuntimeID);
            }
            if ((this.onEndGetRuntimeIDDelegate == null)) {
                this.onEndGetRuntimeIDDelegate = new EndOperationDelegate(this.OnEndGetRuntimeID);
            }
            if ((this.onGetRuntimeIDCompletedDelegate == null)) {
                this.onGetRuntimeIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRuntimeIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetRuntimeIDDelegate, new object[] {
                        sourceTable,
                        sourceID}, this.onEndGetRuntimeIDDelegate, this.onGetRuntimeIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginGetMeasurementList(string nodeID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMeasurementList(nodeID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Measurement> openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndGetMeasurementList(System.IAsyncResult result) {
            return base.Channel.EndGetMeasurementList(result);
        }
        
        private System.IAsyncResult OnBeginGetMeasurementList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string nodeID = ((string)(inValues[0]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetMeasurementList(nodeID, callback, asyncState);
        }
        
        private object[] OnEndGetMeasurementList(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Measurement> retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetMeasurementList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMeasurementListCompleted(object state) {
            if ((this.GetMeasurementListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMeasurementListCompleted(this, new GetMeasurementListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMeasurementListAsync(string nodeID) {
            this.GetMeasurementListAsync(nodeID, null);
        }
        
        public void GetMeasurementListAsync(string nodeID, object userState) {
            if ((this.onBeginGetMeasurementListDelegate == null)) {
                this.onBeginGetMeasurementListDelegate = new BeginOperationDelegate(this.OnBeginGetMeasurementList);
            }
            if ((this.onEndGetMeasurementListDelegate == null)) {
                this.onEndGetMeasurementListDelegate = new EndOperationDelegate(this.OnEndGetMeasurementList);
            }
            if ((this.onGetMeasurementListCompletedDelegate == null)) {
                this.onGetMeasurementListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMeasurementListCompleted);
            }
            base.InvokeAsync(this.onBeginGetMeasurementListDelegate, new object[] {
                        nodeID}, this.onEndGetMeasurementListDelegate, this.onGetMeasurementListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginGetFilteredMeasurementsByDevice(int deviceID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFilteredMeasurementsByDevice(deviceID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Measurement> openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndGetFilteredMeasurementsByDevice(System.IAsyncResult result) {
            return base.Channel.EndGetFilteredMeasurementsByDevice(result);
        }
        
        private System.IAsyncResult OnBeginGetFilteredMeasurementsByDevice(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int deviceID = ((int)(inValues[0]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetFilteredMeasurementsByDevice(deviceID, callback, asyncState);
        }
        
        private object[] OnEndGetFilteredMeasurementsByDevice(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Measurement> retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetFilteredMeasurementsByDevice(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFilteredMeasurementsByDeviceCompleted(object state) {
            if ((this.GetFilteredMeasurementsByDeviceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFilteredMeasurementsByDeviceCompleted(this, new GetFilteredMeasurementsByDeviceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFilteredMeasurementsByDeviceAsync(int deviceID) {
            this.GetFilteredMeasurementsByDeviceAsync(deviceID, null);
        }
        
        public void GetFilteredMeasurementsByDeviceAsync(int deviceID, object userState) {
            if ((this.onBeginGetFilteredMeasurementsByDeviceDelegate == null)) {
                this.onBeginGetFilteredMeasurementsByDeviceDelegate = new BeginOperationDelegate(this.OnBeginGetFilteredMeasurementsByDevice);
            }
            if ((this.onEndGetFilteredMeasurementsByDeviceDelegate == null)) {
                this.onEndGetFilteredMeasurementsByDeviceDelegate = new EndOperationDelegate(this.OnEndGetFilteredMeasurementsByDevice);
            }
            if ((this.onGetFilteredMeasurementsByDeviceCompletedDelegate == null)) {
                this.onGetFilteredMeasurementsByDeviceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFilteredMeasurementsByDeviceCompleted);
            }
            base.InvokeAsync(this.onBeginGetFilteredMeasurementsByDeviceDelegate, new object[] {
                        deviceID}, this.onEndGetFilteredMeasurementsByDeviceDelegate, this.onGetFilteredMeasurementsByDeviceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginSaveMeasurement(openPDCManager.PhasorDataServiceProxy.Measurement measurement, bool isNew, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveMeasurement(measurement, isNew, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndSaveMeasurement(System.IAsyncResult result) {
            return base.Channel.EndSaveMeasurement(result);
        }
        
        private System.IAsyncResult OnBeginSaveMeasurement(object[] inValues, System.AsyncCallback callback, object asyncState) {
            openPDCManager.PhasorDataServiceProxy.Measurement measurement = ((openPDCManager.PhasorDataServiceProxy.Measurement)(inValues[0]));
            bool isNew = ((bool)(inValues[1]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginSaveMeasurement(measurement, isNew, callback, asyncState);
        }
        
        private object[] OnEndSaveMeasurement(System.IAsyncResult result) {
            string retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndSaveMeasurement(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveMeasurementCompleted(object state) {
            if ((this.SaveMeasurementCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveMeasurementCompleted(this, new SaveMeasurementCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveMeasurementAsync(openPDCManager.PhasorDataServiceProxy.Measurement measurement, bool isNew) {
            this.SaveMeasurementAsync(measurement, isNew, null);
        }
        
        public void SaveMeasurementAsync(openPDCManager.PhasorDataServiceProxy.Measurement measurement, bool isNew, object userState) {
            if ((this.onBeginSaveMeasurementDelegate == null)) {
                this.onBeginSaveMeasurementDelegate = new BeginOperationDelegate(this.OnBeginSaveMeasurement);
            }
            if ((this.onEndSaveMeasurementDelegate == null)) {
                this.onEndSaveMeasurementDelegate = new EndOperationDelegate(this.OnEndSaveMeasurement);
            }
            if ((this.onSaveMeasurementCompletedDelegate == null)) {
                this.onSaveMeasurementCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveMeasurementCompleted);
            }
            base.InvokeAsync(this.onBeginSaveMeasurementDelegate, new object[] {
                        measurement,
                        isNew}, this.onEndSaveMeasurementDelegate, this.onSaveMeasurementCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginGetMeasurementsByDevice(int deviceID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMeasurementsByDevice(deviceID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Measurement> openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndGetMeasurementsByDevice(System.IAsyncResult result) {
            return base.Channel.EndGetMeasurementsByDevice(result);
        }
        
        private System.IAsyncResult OnBeginGetMeasurementsByDevice(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int deviceID = ((int)(inValues[0]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetMeasurementsByDevice(deviceID, callback, asyncState);
        }
        
        private object[] OnEndGetMeasurementsByDevice(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Measurement> retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetMeasurementsByDevice(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMeasurementsByDeviceCompleted(object state) {
            if ((this.GetMeasurementsByDeviceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMeasurementsByDeviceCompleted(this, new GetMeasurementsByDeviceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMeasurementsByDeviceAsync(int deviceID) {
            this.GetMeasurementsByDeviceAsync(deviceID, null);
        }
        
        public void GetMeasurementsByDeviceAsync(int deviceID, object userState) {
            if ((this.onBeginGetMeasurementsByDeviceDelegate == null)) {
                this.onBeginGetMeasurementsByDeviceDelegate = new BeginOperationDelegate(this.OnBeginGetMeasurementsByDevice);
            }
            if ((this.onEndGetMeasurementsByDeviceDelegate == null)) {
                this.onEndGetMeasurementsByDeviceDelegate = new EndOperationDelegate(this.OnEndGetMeasurementsByDevice);
            }
            if ((this.onGetMeasurementsByDeviceCompletedDelegate == null)) {
                this.onGetMeasurementsByDeviceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMeasurementsByDeviceCompleted);
            }
            base.InvokeAsync(this.onBeginGetMeasurementsByDeviceDelegate, new object[] {
                        deviceID}, this.onEndGetMeasurementsByDeviceDelegate, this.onGetMeasurementsByDeviceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginGetMeasurementsForOutputStream(string nodeID, int outputStreamID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMeasurementsForOutputStream(nodeID, outputStreamID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Measurement> openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndGetMeasurementsForOutputStream(System.IAsyncResult result) {
            return base.Channel.EndGetMeasurementsForOutputStream(result);
        }
        
        private System.IAsyncResult OnBeginGetMeasurementsForOutputStream(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string nodeID = ((string)(inValues[0]));
            int outputStreamID = ((int)(inValues[1]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetMeasurementsForOutputStream(nodeID, outputStreamID, callback, asyncState);
        }
        
        private object[] OnEndGetMeasurementsForOutputStream(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Measurement> retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetMeasurementsForOutputStream(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMeasurementsForOutputStreamCompleted(object state) {
            if ((this.GetMeasurementsForOutputStreamCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMeasurementsForOutputStreamCompleted(this, new GetMeasurementsForOutputStreamCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMeasurementsForOutputStreamAsync(string nodeID, int outputStreamID) {
            this.GetMeasurementsForOutputStreamAsync(nodeID, outputStreamID, null);
        }
        
        public void GetMeasurementsForOutputStreamAsync(string nodeID, int outputStreamID, object userState) {
            if ((this.onBeginGetMeasurementsForOutputStreamDelegate == null)) {
                this.onBeginGetMeasurementsForOutputStreamDelegate = new BeginOperationDelegate(this.OnBeginGetMeasurementsForOutputStream);
            }
            if ((this.onEndGetMeasurementsForOutputStreamDelegate == null)) {
                this.onEndGetMeasurementsForOutputStreamDelegate = new EndOperationDelegate(this.OnEndGetMeasurementsForOutputStream);
            }
            if ((this.onGetMeasurementsForOutputStreamCompletedDelegate == null)) {
                this.onGetMeasurementsForOutputStreamCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMeasurementsForOutputStreamCompleted);
            }
            base.InvokeAsync(this.onBeginGetMeasurementsForOutputStreamDelegate, new object[] {
                        nodeID,
                        outputStreamID}, this.onEndGetMeasurementsForOutputStreamDelegate, this.onGetMeasurementsForOutputStreamCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginGetOtherDeviceList(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetOtherDeviceList(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OtherDevice> openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndGetOtherDeviceList(System.IAsyncResult result) {
            return base.Channel.EndGetOtherDeviceList(result);
        }
        
        private System.IAsyncResult OnBeginGetOtherDeviceList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetOtherDeviceList(callback, asyncState);
        }
        
        private object[] OnEndGetOtherDeviceList(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OtherDevice> retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetOtherDeviceList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetOtherDeviceListCompleted(object state) {
            if ((this.GetOtherDeviceListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetOtherDeviceListCompleted(this, new GetOtherDeviceListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetOtherDeviceListAsync() {
            this.GetOtherDeviceListAsync(null);
        }
        
        public void GetOtherDeviceListAsync(object userState) {
            if ((this.onBeginGetOtherDeviceListDelegate == null)) {
                this.onBeginGetOtherDeviceListDelegate = new BeginOperationDelegate(this.OnBeginGetOtherDeviceList);
            }
            if ((this.onEndGetOtherDeviceListDelegate == null)) {
                this.onEndGetOtherDeviceListDelegate = new EndOperationDelegate(this.OnEndGetOtherDeviceList);
            }
            if ((this.onGetOtherDeviceListCompletedDelegate == null)) {
                this.onGetOtherDeviceListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetOtherDeviceListCompleted);
            }
            base.InvokeAsync(this.onBeginGetOtherDeviceListDelegate, null, this.onEndGetOtherDeviceListDelegate, this.onGetOtherDeviceListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginSaveOtherDevice(openPDCManager.PhasorDataServiceProxy.OtherDevice otherDevice, bool isNew, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveOtherDevice(otherDevice, isNew, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndSaveOtherDevice(System.IAsyncResult result) {
            return base.Channel.EndSaveOtherDevice(result);
        }
        
        private System.IAsyncResult OnBeginSaveOtherDevice(object[] inValues, System.AsyncCallback callback, object asyncState) {
            openPDCManager.PhasorDataServiceProxy.OtherDevice otherDevice = ((openPDCManager.PhasorDataServiceProxy.OtherDevice)(inValues[0]));
            bool isNew = ((bool)(inValues[1]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginSaveOtherDevice(otherDevice, isNew, callback, asyncState);
        }
        
        private object[] OnEndSaveOtherDevice(System.IAsyncResult result) {
            string retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndSaveOtherDevice(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveOtherDeviceCompleted(object state) {
            if ((this.SaveOtherDeviceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveOtherDeviceCompleted(this, new SaveOtherDeviceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveOtherDeviceAsync(openPDCManager.PhasorDataServiceProxy.OtherDevice otherDevice, bool isNew) {
            this.SaveOtherDeviceAsync(otherDevice, isNew, null);
        }
        
        public void SaveOtherDeviceAsync(openPDCManager.PhasorDataServiceProxy.OtherDevice otherDevice, bool isNew, object userState) {
            if ((this.onBeginSaveOtherDeviceDelegate == null)) {
                this.onBeginSaveOtherDeviceDelegate = new BeginOperationDelegate(this.OnBeginSaveOtherDevice);
            }
            if ((this.onEndSaveOtherDeviceDelegate == null)) {
                this.onEndSaveOtherDeviceDelegate = new EndOperationDelegate(this.OnEndSaveOtherDevice);
            }
            if ((this.onSaveOtherDeviceCompletedDelegate == null)) {
                this.onSaveOtherDeviceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveOtherDeviceCompleted);
            }
            base.InvokeAsync(this.onBeginSaveOtherDeviceDelegate, new object[] {
                        otherDevice,
                        isNew}, this.onEndSaveOtherDeviceDelegate, this.onSaveOtherDeviceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginGetOtherDeviceByDeviceID(int deviceID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetOtherDeviceByDeviceID(deviceID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        openPDCManager.PhasorDataServiceProxy.OtherDevice openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndGetOtherDeviceByDeviceID(System.IAsyncResult result) {
            return base.Channel.EndGetOtherDeviceByDeviceID(result);
        }
        
        private System.IAsyncResult OnBeginGetOtherDeviceByDeviceID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int deviceID = ((int)(inValues[0]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetOtherDeviceByDeviceID(deviceID, callback, asyncState);
        }
        
        private object[] OnEndGetOtherDeviceByDeviceID(System.IAsyncResult result) {
            openPDCManager.PhasorDataServiceProxy.OtherDevice retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetOtherDeviceByDeviceID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetOtherDeviceByDeviceIDCompleted(object state) {
            if ((this.GetOtherDeviceByDeviceIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetOtherDeviceByDeviceIDCompleted(this, new GetOtherDeviceByDeviceIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetOtherDeviceByDeviceIDAsync(int deviceID) {
            this.GetOtherDeviceByDeviceIDAsync(deviceID, null);
        }
        
        public void GetOtherDeviceByDeviceIDAsync(int deviceID, object userState) {
            if ((this.onBeginGetOtherDeviceByDeviceIDDelegate == null)) {
                this.onBeginGetOtherDeviceByDeviceIDDelegate = new BeginOperationDelegate(this.OnBeginGetOtherDeviceByDeviceID);
            }
            if ((this.onEndGetOtherDeviceByDeviceIDDelegate == null)) {
                this.onEndGetOtherDeviceByDeviceIDDelegate = new EndOperationDelegate(this.OnEndGetOtherDeviceByDeviceID);
            }
            if ((this.onGetOtherDeviceByDeviceIDCompletedDelegate == null)) {
                this.onGetOtherDeviceByDeviceIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetOtherDeviceByDeviceIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetOtherDeviceByDeviceIDDelegate, new object[] {
                        deviceID}, this.onEndGetOtherDeviceByDeviceIDDelegate, this.onGetOtherDeviceByDeviceIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginGetInterconnections(bool isOptional, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetInterconnections(isOptional, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.Dictionary<int, string> openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndGetInterconnections(System.IAsyncResult result) {
            return base.Channel.EndGetInterconnections(result);
        }
        
        private System.IAsyncResult OnBeginGetInterconnections(object[] inValues, System.AsyncCallback callback, object asyncState) {
            bool isOptional = ((bool)(inValues[0]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetInterconnections(isOptional, callback, asyncState);
        }
        
        private object[] OnEndGetInterconnections(System.IAsyncResult result) {
            System.Collections.Generic.Dictionary<int, string> retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetInterconnections(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetInterconnectionsCompleted(object state) {
            if ((this.GetInterconnectionsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetInterconnectionsCompleted(this, new GetInterconnectionsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetInterconnectionsAsync(bool isOptional) {
            this.GetInterconnectionsAsync(isOptional, null);
        }
        
        public void GetInterconnectionsAsync(bool isOptional, object userState) {
            if ((this.onBeginGetInterconnectionsDelegate == null)) {
                this.onBeginGetInterconnectionsDelegate = new BeginOperationDelegate(this.OnBeginGetInterconnections);
            }
            if ((this.onEndGetInterconnectionsDelegate == null)) {
                this.onEndGetInterconnectionsDelegate = new EndOperationDelegate(this.OnEndGetInterconnections);
            }
            if ((this.onGetInterconnectionsCompletedDelegate == null)) {
                this.onGetInterconnectionsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetInterconnectionsCompleted);
            }
            base.InvokeAsync(this.onBeginGetInterconnectionsDelegate, new object[] {
                        isOptional}, this.onEndGetInterconnectionsDelegate, this.onGetInterconnectionsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginGetProtocols(bool isOptional, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetProtocols(isOptional, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.Dictionary<int, string> openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndGetProtocols(System.IAsyncResult result) {
            return base.Channel.EndGetProtocols(result);
        }
        
        private System.IAsyncResult OnBeginGetProtocols(object[] inValues, System.AsyncCallback callback, object asyncState) {
            bool isOptional = ((bool)(inValues[0]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetProtocols(isOptional, callback, asyncState);
        }
        
        private object[] OnEndGetProtocols(System.IAsyncResult result) {
            System.Collections.Generic.Dictionary<int, string> retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetProtocols(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetProtocolsCompleted(object state) {
            if ((this.GetProtocolsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetProtocolsCompleted(this, new GetProtocolsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetProtocolsAsync(bool isOptional) {
            this.GetProtocolsAsync(isOptional, null);
        }
        
        public void GetProtocolsAsync(bool isOptional, object userState) {
            if ((this.onBeginGetProtocolsDelegate == null)) {
                this.onBeginGetProtocolsDelegate = new BeginOperationDelegate(this.OnBeginGetProtocols);
            }
            if ((this.onEndGetProtocolsDelegate == null)) {
                this.onEndGetProtocolsDelegate = new EndOperationDelegate(this.OnEndGetProtocols);
            }
            if ((this.onGetProtocolsCompletedDelegate == null)) {
                this.onGetProtocolsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetProtocolsCompleted);
            }
            base.InvokeAsync(this.onBeginGetProtocolsDelegate, new object[] {
                        isOptional}, this.onEndGetProtocolsDelegate, this.onGetProtocolsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginGetProtocolIDByAcronym(string acronym, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetProtocolIDByAcronym(acronym, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndGetProtocolIDByAcronym(System.IAsyncResult result) {
            return base.Channel.EndGetProtocolIDByAcronym(result);
        }
        
        private System.IAsyncResult OnBeginGetProtocolIDByAcronym(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string acronym = ((string)(inValues[0]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetProtocolIDByAcronym(acronym, callback, asyncState);
        }
        
        private object[] OnEndGetProtocolIDByAcronym(System.IAsyncResult result) {
            int retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetProtocolIDByAcronym(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetProtocolIDByAcronymCompleted(object state) {
            if ((this.GetProtocolIDByAcronymCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetProtocolIDByAcronymCompleted(this, new GetProtocolIDByAcronymCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetProtocolIDByAcronymAsync(string acronym) {
            this.GetProtocolIDByAcronymAsync(acronym, null);
        }
        
        public void GetProtocolIDByAcronymAsync(string acronym, object userState) {
            if ((this.onBeginGetProtocolIDByAcronymDelegate == null)) {
                this.onBeginGetProtocolIDByAcronymDelegate = new BeginOperationDelegate(this.OnBeginGetProtocolIDByAcronym);
            }
            if ((this.onEndGetProtocolIDByAcronymDelegate == null)) {
                this.onEndGetProtocolIDByAcronymDelegate = new EndOperationDelegate(this.OnEndGetProtocolIDByAcronym);
            }
            if ((this.onGetProtocolIDByAcronymCompletedDelegate == null)) {
                this.onGetProtocolIDByAcronymCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetProtocolIDByAcronymCompleted);
            }
            base.InvokeAsync(this.onBeginGetProtocolIDByAcronymDelegate, new object[] {
                        acronym}, this.onEndGetProtocolIDByAcronymDelegate, this.onGetProtocolIDByAcronymCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginGetSignalTypes(bool isOptional, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSignalTypes(isOptional, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.Dictionary<int, string> openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndGetSignalTypes(System.IAsyncResult result) {
            return base.Channel.EndGetSignalTypes(result);
        }
        
        private System.IAsyncResult OnBeginGetSignalTypes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            bool isOptional = ((bool)(inValues[0]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetSignalTypes(isOptional, callback, asyncState);
        }
        
        private object[] OnEndGetSignalTypes(System.IAsyncResult result) {
            System.Collections.Generic.Dictionary<int, string> retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetSignalTypes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSignalTypesCompleted(object state) {
            if ((this.GetSignalTypesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSignalTypesCompleted(this, new GetSignalTypesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSignalTypesAsync(bool isOptional) {
            this.GetSignalTypesAsync(isOptional, null);
        }
        
        public void GetSignalTypesAsync(bool isOptional, object userState) {
            if ((this.onBeginGetSignalTypesDelegate == null)) {
                this.onBeginGetSignalTypesDelegate = new BeginOperationDelegate(this.OnBeginGetSignalTypes);
            }
            if ((this.onEndGetSignalTypesDelegate == null)) {
                this.onEndGetSignalTypesDelegate = new EndOperationDelegate(this.OnEndGetSignalTypes);
            }
            if ((this.onGetSignalTypesCompletedDelegate == null)) {
                this.onGetSignalTypesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSignalTypesCompleted);
            }
            base.InvokeAsync(this.onBeginGetSignalTypesDelegate, new object[] {
                        isOptional}, this.onEndGetSignalTypesDelegate, this.onGetSignalTypesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginGetCalculatedMeasurementList(string nodeID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCalculatedMeasurementList(nodeID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.CalculatedMeasurement> openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndGetCalculatedMeasurementList(System.IAsyncResult result) {
            return base.Channel.EndGetCalculatedMeasurementList(result);
        }
        
        private System.IAsyncResult OnBeginGetCalculatedMeasurementList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string nodeID = ((string)(inValues[0]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetCalculatedMeasurementList(nodeID, callback, asyncState);
        }
        
        private object[] OnEndGetCalculatedMeasurementList(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.CalculatedMeasurement> retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetCalculatedMeasurementList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCalculatedMeasurementListCompleted(object state) {
            if ((this.GetCalculatedMeasurementListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCalculatedMeasurementListCompleted(this, new GetCalculatedMeasurementListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCalculatedMeasurementListAsync(string nodeID) {
            this.GetCalculatedMeasurementListAsync(nodeID, null);
        }
        
        public void GetCalculatedMeasurementListAsync(string nodeID, object userState) {
            if ((this.onBeginGetCalculatedMeasurementListDelegate == null)) {
                this.onBeginGetCalculatedMeasurementListDelegate = new BeginOperationDelegate(this.OnBeginGetCalculatedMeasurementList);
            }
            if ((this.onEndGetCalculatedMeasurementListDelegate == null)) {
                this.onEndGetCalculatedMeasurementListDelegate = new EndOperationDelegate(this.OnEndGetCalculatedMeasurementList);
            }
            if ((this.onGetCalculatedMeasurementListCompletedDelegate == null)) {
                this.onGetCalculatedMeasurementListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCalculatedMeasurementListCompleted);
            }
            base.InvokeAsync(this.onBeginGetCalculatedMeasurementListDelegate, new object[] {
                        nodeID}, this.onEndGetCalculatedMeasurementListDelegate, this.onGetCalculatedMeasurementListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginSaveCalculatedMeasurement(openPDCManager.PhasorDataServiceProxy.CalculatedMeasurement calculatedMeasurement, bool isNew, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveCalculatedMeasurement(calculatedMeasurement, isNew, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndSaveCalculatedMeasurement(System.IAsyncResult result) {
            return base.Channel.EndSaveCalculatedMeasurement(result);
        }
        
        private System.IAsyncResult OnBeginSaveCalculatedMeasurement(object[] inValues, System.AsyncCallback callback, object asyncState) {
            openPDCManager.PhasorDataServiceProxy.CalculatedMeasurement calculatedMeasurement = ((openPDCManager.PhasorDataServiceProxy.CalculatedMeasurement)(inValues[0]));
            bool isNew = ((bool)(inValues[1]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginSaveCalculatedMeasurement(calculatedMeasurement, isNew, callback, asyncState);
        }
        
        private object[] OnEndSaveCalculatedMeasurement(System.IAsyncResult result) {
            string retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndSaveCalculatedMeasurement(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveCalculatedMeasurementCompleted(object state) {
            if ((this.SaveCalculatedMeasurementCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveCalculatedMeasurementCompleted(this, new SaveCalculatedMeasurementCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveCalculatedMeasurementAsync(openPDCManager.PhasorDataServiceProxy.CalculatedMeasurement calculatedMeasurement, bool isNew) {
            this.SaveCalculatedMeasurementAsync(calculatedMeasurement, isNew, null);
        }
        
        public void SaveCalculatedMeasurementAsync(openPDCManager.PhasorDataServiceProxy.CalculatedMeasurement calculatedMeasurement, bool isNew, object userState) {
            if ((this.onBeginSaveCalculatedMeasurementDelegate == null)) {
                this.onBeginSaveCalculatedMeasurementDelegate = new BeginOperationDelegate(this.OnBeginSaveCalculatedMeasurement);
            }
            if ((this.onEndSaveCalculatedMeasurementDelegate == null)) {
                this.onEndSaveCalculatedMeasurementDelegate = new EndOperationDelegate(this.OnEndSaveCalculatedMeasurement);
            }
            if ((this.onSaveCalculatedMeasurementCompletedDelegate == null)) {
                this.onSaveCalculatedMeasurementCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveCalculatedMeasurementCompleted);
            }
            base.InvokeAsync(this.onBeginSaveCalculatedMeasurementDelegate, new object[] {
                        calculatedMeasurement,
                        isNew}, this.onEndSaveCalculatedMeasurementDelegate, this.onSaveCalculatedMeasurementCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginGetAdapterList(bool enabledOnly, openPDCManager.PhasorDataServiceProxy.AdapterType adapterType, string nodeID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAdapterList(enabledOnly, adapterType, nodeID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Adapter> openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndGetAdapterList(System.IAsyncResult result) {
            return base.Channel.EndGetAdapterList(result);
        }
        
        private System.IAsyncResult OnBeginGetAdapterList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            bool enabledOnly = ((bool)(inValues[0]));
            openPDCManager.PhasorDataServiceProxy.AdapterType adapterType = ((openPDCManager.PhasorDataServiceProxy.AdapterType)(inValues[1]));
            string nodeID = ((string)(inValues[2]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetAdapterList(enabledOnly, adapterType, nodeID, callback, asyncState);
        }
        
        private object[] OnEndGetAdapterList(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Adapter> retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetAdapterList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAdapterListCompleted(object state) {
            if ((this.GetAdapterListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAdapterListCompleted(this, new GetAdapterListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAdapterListAsync(bool enabledOnly, openPDCManager.PhasorDataServiceProxy.AdapterType adapterType, string nodeID) {
            this.GetAdapterListAsync(enabledOnly, adapterType, nodeID, null);
        }
        
        public void GetAdapterListAsync(bool enabledOnly, openPDCManager.PhasorDataServiceProxy.AdapterType adapterType, string nodeID, object userState) {
            if ((this.onBeginGetAdapterListDelegate == null)) {
                this.onBeginGetAdapterListDelegate = new BeginOperationDelegate(this.OnBeginGetAdapterList);
            }
            if ((this.onEndGetAdapterListDelegate == null)) {
                this.onEndGetAdapterListDelegate = new EndOperationDelegate(this.OnEndGetAdapterList);
            }
            if ((this.onGetAdapterListCompletedDelegate == null)) {
                this.onGetAdapterListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAdapterListCompleted);
            }
            base.InvokeAsync(this.onBeginGetAdapterListDelegate, new object[] {
                        enabledOnly,
                        adapterType,
                        nodeID}, this.onEndGetAdapterListDelegate, this.onGetAdapterListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginSaveAdapter(openPDCManager.PhasorDataServiceProxy.Adapter adapter, bool isNew, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveAdapter(adapter, isNew, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndSaveAdapter(System.IAsyncResult result) {
            return base.Channel.EndSaveAdapter(result);
        }
        
        private System.IAsyncResult OnBeginSaveAdapter(object[] inValues, System.AsyncCallback callback, object asyncState) {
            openPDCManager.PhasorDataServiceProxy.Adapter adapter = ((openPDCManager.PhasorDataServiceProxy.Adapter)(inValues[0]));
            bool isNew = ((bool)(inValues[1]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginSaveAdapter(adapter, isNew, callback, asyncState);
        }
        
        private object[] OnEndSaveAdapter(System.IAsyncResult result) {
            string retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndSaveAdapter(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveAdapterCompleted(object state) {
            if ((this.SaveAdapterCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveAdapterCompleted(this, new SaveAdapterCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveAdapterAsync(openPDCManager.PhasorDataServiceProxy.Adapter adapter, bool isNew) {
            this.SaveAdapterAsync(adapter, isNew, null);
        }
        
        public void SaveAdapterAsync(openPDCManager.PhasorDataServiceProxy.Adapter adapter, bool isNew, object userState) {
            if ((this.onBeginSaveAdapterDelegate == null)) {
                this.onBeginSaveAdapterDelegate = new BeginOperationDelegate(this.OnBeginSaveAdapter);
            }
            if ((this.onEndSaveAdapterDelegate == null)) {
                this.onEndSaveAdapterDelegate = new EndOperationDelegate(this.OnEndSaveAdapter);
            }
            if ((this.onSaveAdapterCompletedDelegate == null)) {
                this.onSaveAdapterCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveAdapterCompleted);
            }
            base.InvokeAsync(this.onBeginSaveAdapterDelegate, new object[] {
                        adapter,
                        isNew}, this.onEndSaveAdapterDelegate, this.onSaveAdapterCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginGetIaonTreeData(string nodeID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetIaonTreeData(nodeID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.IaonTree> openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndGetIaonTreeData(System.IAsyncResult result) {
            return base.Channel.EndGetIaonTreeData(result);
        }
        
        private System.IAsyncResult OnBeginGetIaonTreeData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string nodeID = ((string)(inValues[0]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetIaonTreeData(nodeID, callback, asyncState);
        }
        
        private object[] OnEndGetIaonTreeData(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.IaonTree> retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetIaonTreeData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetIaonTreeDataCompleted(object state) {
            if ((this.GetIaonTreeDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetIaonTreeDataCompleted(this, new GetIaonTreeDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetIaonTreeDataAsync(string nodeID) {
            this.GetIaonTreeDataAsync(nodeID, null);
        }
        
        public void GetIaonTreeDataAsync(string nodeID, object userState) {
            if ((this.onBeginGetIaonTreeDataDelegate == null)) {
                this.onBeginGetIaonTreeDataDelegate = new BeginOperationDelegate(this.OnBeginGetIaonTreeData);
            }
            if ((this.onEndGetIaonTreeDataDelegate == null)) {
                this.onEndGetIaonTreeDataDelegate = new EndOperationDelegate(this.OnEndGetIaonTreeData);
            }
            if ((this.onGetIaonTreeDataCompletedDelegate == null)) {
                this.onGetIaonTreeDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetIaonTreeDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetIaonTreeDataDelegate, new object[] {
                        nodeID}, this.onEndGetIaonTreeDataDelegate, this.onGetIaonTreeDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginGetOutputStreamList(bool enabledOnly, string nodeID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetOutputStreamList(enabledOnly, nodeID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OutputStream> openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndGetOutputStreamList(System.IAsyncResult result) {
            return base.Channel.EndGetOutputStreamList(result);
        }
        
        private System.IAsyncResult OnBeginGetOutputStreamList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            bool enabledOnly = ((bool)(inValues[0]));
            string nodeID = ((string)(inValues[1]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetOutputStreamList(enabledOnly, nodeID, callback, asyncState);
        }
        
        private object[] OnEndGetOutputStreamList(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OutputStream> retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetOutputStreamList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetOutputStreamListCompleted(object state) {
            if ((this.GetOutputStreamListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetOutputStreamListCompleted(this, new GetOutputStreamListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetOutputStreamListAsync(bool enabledOnly, string nodeID) {
            this.GetOutputStreamListAsync(enabledOnly, nodeID, null);
        }
        
        public void GetOutputStreamListAsync(bool enabledOnly, string nodeID, object userState) {
            if ((this.onBeginGetOutputStreamListDelegate == null)) {
                this.onBeginGetOutputStreamListDelegate = new BeginOperationDelegate(this.OnBeginGetOutputStreamList);
            }
            if ((this.onEndGetOutputStreamListDelegate == null)) {
                this.onEndGetOutputStreamListDelegate = new EndOperationDelegate(this.OnEndGetOutputStreamList);
            }
            if ((this.onGetOutputStreamListCompletedDelegate == null)) {
                this.onGetOutputStreamListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetOutputStreamListCompleted);
            }
            base.InvokeAsync(this.onBeginGetOutputStreamListDelegate, new object[] {
                        enabledOnly,
                        nodeID}, this.onEndGetOutputStreamListDelegate, this.onGetOutputStreamListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginSaveOutputStream(openPDCManager.PhasorDataServiceProxy.OutputStream outputStream, bool isNew, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveOutputStream(outputStream, isNew, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndSaveOutputStream(System.IAsyncResult result) {
            return base.Channel.EndSaveOutputStream(result);
        }
        
        private System.IAsyncResult OnBeginSaveOutputStream(object[] inValues, System.AsyncCallback callback, object asyncState) {
            openPDCManager.PhasorDataServiceProxy.OutputStream outputStream = ((openPDCManager.PhasorDataServiceProxy.OutputStream)(inValues[0]));
            bool isNew = ((bool)(inValues[1]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginSaveOutputStream(outputStream, isNew, callback, asyncState);
        }
        
        private object[] OnEndSaveOutputStream(System.IAsyncResult result) {
            string retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndSaveOutputStream(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveOutputStreamCompleted(object state) {
            if ((this.SaveOutputStreamCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveOutputStreamCompleted(this, new SaveOutputStreamCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveOutputStreamAsync(openPDCManager.PhasorDataServiceProxy.OutputStream outputStream, bool isNew) {
            this.SaveOutputStreamAsync(outputStream, isNew, null);
        }
        
        public void SaveOutputStreamAsync(openPDCManager.PhasorDataServiceProxy.OutputStream outputStream, bool isNew, object userState) {
            if ((this.onBeginSaveOutputStreamDelegate == null)) {
                this.onBeginSaveOutputStreamDelegate = new BeginOperationDelegate(this.OnBeginSaveOutputStream);
            }
            if ((this.onEndSaveOutputStreamDelegate == null)) {
                this.onEndSaveOutputStreamDelegate = new EndOperationDelegate(this.OnEndSaveOutputStream);
            }
            if ((this.onSaveOutputStreamCompletedDelegate == null)) {
                this.onSaveOutputStreamCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveOutputStreamCompleted);
            }
            base.InvokeAsync(this.onBeginSaveOutputStreamDelegate, new object[] {
                        outputStream,
                        isNew}, this.onEndSaveOutputStreamDelegate, this.onSaveOutputStreamCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginDeleteOutputStream(int outputStreamID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteOutputStream(outputStreamID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndDeleteOutputStream(System.IAsyncResult result) {
            return base.Channel.EndDeleteOutputStream(result);
        }
        
        private System.IAsyncResult OnBeginDeleteOutputStream(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int outputStreamID = ((int)(inValues[0]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginDeleteOutputStream(outputStreamID, callback, asyncState);
        }
        
        private object[] OnEndDeleteOutputStream(System.IAsyncResult result) {
            string retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndDeleteOutputStream(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteOutputStreamCompleted(object state) {
            if ((this.DeleteOutputStreamCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteOutputStreamCompleted(this, new DeleteOutputStreamCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteOutputStreamAsync(int outputStreamID) {
            this.DeleteOutputStreamAsync(outputStreamID, null);
        }
        
        public void DeleteOutputStreamAsync(int outputStreamID, object userState) {
            if ((this.onBeginDeleteOutputStreamDelegate == null)) {
                this.onBeginDeleteOutputStreamDelegate = new BeginOperationDelegate(this.OnBeginDeleteOutputStream);
            }
            if ((this.onEndDeleteOutputStreamDelegate == null)) {
                this.onEndDeleteOutputStreamDelegate = new EndOperationDelegate(this.OnEndDeleteOutputStream);
            }
            if ((this.onDeleteOutputStreamCompletedDelegate == null)) {
                this.onDeleteOutputStreamCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteOutputStreamCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteOutputStreamDelegate, new object[] {
                        outputStreamID}, this.onEndDeleteOutputStreamDelegate, this.onDeleteOutputStreamCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginGetOutputStreamDeviceList(int outputStreamID, bool enabledOnly, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetOutputStreamDeviceList(outputStreamID, enabledOnly, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OutputStreamDevice> openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndGetOutputStreamDeviceList(System.IAsyncResult result) {
            return base.Channel.EndGetOutputStreamDeviceList(result);
        }
        
        private System.IAsyncResult OnBeginGetOutputStreamDeviceList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int outputStreamID = ((int)(inValues[0]));
            bool enabledOnly = ((bool)(inValues[1]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetOutputStreamDeviceList(outputStreamID, enabledOnly, callback, asyncState);
        }
        
        private object[] OnEndGetOutputStreamDeviceList(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OutputStreamDevice> retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetOutputStreamDeviceList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetOutputStreamDeviceListCompleted(object state) {
            if ((this.GetOutputStreamDeviceListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetOutputStreamDeviceListCompleted(this, new GetOutputStreamDeviceListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetOutputStreamDeviceListAsync(int outputStreamID, bool enabledOnly) {
            this.GetOutputStreamDeviceListAsync(outputStreamID, enabledOnly, null);
        }
        
        public void GetOutputStreamDeviceListAsync(int outputStreamID, bool enabledOnly, object userState) {
            if ((this.onBeginGetOutputStreamDeviceListDelegate == null)) {
                this.onBeginGetOutputStreamDeviceListDelegate = new BeginOperationDelegate(this.OnBeginGetOutputStreamDeviceList);
            }
            if ((this.onEndGetOutputStreamDeviceListDelegate == null)) {
                this.onEndGetOutputStreamDeviceListDelegate = new EndOperationDelegate(this.OnEndGetOutputStreamDeviceList);
            }
            if ((this.onGetOutputStreamDeviceListCompletedDelegate == null)) {
                this.onGetOutputStreamDeviceListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetOutputStreamDeviceListCompleted);
            }
            base.InvokeAsync(this.onBeginGetOutputStreamDeviceListDelegate, new object[] {
                        outputStreamID,
                        enabledOnly}, this.onEndGetOutputStreamDeviceListDelegate, this.onGetOutputStreamDeviceListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginSaveOutputStreamDevice(openPDCManager.PhasorDataServiceProxy.OutputStreamDevice outputStreamDevice, bool isNew, string originalAcronym, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveOutputStreamDevice(outputStreamDevice, isNew, originalAcronym, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndSaveOutputStreamDevice(System.IAsyncResult result) {
            return base.Channel.EndSaveOutputStreamDevice(result);
        }
        
        private System.IAsyncResult OnBeginSaveOutputStreamDevice(object[] inValues, System.AsyncCallback callback, object asyncState) {
            openPDCManager.PhasorDataServiceProxy.OutputStreamDevice outputStreamDevice = ((openPDCManager.PhasorDataServiceProxy.OutputStreamDevice)(inValues[0]));
            bool isNew = ((bool)(inValues[1]));
            string originalAcronym = ((string)(inValues[2]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginSaveOutputStreamDevice(outputStreamDevice, isNew, originalAcronym, callback, asyncState);
        }
        
        private object[] OnEndSaveOutputStreamDevice(System.IAsyncResult result) {
            string retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndSaveOutputStreamDevice(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveOutputStreamDeviceCompleted(object state) {
            if ((this.SaveOutputStreamDeviceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveOutputStreamDeviceCompleted(this, new SaveOutputStreamDeviceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveOutputStreamDeviceAsync(openPDCManager.PhasorDataServiceProxy.OutputStreamDevice outputStreamDevice, bool isNew, string originalAcronym) {
            this.SaveOutputStreamDeviceAsync(outputStreamDevice, isNew, originalAcronym, null);
        }
        
        public void SaveOutputStreamDeviceAsync(openPDCManager.PhasorDataServiceProxy.OutputStreamDevice outputStreamDevice, bool isNew, string originalAcronym, object userState) {
            if ((this.onBeginSaveOutputStreamDeviceDelegate == null)) {
                this.onBeginSaveOutputStreamDeviceDelegate = new BeginOperationDelegate(this.OnBeginSaveOutputStreamDevice);
            }
            if ((this.onEndSaveOutputStreamDeviceDelegate == null)) {
                this.onEndSaveOutputStreamDeviceDelegate = new EndOperationDelegate(this.OnEndSaveOutputStreamDevice);
            }
            if ((this.onSaveOutputStreamDeviceCompletedDelegate == null)) {
                this.onSaveOutputStreamDeviceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveOutputStreamDeviceCompleted);
            }
            base.InvokeAsync(this.onBeginSaveOutputStreamDeviceDelegate, new object[] {
                        outputStreamDevice,
                        isNew,
                        originalAcronym}, this.onEndSaveOutputStreamDeviceDelegate, this.onSaveOutputStreamDeviceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginDeleteOutputStreamDevice(int outputStreamID, System.Collections.ObjectModel.ObservableCollection<string> devicesToBeDeleted, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteOutputStreamDevice(outputStreamID, devicesToBeDeleted, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndDeleteOutputStreamDevice(System.IAsyncResult result) {
            return base.Channel.EndDeleteOutputStreamDevice(result);
        }
        
        private System.IAsyncResult OnBeginDeleteOutputStreamDevice(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int outputStreamID = ((int)(inValues[0]));
            System.Collections.ObjectModel.ObservableCollection<string> devicesToBeDeleted = ((System.Collections.ObjectModel.ObservableCollection<string>)(inValues[1]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginDeleteOutputStreamDevice(outputStreamID, devicesToBeDeleted, callback, asyncState);
        }
        
        private object[] OnEndDeleteOutputStreamDevice(System.IAsyncResult result) {
            string retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndDeleteOutputStreamDevice(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteOutputStreamDeviceCompleted(object state) {
            if ((this.DeleteOutputStreamDeviceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteOutputStreamDeviceCompleted(this, new DeleteOutputStreamDeviceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteOutputStreamDeviceAsync(int outputStreamID, System.Collections.ObjectModel.ObservableCollection<string> devicesToBeDeleted) {
            this.DeleteOutputStreamDeviceAsync(outputStreamID, devicesToBeDeleted, null);
        }
        
        public void DeleteOutputStreamDeviceAsync(int outputStreamID, System.Collections.ObjectModel.ObservableCollection<string> devicesToBeDeleted, object userState) {
            if ((this.onBeginDeleteOutputStreamDeviceDelegate == null)) {
                this.onBeginDeleteOutputStreamDeviceDelegate = new BeginOperationDelegate(this.OnBeginDeleteOutputStreamDevice);
            }
            if ((this.onEndDeleteOutputStreamDeviceDelegate == null)) {
                this.onEndDeleteOutputStreamDeviceDelegate = new EndOperationDelegate(this.OnEndDeleteOutputStreamDevice);
            }
            if ((this.onDeleteOutputStreamDeviceCompletedDelegate == null)) {
                this.onDeleteOutputStreamDeviceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteOutputStreamDeviceCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteOutputStreamDeviceDelegate, new object[] {
                        outputStreamID,
                        devicesToBeDeleted}, this.onEndDeleteOutputStreamDeviceDelegate, this.onDeleteOutputStreamDeviceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginAddDevices(int outputStreamID, System.Collections.Generic.Dictionary<int, string> devicesToBeAdded, bool addDigitals, bool addAnalogs, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddDevices(outputStreamID, devicesToBeAdded, addDigitals, addAnalogs, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndAddDevices(System.IAsyncResult result) {
            return base.Channel.EndAddDevices(result);
        }
        
        private System.IAsyncResult OnBeginAddDevices(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int outputStreamID = ((int)(inValues[0]));
            System.Collections.Generic.Dictionary<int, string> devicesToBeAdded = ((System.Collections.Generic.Dictionary<int, string>)(inValues[1]));
            bool addDigitals = ((bool)(inValues[2]));
            bool addAnalogs = ((bool)(inValues[3]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginAddDevices(outputStreamID, devicesToBeAdded, addDigitals, addAnalogs, callback, asyncState);
        }
        
        private object[] OnEndAddDevices(System.IAsyncResult result) {
            string retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndAddDevices(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddDevicesCompleted(object state) {
            if ((this.AddDevicesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddDevicesCompleted(this, new AddDevicesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddDevicesAsync(int outputStreamID, System.Collections.Generic.Dictionary<int, string> devicesToBeAdded, bool addDigitals, bool addAnalogs) {
            this.AddDevicesAsync(outputStreamID, devicesToBeAdded, addDigitals, addAnalogs, null);
        }
        
        public void AddDevicesAsync(int outputStreamID, System.Collections.Generic.Dictionary<int, string> devicesToBeAdded, bool addDigitals, bool addAnalogs, object userState) {
            if ((this.onBeginAddDevicesDelegate == null)) {
                this.onBeginAddDevicesDelegate = new BeginOperationDelegate(this.OnBeginAddDevices);
            }
            if ((this.onEndAddDevicesDelegate == null)) {
                this.onEndAddDevicesDelegate = new EndOperationDelegate(this.OnEndAddDevices);
            }
            if ((this.onAddDevicesCompletedDelegate == null)) {
                this.onAddDevicesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddDevicesCompleted);
            }
            base.InvokeAsync(this.onBeginAddDevicesDelegate, new object[] {
                        outputStreamID,
                        devicesToBeAdded,
                        addDigitals,
                        addAnalogs}, this.onEndAddDevicesDelegate, this.onAddDevicesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginGetOutputStreamMeasurementList(int outputStreamID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetOutputStreamMeasurementList(outputStreamID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OutputStreamMeasurement> openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndGetOutputStreamMeasurementList(System.IAsyncResult result) {
            return base.Channel.EndGetOutputStreamMeasurementList(result);
        }
        
        private System.IAsyncResult OnBeginGetOutputStreamMeasurementList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int outputStreamID = ((int)(inValues[0]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetOutputStreamMeasurementList(outputStreamID, callback, asyncState);
        }
        
        private object[] OnEndGetOutputStreamMeasurementList(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OutputStreamMeasurement> retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetOutputStreamMeasurementList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetOutputStreamMeasurementListCompleted(object state) {
            if ((this.GetOutputStreamMeasurementListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetOutputStreamMeasurementListCompleted(this, new GetOutputStreamMeasurementListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetOutputStreamMeasurementListAsync(int outputStreamID) {
            this.GetOutputStreamMeasurementListAsync(outputStreamID, null);
        }
        
        public void GetOutputStreamMeasurementListAsync(int outputStreamID, object userState) {
            if ((this.onBeginGetOutputStreamMeasurementListDelegate == null)) {
                this.onBeginGetOutputStreamMeasurementListDelegate = new BeginOperationDelegate(this.OnBeginGetOutputStreamMeasurementList);
            }
            if ((this.onEndGetOutputStreamMeasurementListDelegate == null)) {
                this.onEndGetOutputStreamMeasurementListDelegate = new EndOperationDelegate(this.OnEndGetOutputStreamMeasurementList);
            }
            if ((this.onGetOutputStreamMeasurementListCompletedDelegate == null)) {
                this.onGetOutputStreamMeasurementListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetOutputStreamMeasurementListCompleted);
            }
            base.InvokeAsync(this.onBeginGetOutputStreamMeasurementListDelegate, new object[] {
                        outputStreamID}, this.onEndGetOutputStreamMeasurementListDelegate, this.onGetOutputStreamMeasurementListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginSaveOutputStreamMeasurement(openPDCManager.PhasorDataServiceProxy.OutputStreamMeasurement outputStreamMeasurement, bool isNew, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveOutputStreamMeasurement(outputStreamMeasurement, isNew, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndSaveOutputStreamMeasurement(System.IAsyncResult result) {
            return base.Channel.EndSaveOutputStreamMeasurement(result);
        }
        
        private System.IAsyncResult OnBeginSaveOutputStreamMeasurement(object[] inValues, System.AsyncCallback callback, object asyncState) {
            openPDCManager.PhasorDataServiceProxy.OutputStreamMeasurement outputStreamMeasurement = ((openPDCManager.PhasorDataServiceProxy.OutputStreamMeasurement)(inValues[0]));
            bool isNew = ((bool)(inValues[1]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginSaveOutputStreamMeasurement(outputStreamMeasurement, isNew, callback, asyncState);
        }
        
        private object[] OnEndSaveOutputStreamMeasurement(System.IAsyncResult result) {
            string retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndSaveOutputStreamMeasurement(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveOutputStreamMeasurementCompleted(object state) {
            if ((this.SaveOutputStreamMeasurementCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveOutputStreamMeasurementCompleted(this, new SaveOutputStreamMeasurementCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveOutputStreamMeasurementAsync(openPDCManager.PhasorDataServiceProxy.OutputStreamMeasurement outputStreamMeasurement, bool isNew) {
            this.SaveOutputStreamMeasurementAsync(outputStreamMeasurement, isNew, null);
        }
        
        public void SaveOutputStreamMeasurementAsync(openPDCManager.PhasorDataServiceProxy.OutputStreamMeasurement outputStreamMeasurement, bool isNew, object userState) {
            if ((this.onBeginSaveOutputStreamMeasurementDelegate == null)) {
                this.onBeginSaveOutputStreamMeasurementDelegate = new BeginOperationDelegate(this.OnBeginSaveOutputStreamMeasurement);
            }
            if ((this.onEndSaveOutputStreamMeasurementDelegate == null)) {
                this.onEndSaveOutputStreamMeasurementDelegate = new EndOperationDelegate(this.OnEndSaveOutputStreamMeasurement);
            }
            if ((this.onSaveOutputStreamMeasurementCompletedDelegate == null)) {
                this.onSaveOutputStreamMeasurementCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveOutputStreamMeasurementCompleted);
            }
            base.InvokeAsync(this.onBeginSaveOutputStreamMeasurementDelegate, new object[] {
                        outputStreamMeasurement,
                        isNew}, this.onEndSaveOutputStreamMeasurementDelegate, this.onSaveOutputStreamMeasurementCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginDeleteOutputStreamMeasurement(int outputStreamMeasurementID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteOutputStreamMeasurement(outputStreamMeasurementID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndDeleteOutputStreamMeasurement(System.IAsyncResult result) {
            return base.Channel.EndDeleteOutputStreamMeasurement(result);
        }
        
        private System.IAsyncResult OnBeginDeleteOutputStreamMeasurement(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int outputStreamMeasurementID = ((int)(inValues[0]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginDeleteOutputStreamMeasurement(outputStreamMeasurementID, callback, asyncState);
        }
        
        private object[] OnEndDeleteOutputStreamMeasurement(System.IAsyncResult result) {
            string retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndDeleteOutputStreamMeasurement(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteOutputStreamMeasurementCompleted(object state) {
            if ((this.DeleteOutputStreamMeasurementCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteOutputStreamMeasurementCompleted(this, new DeleteOutputStreamMeasurementCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteOutputStreamMeasurementAsync(int outputStreamMeasurementID) {
            this.DeleteOutputStreamMeasurementAsync(outputStreamMeasurementID, null);
        }
        
        public void DeleteOutputStreamMeasurementAsync(int outputStreamMeasurementID, object userState) {
            if ((this.onBeginDeleteOutputStreamMeasurementDelegate == null)) {
                this.onBeginDeleteOutputStreamMeasurementDelegate = new BeginOperationDelegate(this.OnBeginDeleteOutputStreamMeasurement);
            }
            if ((this.onEndDeleteOutputStreamMeasurementDelegate == null)) {
                this.onEndDeleteOutputStreamMeasurementDelegate = new EndOperationDelegate(this.OnEndDeleteOutputStreamMeasurement);
            }
            if ((this.onDeleteOutputStreamMeasurementCompletedDelegate == null)) {
                this.onDeleteOutputStreamMeasurementCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteOutputStreamMeasurementCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteOutputStreamMeasurementDelegate, new object[] {
                        outputStreamMeasurementID}, this.onEndDeleteOutputStreamMeasurementDelegate, this.onDeleteOutputStreamMeasurementCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginGetOutputStreamDevicePhasorList(int outputStreamDeviceID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetOutputStreamDevicePhasorList(outputStreamDeviceID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OutputStreamDevicePhasor> openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndGetOutputStreamDevicePhasorList(System.IAsyncResult result) {
            return base.Channel.EndGetOutputStreamDevicePhasorList(result);
        }
        
        private System.IAsyncResult OnBeginGetOutputStreamDevicePhasorList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int outputStreamDeviceID = ((int)(inValues[0]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetOutputStreamDevicePhasorList(outputStreamDeviceID, callback, asyncState);
        }
        
        private object[] OnEndGetOutputStreamDevicePhasorList(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OutputStreamDevicePhasor> retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetOutputStreamDevicePhasorList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetOutputStreamDevicePhasorListCompleted(object state) {
            if ((this.GetOutputStreamDevicePhasorListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetOutputStreamDevicePhasorListCompleted(this, new GetOutputStreamDevicePhasorListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetOutputStreamDevicePhasorListAsync(int outputStreamDeviceID) {
            this.GetOutputStreamDevicePhasorListAsync(outputStreamDeviceID, null);
        }
        
        public void GetOutputStreamDevicePhasorListAsync(int outputStreamDeviceID, object userState) {
            if ((this.onBeginGetOutputStreamDevicePhasorListDelegate == null)) {
                this.onBeginGetOutputStreamDevicePhasorListDelegate = new BeginOperationDelegate(this.OnBeginGetOutputStreamDevicePhasorList);
            }
            if ((this.onEndGetOutputStreamDevicePhasorListDelegate == null)) {
                this.onEndGetOutputStreamDevicePhasorListDelegate = new EndOperationDelegate(this.OnEndGetOutputStreamDevicePhasorList);
            }
            if ((this.onGetOutputStreamDevicePhasorListCompletedDelegate == null)) {
                this.onGetOutputStreamDevicePhasorListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetOutputStreamDevicePhasorListCompleted);
            }
            base.InvokeAsync(this.onBeginGetOutputStreamDevicePhasorListDelegate, new object[] {
                        outputStreamDeviceID}, this.onEndGetOutputStreamDevicePhasorListDelegate, this.onGetOutputStreamDevicePhasorListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginGetNodeList(bool enabledOnly, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetNodeList(enabledOnly, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Node> openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndGetNodeList(System.IAsyncResult result) {
            return base.Channel.EndGetNodeList(result);
        }
        
        private System.IAsyncResult OnBeginGetNodeList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            bool enabledOnly = ((bool)(inValues[0]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetNodeList(enabledOnly, callback, asyncState);
        }
        
        private object[] OnEndGetNodeList(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Node> retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetNodeList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetNodeListCompleted(object state) {
            if ((this.GetNodeListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetNodeListCompleted(this, new GetNodeListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetNodeListAsync(bool enabledOnly) {
            this.GetNodeListAsync(enabledOnly, null);
        }
        
        public void GetNodeListAsync(bool enabledOnly, object userState) {
            if ((this.onBeginGetNodeListDelegate == null)) {
                this.onBeginGetNodeListDelegate = new BeginOperationDelegate(this.OnBeginGetNodeList);
            }
            if ((this.onEndGetNodeListDelegate == null)) {
                this.onEndGetNodeListDelegate = new EndOperationDelegate(this.OnEndGetNodeList);
            }
            if ((this.onGetNodeListCompletedDelegate == null)) {
                this.onGetNodeListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetNodeListCompleted);
            }
            base.InvokeAsync(this.onBeginGetNodeListDelegate, new object[] {
                        enabledOnly}, this.onEndGetNodeListDelegate, this.onGetNodeListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginGetNodes(bool enabledOnly, bool isOptional, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetNodes(enabledOnly, isOptional, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.Dictionary<string, string> openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndGetNodes(System.IAsyncResult result) {
            return base.Channel.EndGetNodes(result);
        }
        
        private System.IAsyncResult OnBeginGetNodes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            bool enabledOnly = ((bool)(inValues[0]));
            bool isOptional = ((bool)(inValues[1]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetNodes(enabledOnly, isOptional, callback, asyncState);
        }
        
        private object[] OnEndGetNodes(System.IAsyncResult result) {
            System.Collections.Generic.Dictionary<string, string> retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetNodes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetNodesCompleted(object state) {
            if ((this.GetNodesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetNodesCompleted(this, new GetNodesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetNodesAsync(bool enabledOnly, bool isOptional) {
            this.GetNodesAsync(enabledOnly, isOptional, null);
        }
        
        public void GetNodesAsync(bool enabledOnly, bool isOptional, object userState) {
            if ((this.onBeginGetNodesDelegate == null)) {
                this.onBeginGetNodesDelegate = new BeginOperationDelegate(this.OnBeginGetNodes);
            }
            if ((this.onEndGetNodesDelegate == null)) {
                this.onEndGetNodesDelegate = new EndOperationDelegate(this.OnEndGetNodes);
            }
            if ((this.onGetNodesCompletedDelegate == null)) {
                this.onGetNodesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetNodesCompleted);
            }
            base.InvokeAsync(this.onBeginGetNodesDelegate, new object[] {
                        enabledOnly,
                        isOptional}, this.onEndGetNodesDelegate, this.onGetNodesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginSaveNode(openPDCManager.PhasorDataServiceProxy.Node node, bool isNew, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveNode(node, isNew, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndSaveNode(System.IAsyncResult result) {
            return base.Channel.EndSaveNode(result);
        }
        
        private System.IAsyncResult OnBeginSaveNode(object[] inValues, System.AsyncCallback callback, object asyncState) {
            openPDCManager.PhasorDataServiceProxy.Node node = ((openPDCManager.PhasorDataServiceProxy.Node)(inValues[0]));
            bool isNew = ((bool)(inValues[1]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginSaveNode(node, isNew, callback, asyncState);
        }
        
        private object[] OnEndSaveNode(System.IAsyncResult result) {
            string retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndSaveNode(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveNodeCompleted(object state) {
            if ((this.SaveNodeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveNodeCompleted(this, new SaveNodeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveNodeAsync(openPDCManager.PhasorDataServiceProxy.Node node, bool isNew) {
            this.SaveNodeAsync(node, isNew, null);
        }
        
        public void SaveNodeAsync(openPDCManager.PhasorDataServiceProxy.Node node, bool isNew, object userState) {
            if ((this.onBeginSaveNodeDelegate == null)) {
                this.onBeginSaveNodeDelegate = new BeginOperationDelegate(this.OnBeginSaveNode);
            }
            if ((this.onEndSaveNodeDelegate == null)) {
                this.onEndSaveNodeDelegate = new EndOperationDelegate(this.OnEndSaveNode);
            }
            if ((this.onSaveNodeCompletedDelegate == null)) {
                this.onSaveNodeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveNodeCompleted);
            }
            base.InvokeAsync(this.onBeginSaveNodeDelegate, new object[] {
                        node,
                        isNew}, this.onEndSaveNodeDelegate, this.onSaveNodeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginGetNodeByID(string id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetNodeByID(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        openPDCManager.PhasorDataServiceProxy.Node openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndGetNodeByID(System.IAsyncResult result) {
            return base.Channel.EndGetNodeByID(result);
        }
        
        private System.IAsyncResult OnBeginGetNodeByID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string id = ((string)(inValues[0]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetNodeByID(id, callback, asyncState);
        }
        
        private object[] OnEndGetNodeByID(System.IAsyncResult result) {
            openPDCManager.PhasorDataServiceProxy.Node retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetNodeByID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetNodeByIDCompleted(object state) {
            if ((this.GetNodeByIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetNodeByIDCompleted(this, new GetNodeByIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetNodeByIDAsync(string id) {
            this.GetNodeByIDAsync(id, null);
        }
        
        public void GetNodeByIDAsync(string id, object userState) {
            if ((this.onBeginGetNodeByIDDelegate == null)) {
                this.onBeginGetNodeByIDDelegate = new BeginOperationDelegate(this.OnBeginGetNodeByID);
            }
            if ((this.onEndGetNodeByIDDelegate == null)) {
                this.onEndGetNodeByIDDelegate = new EndOperationDelegate(this.OnEndGetNodeByID);
            }
            if ((this.onGetNodeByIDCompletedDelegate == null)) {
                this.onGetNodeByIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetNodeByIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetNodeByIDDelegate, new object[] {
                        id}, this.onEndGetNodeByIDDelegate, this.onGetNodeByIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginGetCompanyList(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCompanyList(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Company> openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndGetCompanyList(System.IAsyncResult result) {
            return base.Channel.EndGetCompanyList(result);
        }
        
        private System.IAsyncResult OnBeginGetCompanyList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetCompanyList(callback, asyncState);
        }
        
        private object[] OnEndGetCompanyList(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Company> retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetCompanyList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCompanyListCompleted(object state) {
            if ((this.GetCompanyListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCompanyListCompleted(this, new GetCompanyListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCompanyListAsync() {
            this.GetCompanyListAsync(null);
        }
        
        public void GetCompanyListAsync(object userState) {
            if ((this.onBeginGetCompanyListDelegate == null)) {
                this.onBeginGetCompanyListDelegate = new BeginOperationDelegate(this.OnBeginGetCompanyList);
            }
            if ((this.onEndGetCompanyListDelegate == null)) {
                this.onEndGetCompanyListDelegate = new EndOperationDelegate(this.OnEndGetCompanyList);
            }
            if ((this.onGetCompanyListCompletedDelegate == null)) {
                this.onGetCompanyListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCompanyListCompleted);
            }
            base.InvokeAsync(this.onBeginGetCompanyListDelegate, null, this.onEndGetCompanyListDelegate, this.onGetCompanyListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginGetCompanies(bool isOptional, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCompanies(isOptional, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.Dictionary<int, string> openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndGetCompanies(System.IAsyncResult result) {
            return base.Channel.EndGetCompanies(result);
        }
        
        private System.IAsyncResult OnBeginGetCompanies(object[] inValues, System.AsyncCallback callback, object asyncState) {
            bool isOptional = ((bool)(inValues[0]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetCompanies(isOptional, callback, asyncState);
        }
        
        private object[] OnEndGetCompanies(System.IAsyncResult result) {
            System.Collections.Generic.Dictionary<int, string> retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetCompanies(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCompaniesCompleted(object state) {
            if ((this.GetCompaniesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCompaniesCompleted(this, new GetCompaniesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCompaniesAsync(bool isOptional) {
            this.GetCompaniesAsync(isOptional, null);
        }
        
        public void GetCompaniesAsync(bool isOptional, object userState) {
            if ((this.onBeginGetCompaniesDelegate == null)) {
                this.onBeginGetCompaniesDelegate = new BeginOperationDelegate(this.OnBeginGetCompanies);
            }
            if ((this.onEndGetCompaniesDelegate == null)) {
                this.onEndGetCompaniesDelegate = new EndOperationDelegate(this.OnEndGetCompanies);
            }
            if ((this.onGetCompaniesCompletedDelegate == null)) {
                this.onGetCompaniesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCompaniesCompleted);
            }
            base.InvokeAsync(this.onBeginGetCompaniesDelegate, new object[] {
                        isOptional}, this.onEndGetCompaniesDelegate, this.onGetCompaniesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginSaveCompany(openPDCManager.PhasorDataServiceProxy.Company company, bool isNew, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveCompany(company, isNew, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndSaveCompany(System.IAsyncResult result) {
            return base.Channel.EndSaveCompany(result);
        }
        
        private System.IAsyncResult OnBeginSaveCompany(object[] inValues, System.AsyncCallback callback, object asyncState) {
            openPDCManager.PhasorDataServiceProxy.Company company = ((openPDCManager.PhasorDataServiceProxy.Company)(inValues[0]));
            bool isNew = ((bool)(inValues[1]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginSaveCompany(company, isNew, callback, asyncState);
        }
        
        private object[] OnEndSaveCompany(System.IAsyncResult result) {
            string retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndSaveCompany(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveCompanyCompleted(object state) {
            if ((this.SaveCompanyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveCompanyCompleted(this, new SaveCompanyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveCompanyAsync(openPDCManager.PhasorDataServiceProxy.Company company, bool isNew) {
            this.SaveCompanyAsync(company, isNew, null);
        }
        
        public void SaveCompanyAsync(openPDCManager.PhasorDataServiceProxy.Company company, bool isNew, object userState) {
            if ((this.onBeginSaveCompanyDelegate == null)) {
                this.onBeginSaveCompanyDelegate = new BeginOperationDelegate(this.OnBeginSaveCompany);
            }
            if ((this.onEndSaveCompanyDelegate == null)) {
                this.onEndSaveCompanyDelegate = new EndOperationDelegate(this.OnEndSaveCompany);
            }
            if ((this.onSaveCompanyCompletedDelegate == null)) {
                this.onSaveCompanyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveCompanyCompleted);
            }
            base.InvokeAsync(this.onBeginSaveCompanyDelegate, new object[] {
                        company,
                        isNew}, this.onEndSaveCompanyDelegate, this.onSaveCompanyCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginGetHistorianList(string nodeID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetHistorianList(nodeID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Historian> openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndGetHistorianList(System.IAsyncResult result) {
            return base.Channel.EndGetHistorianList(result);
        }
        
        private System.IAsyncResult OnBeginGetHistorianList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string nodeID = ((string)(inValues[0]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetHistorianList(nodeID, callback, asyncState);
        }
        
        private object[] OnEndGetHistorianList(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Historian> retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetHistorianList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetHistorianListCompleted(object state) {
            if ((this.GetHistorianListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetHistorianListCompleted(this, new GetHistorianListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetHistorianListAsync(string nodeID) {
            this.GetHistorianListAsync(nodeID, null);
        }
        
        public void GetHistorianListAsync(string nodeID, object userState) {
            if ((this.onBeginGetHistorianListDelegate == null)) {
                this.onBeginGetHistorianListDelegate = new BeginOperationDelegate(this.OnBeginGetHistorianList);
            }
            if ((this.onEndGetHistorianListDelegate == null)) {
                this.onEndGetHistorianListDelegate = new EndOperationDelegate(this.OnEndGetHistorianList);
            }
            if ((this.onGetHistorianListCompletedDelegate == null)) {
                this.onGetHistorianListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetHistorianListCompleted);
            }
            base.InvokeAsync(this.onBeginGetHistorianListDelegate, new object[] {
                        nodeID}, this.onEndGetHistorianListDelegate, this.onGetHistorianListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginSaveHistorian(openPDCManager.PhasorDataServiceProxy.Historian historian, bool isNew, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveHistorian(historian, isNew, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndSaveHistorian(System.IAsyncResult result) {
            return base.Channel.EndSaveHistorian(result);
        }
        
        private System.IAsyncResult OnBeginSaveHistorian(object[] inValues, System.AsyncCallback callback, object asyncState) {
            openPDCManager.PhasorDataServiceProxy.Historian historian = ((openPDCManager.PhasorDataServiceProxy.Historian)(inValues[0]));
            bool isNew = ((bool)(inValues[1]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginSaveHistorian(historian, isNew, callback, asyncState);
        }
        
        private object[] OnEndSaveHistorian(System.IAsyncResult result) {
            string retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndSaveHistorian(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveHistorianCompleted(object state) {
            if ((this.SaveHistorianCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveHistorianCompleted(this, new SaveHistorianCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveHistorianAsync(openPDCManager.PhasorDataServiceProxy.Historian historian, bool isNew) {
            this.SaveHistorianAsync(historian, isNew, null);
        }
        
        public void SaveHistorianAsync(openPDCManager.PhasorDataServiceProxy.Historian historian, bool isNew, object userState) {
            if ((this.onBeginSaveHistorianDelegate == null)) {
                this.onBeginSaveHistorianDelegate = new BeginOperationDelegate(this.OnBeginSaveHistorian);
            }
            if ((this.onEndSaveHistorianDelegate == null)) {
                this.onEndSaveHistorianDelegate = new EndOperationDelegate(this.OnEndSaveHistorian);
            }
            if ((this.onSaveHistorianCompletedDelegate == null)) {
                this.onSaveHistorianCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveHistorianCompleted);
            }
            base.InvokeAsync(this.onBeginSaveHistorianDelegate, new object[] {
                        historian,
                        isNew}, this.onEndSaveHistorianDelegate, this.onSaveHistorianCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginGetHistorians(bool enabledOnly, bool isOptional, bool includeSTAT, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetHistorians(enabledOnly, isOptional, includeSTAT, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.Dictionary<int, string> openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndGetHistorians(System.IAsyncResult result) {
            return base.Channel.EndGetHistorians(result);
        }
        
        private System.IAsyncResult OnBeginGetHistorians(object[] inValues, System.AsyncCallback callback, object asyncState) {
            bool enabledOnly = ((bool)(inValues[0]));
            bool isOptional = ((bool)(inValues[1]));
            bool includeSTAT = ((bool)(inValues[2]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetHistorians(enabledOnly, isOptional, includeSTAT, callback, asyncState);
        }
        
        private object[] OnEndGetHistorians(System.IAsyncResult result) {
            System.Collections.Generic.Dictionary<int, string> retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetHistorians(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetHistoriansCompleted(object state) {
            if ((this.GetHistoriansCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetHistoriansCompleted(this, new GetHistoriansCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetHistoriansAsync(bool enabledOnly, bool isOptional, bool includeSTAT) {
            this.GetHistoriansAsync(enabledOnly, isOptional, includeSTAT, null);
        }
        
        public void GetHistoriansAsync(bool enabledOnly, bool isOptional, bool includeSTAT, object userState) {
            if ((this.onBeginGetHistoriansDelegate == null)) {
                this.onBeginGetHistoriansDelegate = new BeginOperationDelegate(this.OnBeginGetHistorians);
            }
            if ((this.onEndGetHistoriansDelegate == null)) {
                this.onEndGetHistoriansDelegate = new EndOperationDelegate(this.OnEndGetHistorians);
            }
            if ((this.onGetHistoriansCompletedDelegate == null)) {
                this.onGetHistoriansCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetHistoriansCompleted);
            }
            base.InvokeAsync(this.onBeginGetHistoriansDelegate, new object[] {
                        enabledOnly,
                        isOptional,
                        includeSTAT}, this.onEndGetHistoriansDelegate, this.onGetHistoriansCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginGetVendorList(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetVendorList(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Vendor> openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndGetVendorList(System.IAsyncResult result) {
            return base.Channel.EndGetVendorList(result);
        }
        
        private System.IAsyncResult OnBeginGetVendorList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetVendorList(callback, asyncState);
        }
        
        private object[] OnEndGetVendorList(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Vendor> retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetVendorList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetVendorListCompleted(object state) {
            if ((this.GetVendorListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetVendorListCompleted(this, new GetVendorListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetVendorListAsync() {
            this.GetVendorListAsync(null);
        }
        
        public void GetVendorListAsync(object userState) {
            if ((this.onBeginGetVendorListDelegate == null)) {
                this.onBeginGetVendorListDelegate = new BeginOperationDelegate(this.OnBeginGetVendorList);
            }
            if ((this.onEndGetVendorListDelegate == null)) {
                this.onEndGetVendorListDelegate = new EndOperationDelegate(this.OnEndGetVendorList);
            }
            if ((this.onGetVendorListCompletedDelegate == null)) {
                this.onGetVendorListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetVendorListCompleted);
            }
            base.InvokeAsync(this.onBeginGetVendorListDelegate, null, this.onEndGetVendorListDelegate, this.onGetVendorListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginGetVendors(bool isOptional, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetVendors(isOptional, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.Dictionary<int, string> openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndGetVendors(System.IAsyncResult result) {
            return base.Channel.EndGetVendors(result);
        }
        
        private System.IAsyncResult OnBeginGetVendors(object[] inValues, System.AsyncCallback callback, object asyncState) {
            bool isOptional = ((bool)(inValues[0]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetVendors(isOptional, callback, asyncState);
        }
        
        private object[] OnEndGetVendors(System.IAsyncResult result) {
            System.Collections.Generic.Dictionary<int, string> retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetVendors(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetVendorsCompleted(object state) {
            if ((this.GetVendorsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetVendorsCompleted(this, new GetVendorsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetVendorsAsync(bool isOptional) {
            this.GetVendorsAsync(isOptional, null);
        }
        
        public void GetVendorsAsync(bool isOptional, object userState) {
            if ((this.onBeginGetVendorsDelegate == null)) {
                this.onBeginGetVendorsDelegate = new BeginOperationDelegate(this.OnBeginGetVendors);
            }
            if ((this.onEndGetVendorsDelegate == null)) {
                this.onEndGetVendorsDelegate = new EndOperationDelegate(this.OnEndGetVendors);
            }
            if ((this.onGetVendorsCompletedDelegate == null)) {
                this.onGetVendorsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetVendorsCompleted);
            }
            base.InvokeAsync(this.onBeginGetVendorsDelegate, new object[] {
                        isOptional}, this.onEndGetVendorsDelegate, this.onGetVendorsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginSaveVendor(openPDCManager.PhasorDataServiceProxy.Vendor vendor, bool isNew, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveVendor(vendor, isNew, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndSaveVendor(System.IAsyncResult result) {
            return base.Channel.EndSaveVendor(result);
        }
        
        private System.IAsyncResult OnBeginSaveVendor(object[] inValues, System.AsyncCallback callback, object asyncState) {
            openPDCManager.PhasorDataServiceProxy.Vendor vendor = ((openPDCManager.PhasorDataServiceProxy.Vendor)(inValues[0]));
            bool isNew = ((bool)(inValues[1]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginSaveVendor(vendor, isNew, callback, asyncState);
        }
        
        private object[] OnEndSaveVendor(System.IAsyncResult result) {
            string retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndSaveVendor(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveVendorCompleted(object state) {
            if ((this.SaveVendorCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveVendorCompleted(this, new SaveVendorCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveVendorAsync(openPDCManager.PhasorDataServiceProxy.Vendor vendor, bool isNew) {
            this.SaveVendorAsync(vendor, isNew, null);
        }
        
        public void SaveVendorAsync(openPDCManager.PhasorDataServiceProxy.Vendor vendor, bool isNew, object userState) {
            if ((this.onBeginSaveVendorDelegate == null)) {
                this.onBeginSaveVendorDelegate = new BeginOperationDelegate(this.OnBeginSaveVendor);
            }
            if ((this.onEndSaveVendorDelegate == null)) {
                this.onEndSaveVendorDelegate = new EndOperationDelegate(this.OnEndSaveVendor);
            }
            if ((this.onSaveVendorCompletedDelegate == null)) {
                this.onSaveVendorCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveVendorCompleted);
            }
            base.InvokeAsync(this.onBeginSaveVendorDelegate, new object[] {
                        vendor,
                        isNew}, this.onEndSaveVendorDelegate, this.onSaveVendorCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginGetVendorDeviceList(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetVendorDeviceList(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.VendorDevice> openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndGetVendorDeviceList(System.IAsyncResult result) {
            return base.Channel.EndGetVendorDeviceList(result);
        }
        
        private System.IAsyncResult OnBeginGetVendorDeviceList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetVendorDeviceList(callback, asyncState);
        }
        
        private object[] OnEndGetVendorDeviceList(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.VendorDevice> retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetVendorDeviceList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetVendorDeviceListCompleted(object state) {
            if ((this.GetVendorDeviceListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetVendorDeviceListCompleted(this, new GetVendorDeviceListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetVendorDeviceListAsync() {
            this.GetVendorDeviceListAsync(null);
        }
        
        public void GetVendorDeviceListAsync(object userState) {
            if ((this.onBeginGetVendorDeviceListDelegate == null)) {
                this.onBeginGetVendorDeviceListDelegate = new BeginOperationDelegate(this.OnBeginGetVendorDeviceList);
            }
            if ((this.onEndGetVendorDeviceListDelegate == null)) {
                this.onEndGetVendorDeviceListDelegate = new EndOperationDelegate(this.OnEndGetVendorDeviceList);
            }
            if ((this.onGetVendorDeviceListCompletedDelegate == null)) {
                this.onGetVendorDeviceListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetVendorDeviceListCompleted);
            }
            base.InvokeAsync(this.onBeginGetVendorDeviceListDelegate, null, this.onEndGetVendorDeviceListDelegate, this.onGetVendorDeviceListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginSaveVendorDevice(openPDCManager.PhasorDataServiceProxy.VendorDevice vendorDevice, bool isNew, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveVendorDevice(vendorDevice, isNew, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndSaveVendorDevice(System.IAsyncResult result) {
            return base.Channel.EndSaveVendorDevice(result);
        }
        
        private System.IAsyncResult OnBeginSaveVendorDevice(object[] inValues, System.AsyncCallback callback, object asyncState) {
            openPDCManager.PhasorDataServiceProxy.VendorDevice vendorDevice = ((openPDCManager.PhasorDataServiceProxy.VendorDevice)(inValues[0]));
            bool isNew = ((bool)(inValues[1]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginSaveVendorDevice(vendorDevice, isNew, callback, asyncState);
        }
        
        private object[] OnEndSaveVendorDevice(System.IAsyncResult result) {
            string retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndSaveVendorDevice(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveVendorDeviceCompleted(object state) {
            if ((this.SaveVendorDeviceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveVendorDeviceCompleted(this, new SaveVendorDeviceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveVendorDeviceAsync(openPDCManager.PhasorDataServiceProxy.VendorDevice vendorDevice, bool isNew) {
            this.SaveVendorDeviceAsync(vendorDevice, isNew, null);
        }
        
        public void SaveVendorDeviceAsync(openPDCManager.PhasorDataServiceProxy.VendorDevice vendorDevice, bool isNew, object userState) {
            if ((this.onBeginSaveVendorDeviceDelegate == null)) {
                this.onBeginSaveVendorDeviceDelegate = new BeginOperationDelegate(this.OnBeginSaveVendorDevice);
            }
            if ((this.onEndSaveVendorDeviceDelegate == null)) {
                this.onEndSaveVendorDeviceDelegate = new EndOperationDelegate(this.OnEndSaveVendorDevice);
            }
            if ((this.onSaveVendorDeviceCompletedDelegate == null)) {
                this.onSaveVendorDeviceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveVendorDeviceCompleted);
            }
            base.InvokeAsync(this.onBeginSaveVendorDeviceDelegate, new object[] {
                        vendorDevice,
                        isNew}, this.onEndSaveVendorDeviceDelegate, this.onSaveVendorDeviceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginGetVendorDevices(bool isOptional, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetVendorDevices(isOptional, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.Dictionary<int, string> openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndGetVendorDevices(System.IAsyncResult result) {
            return base.Channel.EndGetVendorDevices(result);
        }
        
        private System.IAsyncResult OnBeginGetVendorDevices(object[] inValues, System.AsyncCallback callback, object asyncState) {
            bool isOptional = ((bool)(inValues[0]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetVendorDevices(isOptional, callback, asyncState);
        }
        
        private object[] OnEndGetVendorDevices(System.IAsyncResult result) {
            System.Collections.Generic.Dictionary<int, string> retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetVendorDevices(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetVendorDevicesCompleted(object state) {
            if ((this.GetVendorDevicesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetVendorDevicesCompleted(this, new GetVendorDevicesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetVendorDevicesAsync(bool isOptional) {
            this.GetVendorDevicesAsync(isOptional, null);
        }
        
        public void GetVendorDevicesAsync(bool isOptional, object userState) {
            if ((this.onBeginGetVendorDevicesDelegate == null)) {
                this.onBeginGetVendorDevicesDelegate = new BeginOperationDelegate(this.OnBeginGetVendorDevices);
            }
            if ((this.onEndGetVendorDevicesDelegate == null)) {
                this.onEndGetVendorDevicesDelegate = new EndOperationDelegate(this.OnEndGetVendorDevices);
            }
            if ((this.onGetVendorDevicesCompletedDelegate == null)) {
                this.onGetVendorDevicesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetVendorDevicesCompleted);
            }
            base.InvokeAsync(this.onBeginGetVendorDevicesDelegate, new object[] {
                        isOptional}, this.onEndGetVendorDevicesDelegate, this.onGetVendorDevicesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginGetDeviceList(string nodeID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDeviceList(nodeID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Device> openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndGetDeviceList(System.IAsyncResult result) {
            return base.Channel.EndGetDeviceList(result);
        }
        
        private System.IAsyncResult OnBeginGetDeviceList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string nodeID = ((string)(inValues[0]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetDeviceList(nodeID, callback, asyncState);
        }
        
        private object[] OnEndGetDeviceList(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Device> retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetDeviceList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDeviceListCompleted(object state) {
            if ((this.GetDeviceListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDeviceListCompleted(this, new GetDeviceListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDeviceListAsync(string nodeID) {
            this.GetDeviceListAsync(nodeID, null);
        }
        
        public void GetDeviceListAsync(string nodeID, object userState) {
            if ((this.onBeginGetDeviceListDelegate == null)) {
                this.onBeginGetDeviceListDelegate = new BeginOperationDelegate(this.OnBeginGetDeviceList);
            }
            if ((this.onEndGetDeviceListDelegate == null)) {
                this.onEndGetDeviceListDelegate = new EndOperationDelegate(this.OnEndGetDeviceList);
            }
            if ((this.onGetDeviceListCompletedDelegate == null)) {
                this.onGetDeviceListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDeviceListCompleted);
            }
            base.InvokeAsync(this.onBeginGetDeviceListDelegate, new object[] {
                        nodeID}, this.onEndGetDeviceListDelegate, this.onGetDeviceListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginGetDeviceListByParentID(int parentID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDeviceListByParentID(parentID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Device> openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndGetDeviceListByParentID(System.IAsyncResult result) {
            return base.Channel.EndGetDeviceListByParentID(result);
        }
        
        private System.IAsyncResult OnBeginGetDeviceListByParentID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int parentID = ((int)(inValues[0]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetDeviceListByParentID(parentID, callback, asyncState);
        }
        
        private object[] OnEndGetDeviceListByParentID(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Device> retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetDeviceListByParentID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDeviceListByParentIDCompleted(object state) {
            if ((this.GetDeviceListByParentIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDeviceListByParentIDCompleted(this, new GetDeviceListByParentIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDeviceListByParentIDAsync(int parentID) {
            this.GetDeviceListByParentIDAsync(parentID, null);
        }
        
        public void GetDeviceListByParentIDAsync(int parentID, object userState) {
            if ((this.onBeginGetDeviceListByParentIDDelegate == null)) {
                this.onBeginGetDeviceListByParentIDDelegate = new BeginOperationDelegate(this.OnBeginGetDeviceListByParentID);
            }
            if ((this.onEndGetDeviceListByParentIDDelegate == null)) {
                this.onEndGetDeviceListByParentIDDelegate = new EndOperationDelegate(this.OnEndGetDeviceListByParentID);
            }
            if ((this.onGetDeviceListByParentIDCompletedDelegate == null)) {
                this.onGetDeviceListByParentIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDeviceListByParentIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetDeviceListByParentIDDelegate, new object[] {
                        parentID}, this.onEndGetDeviceListByParentIDDelegate, this.onGetDeviceListByParentIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginGetDevices(openPDCManager.PhasorDataServiceProxy.DeviceType deviceType, string nodeID, bool isOptional, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDevices(deviceType, nodeID, isOptional, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.Dictionary<int, string> openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndGetDevices(System.IAsyncResult result) {
            return base.Channel.EndGetDevices(result);
        }
        
        private System.IAsyncResult OnBeginGetDevices(object[] inValues, System.AsyncCallback callback, object asyncState) {
            openPDCManager.PhasorDataServiceProxy.DeviceType deviceType = ((openPDCManager.PhasorDataServiceProxy.DeviceType)(inValues[0]));
            string nodeID = ((string)(inValues[1]));
            bool isOptional = ((bool)(inValues[2]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetDevices(deviceType, nodeID, isOptional, callback, asyncState);
        }
        
        private object[] OnEndGetDevices(System.IAsyncResult result) {
            System.Collections.Generic.Dictionary<int, string> retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetDevices(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDevicesCompleted(object state) {
            if ((this.GetDevicesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDevicesCompleted(this, new GetDevicesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDevicesAsync(openPDCManager.PhasorDataServiceProxy.DeviceType deviceType, string nodeID, bool isOptional) {
            this.GetDevicesAsync(deviceType, nodeID, isOptional, null);
        }
        
        public void GetDevicesAsync(openPDCManager.PhasorDataServiceProxy.DeviceType deviceType, string nodeID, bool isOptional, object userState) {
            if ((this.onBeginGetDevicesDelegate == null)) {
                this.onBeginGetDevicesDelegate = new BeginOperationDelegate(this.OnBeginGetDevices);
            }
            if ((this.onEndGetDevicesDelegate == null)) {
                this.onEndGetDevicesDelegate = new EndOperationDelegate(this.OnEndGetDevices);
            }
            if ((this.onGetDevicesCompletedDelegate == null)) {
                this.onGetDevicesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDevicesCompleted);
            }
            base.InvokeAsync(this.onBeginGetDevicesDelegate, new object[] {
                        deviceType,
                        nodeID,
                        isOptional}, this.onEndGetDevicesDelegate, this.onGetDevicesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginSaveDevice(openPDCManager.PhasorDataServiceProxy.Device device, bool isNew, int digitalCount, int analogCount, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveDevice(device, isNew, digitalCount, analogCount, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndSaveDevice(System.IAsyncResult result) {
            return base.Channel.EndSaveDevice(result);
        }
        
        private System.IAsyncResult OnBeginSaveDevice(object[] inValues, System.AsyncCallback callback, object asyncState) {
            openPDCManager.PhasorDataServiceProxy.Device device = ((openPDCManager.PhasorDataServiceProxy.Device)(inValues[0]));
            bool isNew = ((bool)(inValues[1]));
            int digitalCount = ((int)(inValues[2]));
            int analogCount = ((int)(inValues[3]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginSaveDevice(device, isNew, digitalCount, analogCount, callback, asyncState);
        }
        
        private object[] OnEndSaveDevice(System.IAsyncResult result) {
            string retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndSaveDevice(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveDeviceCompleted(object state) {
            if ((this.SaveDeviceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveDeviceCompleted(this, new SaveDeviceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveDeviceAsync(openPDCManager.PhasorDataServiceProxy.Device device, bool isNew, int digitalCount, int analogCount) {
            this.SaveDeviceAsync(device, isNew, digitalCount, analogCount, null);
        }
        
        public void SaveDeviceAsync(openPDCManager.PhasorDataServiceProxy.Device device, bool isNew, int digitalCount, int analogCount, object userState) {
            if ((this.onBeginSaveDeviceDelegate == null)) {
                this.onBeginSaveDeviceDelegate = new BeginOperationDelegate(this.OnBeginSaveDevice);
            }
            if ((this.onEndSaveDeviceDelegate == null)) {
                this.onEndSaveDeviceDelegate = new EndOperationDelegate(this.OnEndSaveDevice);
            }
            if ((this.onSaveDeviceCompletedDelegate == null)) {
                this.onSaveDeviceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveDeviceCompleted);
            }
            base.InvokeAsync(this.onBeginSaveDeviceDelegate, new object[] {
                        device,
                        isNew,
                        digitalCount,
                        analogCount}, this.onEndSaveDeviceDelegate, this.onSaveDeviceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginGetDeviceByDeviceID(int deviceID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDeviceByDeviceID(deviceID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        openPDCManager.PhasorDataServiceProxy.Device openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndGetDeviceByDeviceID(System.IAsyncResult result) {
            return base.Channel.EndGetDeviceByDeviceID(result);
        }
        
        private System.IAsyncResult OnBeginGetDeviceByDeviceID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int deviceID = ((int)(inValues[0]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetDeviceByDeviceID(deviceID, callback, asyncState);
        }
        
        private object[] OnEndGetDeviceByDeviceID(System.IAsyncResult result) {
            openPDCManager.PhasorDataServiceProxy.Device retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetDeviceByDeviceID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDeviceByDeviceIDCompleted(object state) {
            if ((this.GetDeviceByDeviceIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDeviceByDeviceIDCompleted(this, new GetDeviceByDeviceIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDeviceByDeviceIDAsync(int deviceID) {
            this.GetDeviceByDeviceIDAsync(deviceID, null);
        }
        
        public void GetDeviceByDeviceIDAsync(int deviceID, object userState) {
            if ((this.onBeginGetDeviceByDeviceIDDelegate == null)) {
                this.onBeginGetDeviceByDeviceIDDelegate = new BeginOperationDelegate(this.OnBeginGetDeviceByDeviceID);
            }
            if ((this.onEndGetDeviceByDeviceIDDelegate == null)) {
                this.onEndGetDeviceByDeviceIDDelegate = new EndOperationDelegate(this.OnEndGetDeviceByDeviceID);
            }
            if ((this.onGetDeviceByDeviceIDCompletedDelegate == null)) {
                this.onGetDeviceByDeviceIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDeviceByDeviceIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetDeviceByDeviceIDDelegate, new object[] {
                        deviceID}, this.onEndGetDeviceByDeviceIDDelegate, this.onGetDeviceByDeviceIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginGetDeviceByAcronym(string acronym, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDeviceByAcronym(acronym, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        openPDCManager.PhasorDataServiceProxy.Device openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndGetDeviceByAcronym(System.IAsyncResult result) {
            return base.Channel.EndGetDeviceByAcronym(result);
        }
        
        private System.IAsyncResult OnBeginGetDeviceByAcronym(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string acronym = ((string)(inValues[0]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetDeviceByAcronym(acronym, callback, asyncState);
        }
        
        private object[] OnEndGetDeviceByAcronym(System.IAsyncResult result) {
            openPDCManager.PhasorDataServiceProxy.Device retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetDeviceByAcronym(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDeviceByAcronymCompleted(object state) {
            if ((this.GetDeviceByAcronymCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDeviceByAcronymCompleted(this, new GetDeviceByAcronymCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDeviceByAcronymAsync(string acronym) {
            this.GetDeviceByAcronymAsync(acronym, null);
        }
        
        public void GetDeviceByAcronymAsync(string acronym, object userState) {
            if ((this.onBeginGetDeviceByAcronymDelegate == null)) {
                this.onBeginGetDeviceByAcronymDelegate = new BeginOperationDelegate(this.OnBeginGetDeviceByAcronym);
            }
            if ((this.onEndGetDeviceByAcronymDelegate == null)) {
                this.onEndGetDeviceByAcronymDelegate = new EndOperationDelegate(this.OnEndGetDeviceByAcronym);
            }
            if ((this.onGetDeviceByAcronymCompletedDelegate == null)) {
                this.onGetDeviceByAcronymCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDeviceByAcronymCompleted);
            }
            base.InvokeAsync(this.onBeginGetDeviceByAcronymDelegate, new object[] {
                        acronym}, this.onEndGetDeviceByAcronymDelegate, this.onGetDeviceByAcronymCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginGetDevicesForOutputStream(int outputStreamID, string nodeID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDevicesForOutputStream(outputStreamID, nodeID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.Dictionary<int, string> openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndGetDevicesForOutputStream(System.IAsyncResult result) {
            return base.Channel.EndGetDevicesForOutputStream(result);
        }
        
        private System.IAsyncResult OnBeginGetDevicesForOutputStream(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int outputStreamID = ((int)(inValues[0]));
            string nodeID = ((string)(inValues[1]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetDevicesForOutputStream(outputStreamID, nodeID, callback, asyncState);
        }
        
        private object[] OnEndGetDevicesForOutputStream(System.IAsyncResult result) {
            System.Collections.Generic.Dictionary<int, string> retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetDevicesForOutputStream(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDevicesForOutputStreamCompleted(object state) {
            if ((this.GetDevicesForOutputStreamCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDevicesForOutputStreamCompleted(this, new GetDevicesForOutputStreamCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDevicesForOutputStreamAsync(int outputStreamID, string nodeID) {
            this.GetDevicesForOutputStreamAsync(outputStreamID, nodeID, null);
        }
        
        public void GetDevicesForOutputStreamAsync(int outputStreamID, string nodeID, object userState) {
            if ((this.onBeginGetDevicesForOutputStreamDelegate == null)) {
                this.onBeginGetDevicesForOutputStreamDelegate = new BeginOperationDelegate(this.OnBeginGetDevicesForOutputStream);
            }
            if ((this.onEndGetDevicesForOutputStreamDelegate == null)) {
                this.onEndGetDevicesForOutputStreamDelegate = new EndOperationDelegate(this.OnEndGetDevicesForOutputStream);
            }
            if ((this.onGetDevicesForOutputStreamCompletedDelegate == null)) {
                this.onGetDevicesForOutputStreamCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDevicesForOutputStreamCompleted);
            }
            base.InvokeAsync(this.onBeginGetDevicesForOutputStreamDelegate, new object[] {
                        outputStreamID,
                        nodeID}, this.onEndGetDevicesForOutputStreamDelegate, this.onGetDevicesForOutputStreamCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginGetConcentratorDevice(int deviceID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetConcentratorDevice(deviceID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        openPDCManager.PhasorDataServiceProxy.Device openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndGetConcentratorDevice(System.IAsyncResult result) {
            return base.Channel.EndGetConcentratorDevice(result);
        }
        
        private System.IAsyncResult OnBeginGetConcentratorDevice(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int deviceID = ((int)(inValues[0]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetConcentratorDevice(deviceID, callback, asyncState);
        }
        
        private object[] OnEndGetConcentratorDevice(System.IAsyncResult result) {
            openPDCManager.PhasorDataServiceProxy.Device retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetConcentratorDevice(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetConcentratorDeviceCompleted(object state) {
            if ((this.GetConcentratorDeviceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetConcentratorDeviceCompleted(this, new GetConcentratorDeviceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetConcentratorDeviceAsync(int deviceID) {
            this.GetConcentratorDeviceAsync(deviceID, null);
        }
        
        public void GetConcentratorDeviceAsync(int deviceID, object userState) {
            if ((this.onBeginGetConcentratorDeviceDelegate == null)) {
                this.onBeginGetConcentratorDeviceDelegate = new BeginOperationDelegate(this.OnBeginGetConcentratorDevice);
            }
            if ((this.onEndGetConcentratorDeviceDelegate == null)) {
                this.onEndGetConcentratorDeviceDelegate = new EndOperationDelegate(this.OnEndGetConcentratorDevice);
            }
            if ((this.onGetConcentratorDeviceCompletedDelegate == null)) {
                this.onGetConcentratorDeviceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetConcentratorDeviceCompleted);
            }
            base.InvokeAsync(this.onBeginGetConcentratorDeviceDelegate, new object[] {
                        deviceID}, this.onEndGetConcentratorDeviceDelegate, this.onGetConcentratorDeviceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginDeleteDevice(int deviceID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteDevice(deviceID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndDeleteDevice(System.IAsyncResult result) {
            return base.Channel.EndDeleteDevice(result);
        }
        
        private System.IAsyncResult OnBeginDeleteDevice(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int deviceID = ((int)(inValues[0]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginDeleteDevice(deviceID, callback, asyncState);
        }
        
        private object[] OnEndDeleteDevice(System.IAsyncResult result) {
            string retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndDeleteDevice(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteDeviceCompleted(object state) {
            if ((this.DeleteDeviceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteDeviceCompleted(this, new DeleteDeviceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteDeviceAsync(int deviceID) {
            this.DeleteDeviceAsync(deviceID, null);
        }
        
        public void DeleteDeviceAsync(int deviceID, object userState) {
            if ((this.onBeginDeleteDeviceDelegate == null)) {
                this.onBeginDeleteDeviceDelegate = new BeginOperationDelegate(this.OnBeginDeleteDevice);
            }
            if ((this.onEndDeleteDeviceDelegate == null)) {
                this.onEndDeleteDeviceDelegate = new EndOperationDelegate(this.OnEndDeleteDevice);
            }
            if ((this.onDeleteDeviceCompletedDelegate == null)) {
                this.onDeleteDeviceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteDeviceCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteDeviceDelegate, new object[] {
                        deviceID}, this.onEndDeleteDeviceDelegate, this.onDeleteDeviceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginGetPhasorList(int deviceID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetPhasorList(deviceID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Phasor> openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndGetPhasorList(System.IAsyncResult result) {
            return base.Channel.EndGetPhasorList(result);
        }
        
        private System.IAsyncResult OnBeginGetPhasorList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int deviceID = ((int)(inValues[0]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetPhasorList(deviceID, callback, asyncState);
        }
        
        private object[] OnEndGetPhasorList(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Phasor> retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetPhasorList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetPhasorListCompleted(object state) {
            if ((this.GetPhasorListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetPhasorListCompleted(this, new GetPhasorListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetPhasorListAsync(int deviceID) {
            this.GetPhasorListAsync(deviceID, null);
        }
        
        public void GetPhasorListAsync(int deviceID, object userState) {
            if ((this.onBeginGetPhasorListDelegate == null)) {
                this.onBeginGetPhasorListDelegate = new BeginOperationDelegate(this.OnBeginGetPhasorList);
            }
            if ((this.onEndGetPhasorListDelegate == null)) {
                this.onEndGetPhasorListDelegate = new EndOperationDelegate(this.OnEndGetPhasorList);
            }
            if ((this.onGetPhasorListCompletedDelegate == null)) {
                this.onGetPhasorListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPhasorListCompleted);
            }
            base.InvokeAsync(this.onBeginGetPhasorListDelegate, new object[] {
                        deviceID}, this.onEndGetPhasorListDelegate, this.onGetPhasorListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginGetPhasors(int deviceID, bool isOptional, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetPhasors(deviceID, isOptional, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.Dictionary<int, string> openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndGetPhasors(System.IAsyncResult result) {
            return base.Channel.EndGetPhasors(result);
        }
        
        private System.IAsyncResult OnBeginGetPhasors(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int deviceID = ((int)(inValues[0]));
            bool isOptional = ((bool)(inValues[1]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetPhasors(deviceID, isOptional, callback, asyncState);
        }
        
        private object[] OnEndGetPhasors(System.IAsyncResult result) {
            System.Collections.Generic.Dictionary<int, string> retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetPhasors(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetPhasorsCompleted(object state) {
            if ((this.GetPhasorsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetPhasorsCompleted(this, new GetPhasorsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetPhasorsAsync(int deviceID, bool isOptional) {
            this.GetPhasorsAsync(deviceID, isOptional, null);
        }
        
        public void GetPhasorsAsync(int deviceID, bool isOptional, object userState) {
            if ((this.onBeginGetPhasorsDelegate == null)) {
                this.onBeginGetPhasorsDelegate = new BeginOperationDelegate(this.OnBeginGetPhasors);
            }
            if ((this.onEndGetPhasorsDelegate == null)) {
                this.onEndGetPhasorsDelegate = new EndOperationDelegate(this.OnEndGetPhasors);
            }
            if ((this.onGetPhasorsCompletedDelegate == null)) {
                this.onGetPhasorsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPhasorsCompleted);
            }
            base.InvokeAsync(this.onBeginGetPhasorsDelegate, new object[] {
                        deviceID,
                        isOptional}, this.onEndGetPhasorsDelegate, this.onGetPhasorsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.PhasorDataServiceProxy.IPhasorDataService.BeginSavePhasor(openPDCManager.PhasorDataServiceProxy.Phasor phasor, bool isNew, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSavePhasor(phasor, isNew, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string openPDCManager.PhasorDataServiceProxy.IPhasorDataService.EndSavePhasor(System.IAsyncResult result) {
            return base.Channel.EndSavePhasor(result);
        }
        
        private System.IAsyncResult OnBeginSavePhasor(object[] inValues, System.AsyncCallback callback, object asyncState) {
            openPDCManager.PhasorDataServiceProxy.Phasor phasor = ((openPDCManager.PhasorDataServiceProxy.Phasor)(inValues[0]));
            bool isNew = ((bool)(inValues[1]));
            return ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginSavePhasor(phasor, isNew, callback, asyncState);
        }
        
        private object[] OnEndSavePhasor(System.IAsyncResult result) {
            string retVal = ((openPDCManager.PhasorDataServiceProxy.IPhasorDataService)(this)).EndSavePhasor(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSavePhasorCompleted(object state) {
            if ((this.SavePhasorCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SavePhasorCompleted(this, new SavePhasorCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SavePhasorAsync(openPDCManager.PhasorDataServiceProxy.Phasor phasor, bool isNew) {
            this.SavePhasorAsync(phasor, isNew, null);
        }
        
        public void SavePhasorAsync(openPDCManager.PhasorDataServiceProxy.Phasor phasor, bool isNew, object userState) {
            if ((this.onBeginSavePhasorDelegate == null)) {
                this.onBeginSavePhasorDelegate = new BeginOperationDelegate(this.OnBeginSavePhasor);
            }
            if ((this.onEndSavePhasorDelegate == null)) {
                this.onEndSavePhasorDelegate = new EndOperationDelegate(this.OnEndSavePhasor);
            }
            if ((this.onSavePhasorCompletedDelegate == null)) {
                this.onSavePhasorCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSavePhasorCompleted);
            }
            base.InvokeAsync(this.onBeginSavePhasorDelegate, new object[] {
                        phasor,
                        isNew}, this.onEndSavePhasorDelegate, this.onSavePhasorCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override openPDCManager.PhasorDataServiceProxy.IPhasorDataService CreateChannel() {
            return new PhasorDataServiceClientChannel(this);
        }
        
        private class PhasorDataServiceClientChannel : ChannelBase<openPDCManager.PhasorDataServiceProxy.IPhasorDataService>, openPDCManager.PhasorDataServiceProxy.IPhasorDataService {
            
            public PhasorDataServiceClientChannel(System.ServiceModel.ClientBase<openPDCManager.PhasorDataServiceProxy.IPhasorDataService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginSaveOutputStreamDevicePhasor(openPDCManager.PhasorDataServiceProxy.OutputStreamDevicePhasor outputStreamDevicePhasor, bool isNew, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = outputStreamDevicePhasor;
                _args[1] = isNew;
                System.IAsyncResult _result = base.BeginInvoke("SaveOutputStreamDevicePhasor", _args, callback, asyncState);
                return _result;
            }
            
            public string EndSaveOutputStreamDevicePhasor(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("SaveOutputStreamDevicePhasor", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetOutputStreamDeviceAnalogList(int outputStreamDeviceID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = outputStreamDeviceID;
                System.IAsyncResult _result = base.BeginInvoke("GetOutputStreamDeviceAnalogList", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OutputStreamDeviceAnalog> EndGetOutputStreamDeviceAnalogList(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OutputStreamDeviceAnalog> _result = ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OutputStreamDeviceAnalog>)(base.EndInvoke("GetOutputStreamDeviceAnalogList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSaveOutputStreamDeviceAnalog(openPDCManager.PhasorDataServiceProxy.OutputStreamDeviceAnalog outputStreamDeviceAnalog, bool isNew, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = outputStreamDeviceAnalog;
                _args[1] = isNew;
                System.IAsyncResult _result = base.BeginInvoke("SaveOutputStreamDeviceAnalog", _args, callback, asyncState);
                return _result;
            }
            
            public string EndSaveOutputStreamDeviceAnalog(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("SaveOutputStreamDeviceAnalog", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetOutputStreamDeviceDigitalList(int outputStreamDeviceID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = outputStreamDeviceID;
                System.IAsyncResult _result = base.BeginInvoke("GetOutputStreamDeviceDigitalList", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OutputStreamDeviceDigital> EndGetOutputStreamDeviceDigitalList(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OutputStreamDeviceDigital> _result = ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OutputStreamDeviceDigital>)(base.EndInvoke("GetOutputStreamDeviceDigitalList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSaveOutputStreamDeviceDigital(openPDCManager.PhasorDataServiceProxy.OutputStreamDeviceDigital outputStreamDeviceDigital, bool isNew, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = outputStreamDeviceDigital;
                _args[1] = isNew;
                System.IAsyncResult _result = base.BeginInvoke("SaveOutputStreamDeviceDigital", _args, callback, asyncState);
                return _result;
            }
            
            public string EndSaveOutputStreamDeviceDigital(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("SaveOutputStreamDeviceDigital", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetDeviceMeasurementData(string nodeID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = nodeID;
                System.IAsyncResult _result = base.BeginInvoke("GetDeviceMeasurementData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.DeviceMeasurementData> EndGetDeviceMeasurementData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.DeviceMeasurementData> _result = ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.DeviceMeasurementData>)(base.EndInvoke("GetDeviceMeasurementData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetTimeZones(bool isOptional, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = isOptional;
                System.IAsyncResult _result = base.BeginInvoke("GetTimeZones", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.Dictionary<string, string> EndGetTimeZones(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.Dictionary<string, string> _result = ((System.Collections.Generic.Dictionary<string, string>)(base.EndInvoke("GetTimeZones", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetMapData(openPDCManager.PhasorDataServiceProxy.MapType mapType, string nodeID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = mapType;
                _args[1] = nodeID;
                System.IAsyncResult _result = base.BeginInvoke("GetMapData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.MapData> EndGetMapData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.MapData> _result = ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.MapData>)(base.EndInvoke("GetMapData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetConnectionSettings(byte[] inputStream, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = inputStream;
                System.IAsyncResult _result = base.BeginInvoke("GetConnectionSettings", _args, callback, asyncState);
                return _result;
            }
            
            public openPDCManager.PhasorDataServiceProxy.ConnectionSettings EndGetConnectionSettings(System.IAsyncResult result) {
                object[] _args = new object[0];
                openPDCManager.PhasorDataServiceProxy.ConnectionSettings _result = ((openPDCManager.PhasorDataServiceProxy.ConnectionSettings)(base.EndInvoke("GetConnectionSettings", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetWizardConfigurationInfo(byte[] inputStream, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = inputStream;
                System.IAsyncResult _result = base.BeginInvoke("GetWizardConfigurationInfo", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.WizardDeviceInfo> EndGetWizardConfigurationInfo(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.WizardDeviceInfo> _result = ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.WizardDeviceInfo>)(base.EndInvoke("GetWizardConfigurationInfo", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveConfigurationFrame(string nodeConnectionString, string deviceConnectionString, int protocolID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = nodeConnectionString;
                _args[1] = deviceConnectionString;
                _args[2] = protocolID;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveConfigurationFrame", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.WizardDeviceInfo> EndRetrieveConfigurationFrame(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.WizardDeviceInfo> _result = ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.WizardDeviceInfo>)(base.EndInvoke("RetrieveConfigurationFrame", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSaveWizardConfigurationInfo(string nodeID, System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.WizardDeviceInfo> wizardDeviceInfoList, string connectionString, System.Nullable<int> protocolID, System.Nullable<int> companyID, System.Nullable<int> historianID, System.Nullable<int> interconnectionID, System.Nullable<int> parentID, bool skipDisableRealTimeData, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[9];
                _args[0] = nodeID;
                _args[1] = wizardDeviceInfoList;
                _args[2] = connectionString;
                _args[3] = protocolID;
                _args[4] = companyID;
                _args[5] = historianID;
                _args[6] = interconnectionID;
                _args[7] = parentID;
                _args[8] = skipDisableRealTimeData;
                System.IAsyncResult _result = base.BeginInvoke("SaveWizardConfigurationInfo", _args, callback, asyncState);
                return _result;
            }
            
            public string EndSaveWizardConfigurationInfo(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("SaveWizardConfigurationInfo", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetExecutingAssemblyPath(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetExecutingAssemblyPath", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetExecutingAssemblyPath(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetExecutingAssemblyPath", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSaveIniFile(byte[] input, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = input;
                System.IAsyncResult _result = base.BeginInvoke("SaveIniFile", _args, callback, asyncState);
                return _result;
            }
            
            public string EndSaveIniFile(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("SaveIniFile", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetStopBits(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetStopBits", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<string> EndGetStopBits(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<string> _result = ((System.Collections.ObjectModel.ObservableCollection<string>)(base.EndInvoke("GetStopBits", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetParities(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetParities", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<string> EndGetParities(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<string> _result = ((System.Collections.ObjectModel.ObservableCollection<string>)(base.EndInvoke("GetParities", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetStatisticMeasurementData(string nodeID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = nodeID;
                System.IAsyncResult _result = base.BeginInvoke("GetStatisticMeasurementData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.StatisticMeasurementData> EndGetStatisticMeasurementData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.StatisticMeasurementData> _result = ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.StatisticMeasurementData>)(base.EndInvoke("GetStatisticMeasurementData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetRuntimeID(string sourceTable, int sourceID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = sourceTable;
                _args[1] = sourceID;
                System.IAsyncResult _result = base.BeginInvoke("GetRuntimeID", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetRuntimeID(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetRuntimeID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetMeasurementList(string nodeID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = nodeID;
                System.IAsyncResult _result = base.BeginInvoke("GetMeasurementList", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Measurement> EndGetMeasurementList(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Measurement> _result = ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Measurement>)(base.EndInvoke("GetMeasurementList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFilteredMeasurementsByDevice(int deviceID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = deviceID;
                System.IAsyncResult _result = base.BeginInvoke("GetFilteredMeasurementsByDevice", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Measurement> EndGetFilteredMeasurementsByDevice(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Measurement> _result = ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Measurement>)(base.EndInvoke("GetFilteredMeasurementsByDevice", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSaveMeasurement(openPDCManager.PhasorDataServiceProxy.Measurement measurement, bool isNew, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = measurement;
                _args[1] = isNew;
                System.IAsyncResult _result = base.BeginInvoke("SaveMeasurement", _args, callback, asyncState);
                return _result;
            }
            
            public string EndSaveMeasurement(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("SaveMeasurement", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetMeasurementsByDevice(int deviceID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = deviceID;
                System.IAsyncResult _result = base.BeginInvoke("GetMeasurementsByDevice", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Measurement> EndGetMeasurementsByDevice(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Measurement> _result = ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Measurement>)(base.EndInvoke("GetMeasurementsByDevice", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetMeasurementsForOutputStream(string nodeID, int outputStreamID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = nodeID;
                _args[1] = outputStreamID;
                System.IAsyncResult _result = base.BeginInvoke("GetMeasurementsForOutputStream", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Measurement> EndGetMeasurementsForOutputStream(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Measurement> _result = ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Measurement>)(base.EndInvoke("GetMeasurementsForOutputStream", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetOtherDeviceList(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetOtherDeviceList", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OtherDevice> EndGetOtherDeviceList(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OtherDevice> _result = ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OtherDevice>)(base.EndInvoke("GetOtherDeviceList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSaveOtherDevice(openPDCManager.PhasorDataServiceProxy.OtherDevice otherDevice, bool isNew, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = otherDevice;
                _args[1] = isNew;
                System.IAsyncResult _result = base.BeginInvoke("SaveOtherDevice", _args, callback, asyncState);
                return _result;
            }
            
            public string EndSaveOtherDevice(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("SaveOtherDevice", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetOtherDeviceByDeviceID(int deviceID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = deviceID;
                System.IAsyncResult _result = base.BeginInvoke("GetOtherDeviceByDeviceID", _args, callback, asyncState);
                return _result;
            }
            
            public openPDCManager.PhasorDataServiceProxy.OtherDevice EndGetOtherDeviceByDeviceID(System.IAsyncResult result) {
                object[] _args = new object[0];
                openPDCManager.PhasorDataServiceProxy.OtherDevice _result = ((openPDCManager.PhasorDataServiceProxy.OtherDevice)(base.EndInvoke("GetOtherDeviceByDeviceID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetInterconnections(bool isOptional, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = isOptional;
                System.IAsyncResult _result = base.BeginInvoke("GetInterconnections", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.Dictionary<int, string> EndGetInterconnections(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.Dictionary<int, string> _result = ((System.Collections.Generic.Dictionary<int, string>)(base.EndInvoke("GetInterconnections", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetProtocols(bool isOptional, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = isOptional;
                System.IAsyncResult _result = base.BeginInvoke("GetProtocols", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.Dictionary<int, string> EndGetProtocols(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.Dictionary<int, string> _result = ((System.Collections.Generic.Dictionary<int, string>)(base.EndInvoke("GetProtocols", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetProtocolIDByAcronym(string acronym, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = acronym;
                System.IAsyncResult _result = base.BeginInvoke("GetProtocolIDByAcronym", _args, callback, asyncState);
                return _result;
            }
            
            public int EndGetProtocolIDByAcronym(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("GetProtocolIDByAcronym", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetSignalTypes(bool isOptional, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = isOptional;
                System.IAsyncResult _result = base.BeginInvoke("GetSignalTypes", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.Dictionary<int, string> EndGetSignalTypes(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.Dictionary<int, string> _result = ((System.Collections.Generic.Dictionary<int, string>)(base.EndInvoke("GetSignalTypes", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCalculatedMeasurementList(string nodeID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = nodeID;
                System.IAsyncResult _result = base.BeginInvoke("GetCalculatedMeasurementList", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.CalculatedMeasurement> EndGetCalculatedMeasurementList(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.CalculatedMeasurement> _result = ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.CalculatedMeasurement>)(base.EndInvoke("GetCalculatedMeasurementList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSaveCalculatedMeasurement(openPDCManager.PhasorDataServiceProxy.CalculatedMeasurement calculatedMeasurement, bool isNew, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = calculatedMeasurement;
                _args[1] = isNew;
                System.IAsyncResult _result = base.BeginInvoke("SaveCalculatedMeasurement", _args, callback, asyncState);
                return _result;
            }
            
            public string EndSaveCalculatedMeasurement(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("SaveCalculatedMeasurement", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAdapterList(bool enabledOnly, openPDCManager.PhasorDataServiceProxy.AdapterType adapterType, string nodeID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = enabledOnly;
                _args[1] = adapterType;
                _args[2] = nodeID;
                System.IAsyncResult _result = base.BeginInvoke("GetAdapterList", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Adapter> EndGetAdapterList(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Adapter> _result = ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Adapter>)(base.EndInvoke("GetAdapterList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSaveAdapter(openPDCManager.PhasorDataServiceProxy.Adapter adapter, bool isNew, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = adapter;
                _args[1] = isNew;
                System.IAsyncResult _result = base.BeginInvoke("SaveAdapter", _args, callback, asyncState);
                return _result;
            }
            
            public string EndSaveAdapter(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("SaveAdapter", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetIaonTreeData(string nodeID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = nodeID;
                System.IAsyncResult _result = base.BeginInvoke("GetIaonTreeData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.IaonTree> EndGetIaonTreeData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.IaonTree> _result = ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.IaonTree>)(base.EndInvoke("GetIaonTreeData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetOutputStreamList(bool enabledOnly, string nodeID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = enabledOnly;
                _args[1] = nodeID;
                System.IAsyncResult _result = base.BeginInvoke("GetOutputStreamList", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OutputStream> EndGetOutputStreamList(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OutputStream> _result = ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OutputStream>)(base.EndInvoke("GetOutputStreamList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSaveOutputStream(openPDCManager.PhasorDataServiceProxy.OutputStream outputStream, bool isNew, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = outputStream;
                _args[1] = isNew;
                System.IAsyncResult _result = base.BeginInvoke("SaveOutputStream", _args, callback, asyncState);
                return _result;
            }
            
            public string EndSaveOutputStream(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("SaveOutputStream", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteOutputStream(int outputStreamID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = outputStreamID;
                System.IAsyncResult _result = base.BeginInvoke("DeleteOutputStream", _args, callback, asyncState);
                return _result;
            }
            
            public string EndDeleteOutputStream(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("DeleteOutputStream", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetOutputStreamDeviceList(int outputStreamID, bool enabledOnly, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = outputStreamID;
                _args[1] = enabledOnly;
                System.IAsyncResult _result = base.BeginInvoke("GetOutputStreamDeviceList", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OutputStreamDevice> EndGetOutputStreamDeviceList(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OutputStreamDevice> _result = ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OutputStreamDevice>)(base.EndInvoke("GetOutputStreamDeviceList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSaveOutputStreamDevice(openPDCManager.PhasorDataServiceProxy.OutputStreamDevice outputStreamDevice, bool isNew, string originalAcronym, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = outputStreamDevice;
                _args[1] = isNew;
                _args[2] = originalAcronym;
                System.IAsyncResult _result = base.BeginInvoke("SaveOutputStreamDevice", _args, callback, asyncState);
                return _result;
            }
            
            public string EndSaveOutputStreamDevice(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("SaveOutputStreamDevice", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteOutputStreamDevice(int outputStreamID, System.Collections.ObjectModel.ObservableCollection<string> devicesToBeDeleted, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = outputStreamID;
                _args[1] = devicesToBeDeleted;
                System.IAsyncResult _result = base.BeginInvoke("DeleteOutputStreamDevice", _args, callback, asyncState);
                return _result;
            }
            
            public string EndDeleteOutputStreamDevice(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("DeleteOutputStreamDevice", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddDevices(int outputStreamID, System.Collections.Generic.Dictionary<int, string> devicesToBeAdded, bool addDigitals, bool addAnalogs, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = outputStreamID;
                _args[1] = devicesToBeAdded;
                _args[2] = addDigitals;
                _args[3] = addAnalogs;
                System.IAsyncResult _result = base.BeginInvoke("AddDevices", _args, callback, asyncState);
                return _result;
            }
            
            public string EndAddDevices(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("AddDevices", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetOutputStreamMeasurementList(int outputStreamID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = outputStreamID;
                System.IAsyncResult _result = base.BeginInvoke("GetOutputStreamMeasurementList", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OutputStreamMeasurement> EndGetOutputStreamMeasurementList(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OutputStreamMeasurement> _result = ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OutputStreamMeasurement>)(base.EndInvoke("GetOutputStreamMeasurementList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSaveOutputStreamMeasurement(openPDCManager.PhasorDataServiceProxy.OutputStreamMeasurement outputStreamMeasurement, bool isNew, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = outputStreamMeasurement;
                _args[1] = isNew;
                System.IAsyncResult _result = base.BeginInvoke("SaveOutputStreamMeasurement", _args, callback, asyncState);
                return _result;
            }
            
            public string EndSaveOutputStreamMeasurement(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("SaveOutputStreamMeasurement", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteOutputStreamMeasurement(int outputStreamMeasurementID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = outputStreamMeasurementID;
                System.IAsyncResult _result = base.BeginInvoke("DeleteOutputStreamMeasurement", _args, callback, asyncState);
                return _result;
            }
            
            public string EndDeleteOutputStreamMeasurement(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("DeleteOutputStreamMeasurement", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetOutputStreamDevicePhasorList(int outputStreamDeviceID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = outputStreamDeviceID;
                System.IAsyncResult _result = base.BeginInvoke("GetOutputStreamDevicePhasorList", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OutputStreamDevicePhasor> EndGetOutputStreamDevicePhasorList(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OutputStreamDevicePhasor> _result = ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.OutputStreamDevicePhasor>)(base.EndInvoke("GetOutputStreamDevicePhasorList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetNodeList(bool enabledOnly, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = enabledOnly;
                System.IAsyncResult _result = base.BeginInvoke("GetNodeList", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Node> EndGetNodeList(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Node> _result = ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Node>)(base.EndInvoke("GetNodeList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetNodes(bool enabledOnly, bool isOptional, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = enabledOnly;
                _args[1] = isOptional;
                System.IAsyncResult _result = base.BeginInvoke("GetNodes", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.Dictionary<string, string> EndGetNodes(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.Dictionary<string, string> _result = ((System.Collections.Generic.Dictionary<string, string>)(base.EndInvoke("GetNodes", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSaveNode(openPDCManager.PhasorDataServiceProxy.Node node, bool isNew, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = node;
                _args[1] = isNew;
                System.IAsyncResult _result = base.BeginInvoke("SaveNode", _args, callback, asyncState);
                return _result;
            }
            
            public string EndSaveNode(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("SaveNode", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetNodeByID(string id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = id;
                System.IAsyncResult _result = base.BeginInvoke("GetNodeByID", _args, callback, asyncState);
                return _result;
            }
            
            public openPDCManager.PhasorDataServiceProxy.Node EndGetNodeByID(System.IAsyncResult result) {
                object[] _args = new object[0];
                openPDCManager.PhasorDataServiceProxy.Node _result = ((openPDCManager.PhasorDataServiceProxy.Node)(base.EndInvoke("GetNodeByID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCompanyList(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetCompanyList", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Company> EndGetCompanyList(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Company> _result = ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Company>)(base.EndInvoke("GetCompanyList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCompanies(bool isOptional, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = isOptional;
                System.IAsyncResult _result = base.BeginInvoke("GetCompanies", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.Dictionary<int, string> EndGetCompanies(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.Dictionary<int, string> _result = ((System.Collections.Generic.Dictionary<int, string>)(base.EndInvoke("GetCompanies", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSaveCompany(openPDCManager.PhasorDataServiceProxy.Company company, bool isNew, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = company;
                _args[1] = isNew;
                System.IAsyncResult _result = base.BeginInvoke("SaveCompany", _args, callback, asyncState);
                return _result;
            }
            
            public string EndSaveCompany(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("SaveCompany", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetHistorianList(string nodeID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = nodeID;
                System.IAsyncResult _result = base.BeginInvoke("GetHistorianList", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Historian> EndGetHistorianList(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Historian> _result = ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Historian>)(base.EndInvoke("GetHistorianList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSaveHistorian(openPDCManager.PhasorDataServiceProxy.Historian historian, bool isNew, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = historian;
                _args[1] = isNew;
                System.IAsyncResult _result = base.BeginInvoke("SaveHistorian", _args, callback, asyncState);
                return _result;
            }
            
            public string EndSaveHistorian(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("SaveHistorian", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetHistorians(bool enabledOnly, bool isOptional, bool includeSTAT, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = enabledOnly;
                _args[1] = isOptional;
                _args[2] = includeSTAT;
                System.IAsyncResult _result = base.BeginInvoke("GetHistorians", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.Dictionary<int, string> EndGetHistorians(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.Dictionary<int, string> _result = ((System.Collections.Generic.Dictionary<int, string>)(base.EndInvoke("GetHistorians", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetVendorList(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetVendorList", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Vendor> EndGetVendorList(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Vendor> _result = ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Vendor>)(base.EndInvoke("GetVendorList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetVendors(bool isOptional, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = isOptional;
                System.IAsyncResult _result = base.BeginInvoke("GetVendors", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.Dictionary<int, string> EndGetVendors(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.Dictionary<int, string> _result = ((System.Collections.Generic.Dictionary<int, string>)(base.EndInvoke("GetVendors", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSaveVendor(openPDCManager.PhasorDataServiceProxy.Vendor vendor, bool isNew, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = vendor;
                _args[1] = isNew;
                System.IAsyncResult _result = base.BeginInvoke("SaveVendor", _args, callback, asyncState);
                return _result;
            }
            
            public string EndSaveVendor(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("SaveVendor", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetVendorDeviceList(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetVendorDeviceList", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.VendorDevice> EndGetVendorDeviceList(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.VendorDevice> _result = ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.VendorDevice>)(base.EndInvoke("GetVendorDeviceList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSaveVendorDevice(openPDCManager.PhasorDataServiceProxy.VendorDevice vendorDevice, bool isNew, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = vendorDevice;
                _args[1] = isNew;
                System.IAsyncResult _result = base.BeginInvoke("SaveVendorDevice", _args, callback, asyncState);
                return _result;
            }
            
            public string EndSaveVendorDevice(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("SaveVendorDevice", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetVendorDevices(bool isOptional, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = isOptional;
                System.IAsyncResult _result = base.BeginInvoke("GetVendorDevices", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.Dictionary<int, string> EndGetVendorDevices(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.Dictionary<int, string> _result = ((System.Collections.Generic.Dictionary<int, string>)(base.EndInvoke("GetVendorDevices", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetDeviceList(string nodeID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = nodeID;
                System.IAsyncResult _result = base.BeginInvoke("GetDeviceList", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Device> EndGetDeviceList(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Device> _result = ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Device>)(base.EndInvoke("GetDeviceList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetDeviceListByParentID(int parentID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = parentID;
                System.IAsyncResult _result = base.BeginInvoke("GetDeviceListByParentID", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Device> EndGetDeviceListByParentID(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Device> _result = ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Device>)(base.EndInvoke("GetDeviceListByParentID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetDevices(openPDCManager.PhasorDataServiceProxy.DeviceType deviceType, string nodeID, bool isOptional, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = deviceType;
                _args[1] = nodeID;
                _args[2] = isOptional;
                System.IAsyncResult _result = base.BeginInvoke("GetDevices", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.Dictionary<int, string> EndGetDevices(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.Dictionary<int, string> _result = ((System.Collections.Generic.Dictionary<int, string>)(base.EndInvoke("GetDevices", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSaveDevice(openPDCManager.PhasorDataServiceProxy.Device device, bool isNew, int digitalCount, int analogCount, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = device;
                _args[1] = isNew;
                _args[2] = digitalCount;
                _args[3] = analogCount;
                System.IAsyncResult _result = base.BeginInvoke("SaveDevice", _args, callback, asyncState);
                return _result;
            }
            
            public string EndSaveDevice(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("SaveDevice", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetDeviceByDeviceID(int deviceID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = deviceID;
                System.IAsyncResult _result = base.BeginInvoke("GetDeviceByDeviceID", _args, callback, asyncState);
                return _result;
            }
            
            public openPDCManager.PhasorDataServiceProxy.Device EndGetDeviceByDeviceID(System.IAsyncResult result) {
                object[] _args = new object[0];
                openPDCManager.PhasorDataServiceProxy.Device _result = ((openPDCManager.PhasorDataServiceProxy.Device)(base.EndInvoke("GetDeviceByDeviceID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetDeviceByAcronym(string acronym, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = acronym;
                System.IAsyncResult _result = base.BeginInvoke("GetDeviceByAcronym", _args, callback, asyncState);
                return _result;
            }
            
            public openPDCManager.PhasorDataServiceProxy.Device EndGetDeviceByAcronym(System.IAsyncResult result) {
                object[] _args = new object[0];
                openPDCManager.PhasorDataServiceProxy.Device _result = ((openPDCManager.PhasorDataServiceProxy.Device)(base.EndInvoke("GetDeviceByAcronym", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetDevicesForOutputStream(int outputStreamID, string nodeID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = outputStreamID;
                _args[1] = nodeID;
                System.IAsyncResult _result = base.BeginInvoke("GetDevicesForOutputStream", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.Dictionary<int, string> EndGetDevicesForOutputStream(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.Dictionary<int, string> _result = ((System.Collections.Generic.Dictionary<int, string>)(base.EndInvoke("GetDevicesForOutputStream", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetConcentratorDevice(int deviceID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = deviceID;
                System.IAsyncResult _result = base.BeginInvoke("GetConcentratorDevice", _args, callback, asyncState);
                return _result;
            }
            
            public openPDCManager.PhasorDataServiceProxy.Device EndGetConcentratorDevice(System.IAsyncResult result) {
                object[] _args = new object[0];
                openPDCManager.PhasorDataServiceProxy.Device _result = ((openPDCManager.PhasorDataServiceProxy.Device)(base.EndInvoke("GetConcentratorDevice", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteDevice(int deviceID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = deviceID;
                System.IAsyncResult _result = base.BeginInvoke("DeleteDevice", _args, callback, asyncState);
                return _result;
            }
            
            public string EndDeleteDevice(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("DeleteDevice", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetPhasorList(int deviceID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = deviceID;
                System.IAsyncResult _result = base.BeginInvoke("GetPhasorList", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Phasor> EndGetPhasorList(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Phasor> _result = ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.PhasorDataServiceProxy.Phasor>)(base.EndInvoke("GetPhasorList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetPhasors(int deviceID, bool isOptional, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = deviceID;
                _args[1] = isOptional;
                System.IAsyncResult _result = base.BeginInvoke("GetPhasors", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.Dictionary<int, string> EndGetPhasors(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.Dictionary<int, string> _result = ((System.Collections.Generic.Dictionary<int, string>)(base.EndInvoke("GetPhasors", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSavePhasor(openPDCManager.PhasorDataServiceProxy.Phasor phasor, bool isNew, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = phasor;
                _args[1] = isNew;
                System.IAsyncResult _result = base.BeginInvoke("SavePhasor", _args, callback, asyncState);
                return _result;
            }
            
            public string EndSavePhasor(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("SavePhasor", _args, result)));
                return _result;
            }
        }
    }
}
